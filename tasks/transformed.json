[
  {
    "objectID": "Configuring Lambda function settings - iOS-0",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You may want to override the Amplify CLI default configurations for your Lambda function or configure changes not available within the amplify add function workflow."
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-1",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Example: When creating a Node.js function, the CLI will automatically configure a runtime version, a default memory size, and more. There are a few things you may want to override or configure:"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-2",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Runtime"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-3",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Memory size"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-4",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Environment variables"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-5",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Let's look at how to update all of these things."
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-6",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "You may want to tweak the runtime version to be either a newer or older version than the Amplify-generated default."
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-7",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "Let's say we've deployed a Lambda function using a Node.js runtime and we want to modify the version of the runtime to be 14.x."
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-8",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "To do so, open amplify/backend/function/function-name/function-name-cloudformation-template.json and set the Runtime property in the LambdaFunction resource to:"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-9",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "Next, deploy the updates using the Amplify CLI:"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-10",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "When you deploy a function with Amplify, the default memory size will be set to a low setting (128MB). Often you will want to increase the default memory size in order to improve performance. A popular memory setting in Lambda is 1024MB as it speeds the function noticeably while usually keeping the cost the same or close to it."
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-11",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "To update the memory size, open amplify/backend/function/function-name/function-name-cloudformation-template.json and set the MemorySize property in the LambdaFunction resource:"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-12",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "Next, deploy the updates using the Amplify CLI:"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-13",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "To learn more about optimizing resources allocation for Lambda functions, check out this blog post."
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-14",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "A very common scenario is the need to set and use an environment variable in your Lambda function."
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-15",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "There are generally two types of environment variables:"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-16",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "Secret values (example: access keys, API keys etc.)"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-17",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "Non-secret values (example: endpoint information, locale information etc.)"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-18",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "To view all configuration options available in AWS Lambda, check out the documentation here"
  },
  {
    "objectID": "Configuring Lambda function settings - iOS-19",
    "title": "Configuring Lambda function settings - iOS",
    "description": "How to configure custom settings for your Lambda function - iOS",
    "slug": "/guides/functions/configuring-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "To learn more about extending the Amplify CLI with custom resources, check out the documentation here"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-0",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You may want to override the Amplify CLI default configurations for your Lambda function or configure changes not available within the amplify add function workflow."
  },
  {
    "objectID": "Configuring Lambda function settings - Android-1",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Example: When creating a Node.js function, the CLI will automatically configure a runtime version, a default memory size, and more. There are a few things you may want to override or configure:"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-2",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Runtime"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-3",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Memory size"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-4",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Environment variables"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-5",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Let's look at how to update all of these things."
  },
  {
    "objectID": "Configuring Lambda function settings - Android-6",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "You may want to tweak the runtime version to be either a newer or older version than the Amplify-generated default."
  },
  {
    "objectID": "Configuring Lambda function settings - Android-7",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "Let's say we've deployed a Lambda function using a Node.js runtime and we want to modify the version of the runtime to be 14.x."
  },
  {
    "objectID": "Configuring Lambda function settings - Android-8",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "To do so, open amplify/backend/function/function-name/function-name-cloudformation-template.json and set the Runtime property in the LambdaFunction resource to:"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-9",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "Next, deploy the updates using the Amplify CLI:"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-10",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "When you deploy a function with Amplify, the default memory size will be set to a low setting (128MB). Often you will want to increase the default memory size in order to improve performance. A popular memory setting in Lambda is 1024MB as it speeds the function noticeably while usually keeping the cost the same or close to it."
  },
  {
    "objectID": "Configuring Lambda function settings - Android-11",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "To update the memory size, open amplify/backend/function/function-name/function-name-cloudformation-template.json and set the MemorySize property in the LambdaFunction resource:"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-12",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "Next, deploy the updates using the Amplify CLI:"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-13",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "To learn more about optimizing resources allocation for Lambda functions, check out this blog post."
  },
  {
    "objectID": "Configuring Lambda function settings - Android-14",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "A very common scenario is the need to set and use an environment variable in your Lambda function."
  },
  {
    "objectID": "Configuring Lambda function settings - Android-15",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "There are generally two types of environment variables:"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-16",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "Secret values (example: access keys, API keys etc.)"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-17",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "Non-secret values (example: endpoint information, locale information etc.)"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-18",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "To view all configuration options available in AWS Lambda, check out the documentation here"
  },
  {
    "objectID": "Configuring Lambda function settings - Android-19",
    "title": "Configuring Lambda function settings - Android",
    "description": "How to configure custom settings for your Lambda function - Android",
    "slug": "/guides/functions/configuring-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "To learn more about extending the Amplify CLI with custom resources, check out the documentation here"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-0",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You may want to override the Amplify CLI default configurations for your Lambda function or configure changes not available within the amplify add function workflow."
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-1",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Example: When creating a Node.js function, the CLI will automatically configure a runtime version, a default memory size, and more. There are a few things you may want to override or configure:"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-2",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Runtime"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-3",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Memory size"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-4",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Environment variables"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-5",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Let's look at how to update all of these things."
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-6",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "You may want to tweak the runtime version to be either a newer or older version than the Amplify-generated default."
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-7",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "Let's say we've deployed a Lambda function using a Node.js runtime and we want to modify the version of the runtime to be 14.x."
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-8",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "To do so, open amplify/backend/function/function-name/function-name-cloudformation-template.json and set the Runtime property in the LambdaFunction resource to:"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-9",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the Runtime",
    "depth": 2,
    "text": "Next, deploy the updates using the Amplify CLI:"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-10",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "When you deploy a function with Amplify, the default memory size will be set to a low setting (128MB). Often you will want to increase the default memory size in order to improve performance. A popular memory setting in Lambda is 1024MB as it speeds the function noticeably while usually keeping the cost the same or close to it."
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-11",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "To update the memory size, open amplify/backend/function/function-name/function-name-cloudformation-template.json and set the MemorySize property in the LambdaFunction resource:"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-12",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "Next, deploy the updates using the Amplify CLI:"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-13",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Updating the default memory size",
    "depth": 2,
    "text": "To learn more about optimizing resources allocation for Lambda functions, check out this blog post."
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-14",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "A very common scenario is the need to set and use an environment variable in your Lambda function."
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-15",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "There are generally two types of environment variables:"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-16",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "Secret values (example: access keys, API keys etc.)"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-17",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "Non-secret values (example: endpoint information, locale information etc.)"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-18",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "To view all configuration options available in AWS Lambda, check out the documentation here"
  },
  {
    "objectID": "Configuring Lambda function settings - JavaScript-19",
    "title": "Configuring Lambda function settings - JavaScript",
    "description": "How to configure custom settings for your Lambda function - JavaScript",
    "slug": "/guides/functions/configuring-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Setting an environment variable",
    "depth": 2,
    "text": "To learn more about extending the Amplify CLI with custom resources, check out the documentation here"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-0",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you are using AWS Cognito to handle authentication in your application you can use triggers to handle authentication\nevents. For example, send a welcome email after the user signs up. The complete documentation on AWS Cognito triggers can be found here."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-1",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to use a post confirmation trigger to save user's information to your DynamoDB table.\nLike mentioned in the previous guides, the easiest way to interact with DynamoDB from Lambda in a Node.js environment is\nto use the DynamoDB document client."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-2",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Using this approach you can link a Cognito Identity to an user profile in your application, and have the possibility to list posts by author and be able to show their name, email\n, date of creation, etc instead of their id."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-3",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The main advantage of this method is that you don't have to manually create the user in your GraphQL API using a mutation, which is another alternative."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-4",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The main issue of this solution is that if you remove an user from AWS Cognito, your application won't know about it."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-5",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scenario",
    "depth": 3,
    "text": "After user sign-up, you want to create an entry in a DynamoDB table with the user's information."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-6",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "In this step you will create your User table, where the entry with user's information will be saved. This will be done using Amplify GraphQL API."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-7",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "You can skip this part, if you already have a GraphQL API with an User model."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-8",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "The CLI should open the GraphQL schema, located at amplify/backend/api/contactapi/schema.graphql, in your text editor. Update the schema with the following and save the file:"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-9",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "This function will be called after user post confirmation."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-10",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Next open the index.js file associated to your newly created lambda function, and paste the following code :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-11",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "You can access your table name by calling the environment variable API__USERTABLE_NAME."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-12",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Deploy the lambda function :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-13",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Your lambda function is now ready to use!"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-14",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "To configure your AWS Cognito trigger to call the lambda function you just created, you should do the following :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-15",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Go to your AWS Console"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-16",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Navigate to AWS Cognito service, and choose 'Manage User Pools'"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-17",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Select the User Pool related to your application"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - iOS-18",
    "title": "Calling DynamoDB using AWS Cognito triggers - iOS",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - iOS",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Go to 'Triggers' and look for Post Confirmation Trigger, then select your lambda function"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-0",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you are using AWS Cognito to handle authentication in your application you can use triggers to handle authentication\nevents. For example, send a welcome email after the user signs up. The complete documentation on AWS Cognito triggers can be found here."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-1",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to use a post confirmation trigger to save user's information to your DynamoDB table.\nLike mentioned in the previous guides, the easiest way to interact with DynamoDB from Lambda in a Node.js environment is\nto use the DynamoDB document client."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-2",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Using this approach you can link a Cognito Identity to an user profile in your application, and have the possibility to list posts by author and be able to show their name, email\n, date of creation, etc instead of their id."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-3",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The main advantage of this method is that you don't have to manually create the user in your GraphQL API using a mutation, which is another alternative."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-4",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The main issue of this solution is that if you remove an user from AWS Cognito, your application won't know about it."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-5",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scenario",
    "depth": 3,
    "text": "After user sign-up, you want to create an entry in a DynamoDB table with the user's information."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-6",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "In this step you will create your User table, where the entry with user's information will be saved. This will be done using Amplify GraphQL API."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-7",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "You can skip this part, if you already have a GraphQL API with an User model."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-8",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "The CLI should open the GraphQL schema, located at amplify/backend/api/contactapi/schema.graphql, in your text editor. Update the schema with the following and save the file:"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-9",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "This function will be called after user post confirmation."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-10",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Next open the index.js file associated to your newly created lambda function, and paste the following code :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-11",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "You can access your table name by calling the environment variable API__USERTABLE_NAME."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-12",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Deploy the lambda function :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-13",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Your lambda function is now ready to use!"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-14",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "To configure your AWS Cognito trigger to call the lambda function you just created, you should do the following :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-15",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Go to your AWS Console"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-16",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Navigate to AWS Cognito service, and choose 'Manage User Pools'"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-17",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Select the User Pool related to your application"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - Android-18",
    "title": "Calling DynamoDB using AWS Cognito triggers - Android",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - Android",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Go to 'Triggers' and look for Post Confirmation Trigger, then select your lambda function"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-0",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you are using AWS Cognito to handle authentication in your application you can use triggers to handle authentication\nevents. For example, send a welcome email after the user signs up. The complete documentation on AWS Cognito triggers can be found here."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-1",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to use a post confirmation trigger to save user's information to your DynamoDB table.\nLike mentioned in the previous guides, the easiest way to interact with DynamoDB from Lambda in a Node.js environment is\nto use the DynamoDB document client."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-2",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Using this approach you can link a Cognito Identity to an user profile in your application, and have the possibility to list posts by author and be able to show their name, email\n, date of creation, etc instead of their id."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-3",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The main advantage of this method is that you don't have to manually create the user in your GraphQL API using a mutation, which is another alternative."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-4",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The main issue of this solution is that if you remove an user from AWS Cognito, your application won't know about it."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-5",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scenario",
    "depth": 3,
    "text": "After user sign-up, you want to create an entry in a DynamoDB table with the user's information."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-6",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "In this step you will create your User table, where the entry with user's information will be saved. This will be done using Amplify GraphQL API."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-7",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "You can skip this part, if you already have a GraphQL API with an User model."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-8",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create GraphQL API",
    "depth": 3,
    "text": "The CLI should open the GraphQL schema, located at amplify/backend/api/contactapi/schema.graphql, in your text editor. Update the schema with the following and save the file:"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-9",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "This function will be called after user post confirmation."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-10",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Next open the index.js file associated to your newly created lambda function, and paste the following code :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-11",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "You can access your table name by calling the environment variable API__USERTABLE_NAME."
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-12",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Deploy the lambda function :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-13",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create the lambda function",
    "depth": 3,
    "text": "Your lambda function is now ready to use!"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-14",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "To configure your AWS Cognito trigger to call the lambda function you just created, you should do the following :"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-15",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Go to your AWS Console"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-16",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Navigate to AWS Cognito service, and choose 'Manage User Pools'"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-17",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Select the User Pool related to your application"
  },
  {
    "objectID": "Calling DynamoDB using AWS Cognito triggers - JavaScript-18",
    "title": "Calling DynamoDB using AWS Cognito triggers - JavaScript",
    "description": "How to add an entry in DynamoDB, with user's information after sign-up post-confirmation - JavaScript",
    "slug": "/guides/functions/cognito-trigger-lambda-dynamodb/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configure the Post Confirmation trigger",
    "depth": 3,
    "text": "Go to 'Triggers' and look for Post Confirmation Trigger, then select your lambda function"
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-0",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to run a GraphQL server in a Lambda function. In this example we will be using Apollo Server and Apollo Server Lambda, but you can use any server implementation you would like."
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-1",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The end goal is to have an API endpoint, like https://your-api-endpoint.com/graphql, deployed and integrated with a GraphQL server running in a serverless function."
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-2",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the Amplify project",
    "depth": 3,
    "text": "To get started, create a new Amplify project."
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-3",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the Amplify project",
    "depth": 3,
    "text": "If you already have an Amplify project created, you can jump to the next step - Creating the GraphQL API and function"
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-4",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the GraphQL API and function",
    "depth": 3,
    "text": "Next we need to create the API and the Lambda function. Using the api category, the CLI will create a serverless function as well as an http endpoint that we can use for our GraphQL server."
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-5",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Installing the dependencies",
    "depth": 4,
    "text": "Change into the folder of the Lambda function and install the following dependencies:"
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-6",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now, let's open the code for the function."
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-7",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Open amplify/backend/function/apolloserver/src/index.js. Here, you will see the main function handler. Update the function with the following code:"
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-8",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now, we can deploy the function and GraphQL API:"
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-9",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now the API is deployed and you should be able to start interacting with it."
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-10",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "API URL",
    "depth": 3,
    "text": "Once the server is up and running, The url is available in the aws-exports.js file. The final GraphQL endpoint will look something like this:"
  },
  {
    "objectID": "GraphQL Server in Lambda - iOS-11",
    "title": "GraphQL Server in Lambda - iOS",
    "description": "How to run an Apollo GraphQL server in a Lambda function - iOS",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "API URL",
    "depth": 3,
    "text": "You can also use the GraphQL playground by navigating to the GraphQL endpoint /graphql directly in your browser."
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-0",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to run a GraphQL server in a Lambda function. In this example we will be using Apollo Server and Apollo Server Lambda, but you can use any server implementation you would like."
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-1",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The end goal is to have an API endpoint, like https://your-api-endpoint.com/graphql, deployed and integrated with a GraphQL server running in a serverless function."
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-2",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the Amplify project",
    "depth": 3,
    "text": "To get started, create a new Amplify project."
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-3",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the Amplify project",
    "depth": 3,
    "text": "If you already have an Amplify project created, you can jump to the next step - Creating the GraphQL API and function"
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-4",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the GraphQL API and function",
    "depth": 3,
    "text": "Next we need to create the API and the Lambda function. Using the api category, the CLI will create a serverless function as well as an http endpoint that we can use for our GraphQL server."
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-5",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Installing the dependencies",
    "depth": 4,
    "text": "Change into the folder of the Lambda function and install the following dependencies:"
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-6",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now, let's open the code for the function."
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-7",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Open amplify/backend/function/apolloserver/src/index.js. Here, you will see the main function handler. Update the function with the following code:"
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-8",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now, we can deploy the function and GraphQL API:"
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-9",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now the API is deployed and you should be able to start interacting with it."
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-10",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "API URL",
    "depth": 3,
    "text": "Once the server is up and running, The url is available in the aws-exports.js file. The final GraphQL endpoint will look something like this:"
  },
  {
    "objectID": "GraphQL Server in Lambda - Android-11",
    "title": "GraphQL Server in Lambda - Android",
    "description": "How to run an Apollo GraphQL server in a Lambda function - Android",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "API URL",
    "depth": 3,
    "text": "You can also use the GraphQL playground by navigating to the GraphQL endpoint /graphql directly in your browser."
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-0",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to run a GraphQL server in a Lambda function. In this example we will be using Apollo Server and Apollo Server Lambda, but you can use any server implementation you would like."
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-1",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The end goal is to have an API endpoint, like https://your-api-endpoint.com/graphql, deployed and integrated with a GraphQL server running in a serverless function."
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-2",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the Amplify project",
    "depth": 3,
    "text": "To get started, create a new Amplify project."
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-3",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the Amplify project",
    "depth": 3,
    "text": "If you already have an Amplify project created, you can jump to the next step - Creating the GraphQL API and function"
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-4",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating the GraphQL API and function",
    "depth": 3,
    "text": "Next we need to create the API and the Lambda function. Using the api category, the CLI will create a serverless function as well as an http endpoint that we can use for our GraphQL server."
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-5",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Installing the dependencies",
    "depth": 4,
    "text": "Change into the folder of the Lambda function and install the following dependencies:"
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-6",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now, let's open the code for the function."
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-7",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Open amplify/backend/function/apolloserver/src/index.js. Here, you will see the main function handler. Update the function with the following code:"
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-8",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now, we can deploy the function and GraphQL API:"
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-9",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Function code",
    "depth": 3,
    "text": "Now the API is deployed and you should be able to start interacting with it."
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-10",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "API URL",
    "depth": 3,
    "text": "Once the server is up and running, The url is available in the aws-exports.js file. The final GraphQL endpoint will look something like this:"
  },
  {
    "objectID": "GraphQL Server in Lambda - JavaScript-11",
    "title": "GraphQL Server in Lambda - JavaScript",
    "description": "How to run an Apollo GraphQL server in a Lambda function - JavaScript",
    "slug": "/guides/functions/graphql-server-in-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "API URL",
    "depth": 3,
    "text": "You can also use the GraphQL playground by navigating to the GraphQL endpoint /graphql directly in your browser."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - iOS-0",
    "title": "Calling DynamoDB from a Lambda function in Python - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - iOS",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The easiest way to interact with DynamoDB from Lambda in a Python environment is to use the boto3 DynamoDB client. In this guide you will learn how to interact with a DynamoDB database from a Lambda function using the Python runtime."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - iOS-1",
    "title": "Calling DynamoDB from a Lambda function in Python - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - iOS",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You will learn how to perform put_item, get_item, scan, and query operations."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - iOS-2",
    "title": "Calling DynamoDB from a Lambda function in Python - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - iOS",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note that the Amplify-generated Python Lambda functions use Pipenv for packaging. To install a dependency, such as boto3, first change into your function's Amplify folder, then enter the Pipenv virtual environment and install inside it."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - iOS-3",
    "title": "Calling DynamoDB from a Lambda function in Python - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - iOS",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating an item in DynamoDB from Lambda",
    "depth": 3,
    "text": "To create an item in DynamoDB you can use the put method:"
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - iOS-4",
    "title": "Calling DynamoDB from a Lambda function in Python - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - iOS",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Getting an item by primary key in DynamoDB from Lambda",
    "depth": 3,
    "text": "To get an item by primary key in DynamoDB you can use the get method. A get request returns a single item given the primary key of that item:"
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - iOS-5",
    "title": "Calling DynamoDB from a Lambda function in Python - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - iOS",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scanning a table",
    "depth": 3,
    "text": "A scan returns one or more items and item attributes by accessing every item in a table or a secondary index (limit of 1 MB of data)."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - iOS-6",
    "title": "Calling DynamoDB from a Lambda function in Python - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - iOS",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Querying a table",
    "depth": 3,
    "text": "A query returns one or more items and item attributes by querying items from a table by primary key or secondary index."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - Android-0",
    "title": "Calling DynamoDB from a Lambda function in Python - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - Android",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The easiest way to interact with DynamoDB from Lambda in a Python environment is to use the boto3 DynamoDB client. In this guide you will learn how to interact with a DynamoDB database from a Lambda function using the Python runtime."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - Android-1",
    "title": "Calling DynamoDB from a Lambda function in Python - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - Android",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You will learn how to perform put_item, get_item, scan, and query operations."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - Android-2",
    "title": "Calling DynamoDB from a Lambda function in Python - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - Android",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note that the Amplify-generated Python Lambda functions use Pipenv for packaging. To install a dependency, such as boto3, first change into your function's Amplify folder, then enter the Pipenv virtual environment and install inside it."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - Android-3",
    "title": "Calling DynamoDB from a Lambda function in Python - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - Android",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating an item in DynamoDB from Lambda",
    "depth": 3,
    "text": "To create an item in DynamoDB you can use the put method:"
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - Android-4",
    "title": "Calling DynamoDB from a Lambda function in Python - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - Android",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Getting an item by primary key in DynamoDB from Lambda",
    "depth": 3,
    "text": "To get an item by primary key in DynamoDB you can use the get method. A get request returns a single item given the primary key of that item:"
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - Android-5",
    "title": "Calling DynamoDB from a Lambda function in Python - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - Android",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scanning a table",
    "depth": 3,
    "text": "A scan returns one or more items and item attributes by accessing every item in a table or a secondary index (limit of 1 MB of data)."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - Android-6",
    "title": "Calling DynamoDB from a Lambda function in Python - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - Android",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Querying a table",
    "depth": 3,
    "text": "A query returns one or more items and item attributes by querying items from a table by primary key or secondary index."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - JavaScript-0",
    "title": "Calling DynamoDB from a Lambda function in Python - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - JavaScript",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The easiest way to interact with DynamoDB from Lambda in a Python environment is to use the boto3 DynamoDB client. In this guide you will learn how to interact with a DynamoDB database from a Lambda function using the Python runtime."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - JavaScript-1",
    "title": "Calling DynamoDB from a Lambda function in Python - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - JavaScript",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You will learn how to perform put_item, get_item, scan, and query operations."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - JavaScript-2",
    "title": "Calling DynamoDB from a Lambda function in Python - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - JavaScript",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note that the Amplify-generated Python Lambda functions use Pipenv for packaging. To install a dependency, such as boto3, first change into your function's Amplify folder, then enter the Pipenv virtual environment and install inside it."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - JavaScript-3",
    "title": "Calling DynamoDB from a Lambda function in Python - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - JavaScript",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating an item in DynamoDB from Lambda",
    "depth": 3,
    "text": "To create an item in DynamoDB you can use the put method:"
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - JavaScript-4",
    "title": "Calling DynamoDB from a Lambda function in Python - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - JavaScript",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Getting an item by primary key in DynamoDB from Lambda",
    "depth": 3,
    "text": "To get an item by primary key in DynamoDB you can use the get method. A get request returns a single item given the primary key of that item:"
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - JavaScript-5",
    "title": "Calling DynamoDB from a Lambda function in Python - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - JavaScript",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scanning a table",
    "depth": 3,
    "text": "A scan returns one or more items and item attributes by accessing every item in a table or a secondary index (limit of 1 MB of data)."
  },
  {
    "objectID": "Calling DynamoDB from a Lambda function in Python - JavaScript-6",
    "title": "Calling DynamoDB from a Lambda function in Python - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Python - JavaScript",
    "slug": "/guides/functions/dynamodb-from-python-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Querying a table",
    "depth": 3,
    "text": "A query returns one or more items and item attributes by querying items from a table by primary key or secondary index."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - iOS-0",
    "title": "Calling DynamoDB from Lambda in Node.js - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - iOS",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The easiest way to interact with DynamoDB from Lambda in a Node.js environment is to use the DynamoDB document client. In this guide you will learn how to interact with a DynamoDB database from a Lambda function using the Node.js runtime."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - iOS-1",
    "title": "Calling DynamoDB from Lambda in Node.js - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - iOS",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You will learn how to perform put, get, scan, and query operations."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - iOS-2",
    "title": "Calling DynamoDB from Lambda in Node.js - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - iOS",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating an item in DynamoDB from Lambda",
    "depth": 3,
    "text": "To create an item in DynamoDB you can use the put method:"
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - iOS-3",
    "title": "Calling DynamoDB from Lambda in Node.js - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - iOS",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Getting an item by primary key in DynamoDB from Lambda",
    "depth": 3,
    "text": "To get an item by primary key in DynamoDB you can use the get method. A get request returns a single item given the primary key of that item:"
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - iOS-4",
    "title": "Calling DynamoDB from Lambda in Node.js - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - iOS",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scanning a table",
    "depth": 3,
    "text": "A scan returns one or more items and item attributes by accessing every item in a table or a secondary index (limit of 1 MB of data)."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - iOS-5",
    "title": "Calling DynamoDB from Lambda in Node.js - iOS",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - iOS",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Querying a table",
    "depth": 3,
    "text": "A query returns one or more items and item attributes by querying items from a table by primary key or secondary index."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - Android-0",
    "title": "Calling DynamoDB from Lambda in Node.js - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - Android",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The easiest way to interact with DynamoDB from Lambda in a Node.js environment is to use the DynamoDB document client. In this guide you will learn how to interact with a DynamoDB database from a Lambda function using the Node.js runtime."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - Android-1",
    "title": "Calling DynamoDB from Lambda in Node.js - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - Android",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You will learn how to perform put, get, scan, and query operations."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - Android-2",
    "title": "Calling DynamoDB from Lambda in Node.js - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - Android",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating an item in DynamoDB from Lambda",
    "depth": 3,
    "text": "To create an item in DynamoDB you can use the put method:"
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - Android-3",
    "title": "Calling DynamoDB from Lambda in Node.js - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - Android",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Getting an item by primary key in DynamoDB from Lambda",
    "depth": 3,
    "text": "To get an item by primary key in DynamoDB you can use the get method. A get request returns a single item given the primary key of that item:"
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - Android-4",
    "title": "Calling DynamoDB from Lambda in Node.js - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - Android",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scanning a table",
    "depth": 3,
    "text": "A scan returns one or more items and item attributes by accessing every item in a table or a secondary index (limit of 1 MB of data)."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - Android-5",
    "title": "Calling DynamoDB from Lambda in Node.js - Android",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - Android",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Querying a table",
    "depth": 3,
    "text": "A query returns one or more items and item attributes by querying items from a table by primary key or secondary index."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - JavaScript-0",
    "title": "Calling DynamoDB from Lambda in Node.js - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - JavaScript",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The easiest way to interact with DynamoDB from Lambda in a Node.js environment is to use the DynamoDB document client. In this guide you will learn how to interact with a DynamoDB database from a Lambda function using the Node.js runtime."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - JavaScript-1",
    "title": "Calling DynamoDB from Lambda in Node.js - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - JavaScript",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You will learn how to perform put, get, scan, and query operations."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - JavaScript-2",
    "title": "Calling DynamoDB from Lambda in Node.js - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - JavaScript",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating an item in DynamoDB from Lambda",
    "depth": 3,
    "text": "To create an item in DynamoDB you can use the put method:"
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - JavaScript-3",
    "title": "Calling DynamoDB from Lambda in Node.js - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - JavaScript",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Getting an item by primary key in DynamoDB from Lambda",
    "depth": 3,
    "text": "To get an item by primary key in DynamoDB you can use the get method. A get request returns a single item given the primary key of that item:"
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - JavaScript-4",
    "title": "Calling DynamoDB from Lambda in Node.js - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - JavaScript",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Scanning a table",
    "depth": 3,
    "text": "A scan returns one or more items and item attributes by accessing every item in a table or a secondary index (limit of 1 MB of data)."
  },
  {
    "objectID": "Calling DynamoDB from Lambda in Node.js - JavaScript-5",
    "title": "Calling DynamoDB from Lambda in Node.js - JavaScript",
    "description": "How to interact with a DynamoDB database from a Lambda function in Node.js - JavaScript",
    "slug": "/guides/functions/dynamodb-from-js-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Querying a table",
    "depth": 3,
    "text": "A query returns one or more items and item attributes by querying items from a table by primary key or secondary index."
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-0",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to do three things:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-1",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new Lambda function and DynamoDB database that are integrated together"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-2",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new DynamoDB Database and integrate it with an existing Lambda function"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-3",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new Lambda function and integrate it with an an existing DynamoDB database"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-4",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "The first thing you will need to do will be to create the DynamoDB table:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-5",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Next, create the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-6",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Deploy the function and database:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-7",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-8",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "To learn how to interact with DynamoDB from Lambda, check out Calling DynamoDB from Lambda in Node.js."
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-9",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "First, create the database using the storage category:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-10",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Next, update the function permissions:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-11",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Deploy the database and updates to the Lambda permissions:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-12",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-13",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "To create a new Lambda function integrated with an existing DynamoDB database, you need to grant access to the database in the creation process of the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-14",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "Deploy the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-15",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - iOS-16",
    "title": "Integrating DynamoDB with Lambda - iOS",
    "description": "How to integrate a DynamoDB table with a Lambda function - iOS",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "To learn how to interact with DynamoDB from Lambda, check out Calling DynamoDB from Lambda in Node.js."
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-0",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to do three things:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-1",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new Lambda function and DynamoDB database that are integrated together"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-2",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new DynamoDB Database and integrate it with an existing Lambda function"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-3",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new Lambda function and integrate it with an an existing DynamoDB database"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-4",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "The first thing you will need to do will be to create the DynamoDB table:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-5",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Next, create the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-6",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Deploy the function and database:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-7",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-8",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "To learn how to interact with DynamoDB from Lambda, check out Calling DynamoDB from Lambda in Node.js."
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-9",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "First, create the database using the storage category:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-10",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Next, update the function permissions:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-11",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Deploy the database and updates to the Lambda permissions:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-12",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-13",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "To create a new Lambda function integrated with an existing DynamoDB database, you need to grant access to the database in the creation process of the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-14",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "Deploy the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-15",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - Android-16",
    "title": "Integrating DynamoDB with Lambda - Android",
    "description": "How to integrate a DynamoDB table with a Lambda function - Android",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "To learn how to interact with DynamoDB from Lambda, check out Calling DynamoDB from Lambda in Node.js."
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-0",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to do three things:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-1",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new Lambda function and DynamoDB database that are integrated together"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-2",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new DynamoDB Database and integrate it with an existing Lambda function"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-3",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a new Lambda function and integrate it with an an existing DynamoDB database"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-4",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "The first thing you will need to do will be to create the DynamoDB table:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-5",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Next, create the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-6",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Deploy the function and database:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-7",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-8",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and DynamoDB database that are integrated",
    "depth": 3,
    "text": "To learn how to interact with DynamoDB from Lambda, check out Calling DynamoDB from Lambda in Node.js."
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-9",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "First, create the database using the storage category:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-10",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Next, update the function permissions:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-11",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Deploy the database and updates to the Lambda permissions:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-12",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new DynamoDB Database and integrate with an existing Lambda function",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-13",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "To create a new Lambda function integrated with an existing DynamoDB database, you need to grant access to the database in the creation process of the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-14",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "Deploy the function:"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-15",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "Your function and database are now ready to use!"
  },
  {
    "objectID": "Integrating DynamoDB with Lambda - JavaScript-16",
    "title": "Integrating DynamoDB with Lambda - JavaScript",
    "description": "How to integrate a DynamoDB table with a Lambda function - JavaScript",
    "slug": "/guides/functions/integrating-dynamodb-with-lambda/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Creating a new Lambda function and integrate with an an existing DynamoDB database",
    "depth": 3,
    "text": "To learn how to interact with DynamoDB from Lambda, check out Calling DynamoDB from Lambda in Node.js."
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - iOS-0",
    "title": "Connecting a REST API to a Lambda function - iOS",
    "description": "How to connect a REST API to a Lambda function - iOS",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to connect a REST API to an existing Lambda function."
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - iOS-1",
    "title": "Connecting a REST API to a Lambda function - iOS",
    "description": "How to connect a REST API to a Lambda function - iOS",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To get started, create a new API:"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - iOS-2",
    "title": "Connecting a REST API to a Lambda function - iOS",
    "description": "How to connect a REST API to a Lambda function - iOS",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Deploy the API:"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - iOS-3",
    "title": "Connecting a REST API to a Lambda function - iOS",
    "description": "How to connect a REST API to a Lambda function - iOS",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Your API is now ready to use!"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - iOS-4",
    "title": "Connecting a REST API to a Lambda function - iOS",
    "description": "How to connect a REST API to a Lambda function - iOS",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To learn more about how to interact with the API from a client-side application, check out the docs here"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - Android-0",
    "title": "Connecting a REST API to a Lambda function - Android",
    "description": "How to connect a REST API to a Lambda function - Android",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to connect a REST API to an existing Lambda function."
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - Android-1",
    "title": "Connecting a REST API to a Lambda function - Android",
    "description": "How to connect a REST API to a Lambda function - Android",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To get started, create a new API:"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - Android-2",
    "title": "Connecting a REST API to a Lambda function - Android",
    "description": "How to connect a REST API to a Lambda function - Android",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Deploy the API:"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - Android-3",
    "title": "Connecting a REST API to a Lambda function - Android",
    "description": "How to connect a REST API to a Lambda function - Android",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Your API is now ready to use!"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - Android-4",
    "title": "Connecting a REST API to a Lambda function - Android",
    "description": "How to connect a REST API to a Lambda function - Android",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To learn more about how to interact with the API from a client-side application, check out the docs here"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - JavaScript-0",
    "title": "Connecting a REST API to a Lambda function - JavaScript",
    "description": "How to connect a REST API to a Lambda function - JavaScript",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to connect a REST API to an existing Lambda function."
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - JavaScript-1",
    "title": "Connecting a REST API to a Lambda function - JavaScript",
    "description": "How to connect a REST API to a Lambda function - JavaScript",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To get started, create a new API:"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - JavaScript-2",
    "title": "Connecting a REST API to a Lambda function - JavaScript",
    "description": "How to connect a REST API to a Lambda function - JavaScript",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Deploy the API:"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - JavaScript-3",
    "title": "Connecting a REST API to a Lambda function - JavaScript",
    "description": "How to connect a REST API to a Lambda function - JavaScript",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Your API is now ready to use!"
  },
  {
    "objectID": "Connecting a REST API to a Lambda function - JavaScript-4",
    "title": "Connecting a REST API to a Lambda function - JavaScript",
    "description": "How to connect a REST API to a Lambda function - JavaScript",
    "slug": "/guides/functions/connecting-a-rest-api/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To learn more about how to interact with the API from a client-side application, check out the docs here"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-0",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When you need to call your AppSync API from a Lambda function, you can export your AppSync operations generated by Amplify to a Lambda layer. This reduces the amount of duplicated code, and allows you to interact with the API from Lambda functions across multiple projects."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-1",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Set up your layer",
    "depth": 2,
    "text": "Start by creating the layer that will contain your AppSync operations."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-2",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Set up your layer",
    "depth": 2,
    "text": "In the ./amplify/backend/function/appsyncOperations/opt folder add the following helper library. The library exports a request function that you can use to send queries or mutations to your AppSync API. You can specify an API KEY to include the x-api-key header in the request. Otherwise the request is signed using SigV4 and the invoked Lambda function's credentials."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-3",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Install the Babel dependencies to transpile the GraphQL javascript files generated by the Amplify codegen"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-4",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Add a Babel configuration file that specifies the compilation target. The configuration specifies that the only target is NodeJS 12. In ./babel.config.json:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-5",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Add a command to the scripts in your package.json that updates your layer with the latest codegen:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-6",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Make sure to replace <your-lambda-layer-name> with the actual name of your Lambda layer."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-7",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can run this command after you've modified your schema to update the codegen and your layer:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-8",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "The opt directory of in your layer now looks like this:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-9",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can push your changes to the cloud with amplify push."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS-10",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - iOS",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - iOS",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/ios",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can now assign the layer to Lambda functions to easily call your AppSync API. Here's how you can leverage it in a Lambda function that has IAM permissions to call your AppSync API."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-0",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When you need to call your AppSync API from a Lambda function, you can export your AppSync operations generated by Amplify to a Lambda layer. This reduces the amount of duplicated code, and allows you to interact with the API from Lambda functions across multiple projects."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-1",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Set up your layer",
    "depth": 2,
    "text": "Start by creating the layer that will contain your AppSync operations."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-2",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Set up your layer",
    "depth": 2,
    "text": "In the ./amplify/backend/function/appsyncOperations/opt folder add the following helper library. The library exports a request function that you can use to send queries or mutations to your AppSync API. You can specify an API KEY to include the x-api-key header in the request. Otherwise the request is signed using SigV4 and the invoked Lambda function's credentials."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-3",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Install the Babel dependencies to transpile the GraphQL javascript files generated by the Amplify codegen"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-4",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Add a Babel configuration file that specifies the compilation target. The configuration specifies that the only target is NodeJS 12. In ./babel.config.json:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-5",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Add a command to the scripts in your package.json that updates your layer with the latest codegen:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-6",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Make sure to replace <your-lambda-layer-name> with the actual name of your Lambda layer."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-7",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can run this command after you've modified your schema to update the codegen and your layer:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-8",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "The opt directory of in your layer now looks like this:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-9",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can push your changes to the cloud with amplify push."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - Android-10",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - Android",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - Android",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/android",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can now assign the layer to Lambda functions to easily call your AppSync API. Here's how you can leverage it in a Lambda function that has IAM permissions to call your AppSync API."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-0",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When you need to call your AppSync API from a Lambda function, you can export your AppSync operations generated by Amplify to a Lambda layer. This reduces the amount of duplicated code, and allows you to interact with the API from Lambda functions across multiple projects."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-1",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Set up your layer",
    "depth": 2,
    "text": "Start by creating the layer that will contain your AppSync operations."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-2",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Set up your layer",
    "depth": 2,
    "text": "In the ./amplify/backend/function/appsyncOperations/opt folder add the following helper library. The library exports a request function that you can use to send queries or mutations to your AppSync API. You can specify an API KEY to include the x-api-key header in the request. Otherwise the request is signed using SigV4 and the invoked Lambda function's credentials."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-3",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Install the Babel dependencies to transpile the GraphQL javascript files generated by the Amplify codegen"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-4",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Add a Babel configuration file that specifies the compilation target. The configuration specifies that the only target is NodeJS 12. In ./babel.config.json:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-5",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Add a command to the scripts in your package.json that updates your layer with the latest codegen:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-6",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "Make sure to replace <your-lambda-layer-name> with the actual name of your Lambda layer."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-7",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can run this command after you've modified your schema to update the codegen and your layer:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-8",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "The opt directory of in your layer now looks like this:"
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-9",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can push your changes to the cloud with amplify push."
  },
  {
    "objectID": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript-10",
    "title": "Exporting AppSync operations to a Lambda layer for easy reuse - JavaScript",
    "description": "How to export your AppSync operations to a Lambda layer for easy reuse in your Lambda functions - JavaScript",
    "slug": "/guides/functions/appsync-operations-to-lambda-layer/q/platform/js",
    "category": "Guides",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Generate compatible code for your layer",
    "depth": 2,
    "text": "You can now assign the layer to Lambda functions to easily call your AppSync API. Here's how you can leverage it in a Lambda function that has IAM permissions to call your AppSync API."
  },
  {
    "objectID": "Python API - iOS-0",
    "title": "Python API - iOS",
    "description": "How to deploy a Python API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/python-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Python API."
  },
  {
    "objectID": "Python API - iOS-1",
    "title": "Python API - iOS",
    "description": "How to deploy a Python API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/python-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "Python API - iOS-2",
    "title": "Python API - iOS",
    "description": "How to deploy a Python API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/python-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/index.py and update the code to the following:"
  },
  {
    "objectID": "Python API - iOS-3",
    "title": "Python API - iOS",
    "description": "How to deploy a Python API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/python-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "Python API - iOS-4",
    "title": "Python API - iOS",
    "description": "How to deploy a Python API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/python-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "Python API - iOS-5",
    "title": "Python API - iOS",
    "description": "How to deploy a Python API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/python-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Python API - iOS-6",
    "title": "Python API - iOS",
    "description": "How to deploy a Python API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/python-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Python API - iOS-7",
    "title": "Python API - iOS",
    "description": "How to deploy a Python API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/python-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "Python API - Android-0",
    "title": "Python API - Android",
    "description": "How to deploy a Python API using Amplify Functions - Android",
    "slug": "/guides/api-rest/python-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Python API."
  },
  {
    "objectID": "Python API - Android-1",
    "title": "Python API - Android",
    "description": "How to deploy a Python API using Amplify Functions - Android",
    "slug": "/guides/api-rest/python-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "Python API - Android-2",
    "title": "Python API - Android",
    "description": "How to deploy a Python API using Amplify Functions - Android",
    "slug": "/guides/api-rest/python-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/index.py and update the code to the following:"
  },
  {
    "objectID": "Python API - Android-3",
    "title": "Python API - Android",
    "description": "How to deploy a Python API using Amplify Functions - Android",
    "slug": "/guides/api-rest/python-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "Python API - Android-4",
    "title": "Python API - Android",
    "description": "How to deploy a Python API using Amplify Functions - Android",
    "slug": "/guides/api-rest/python-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "Python API - Android-5",
    "title": "Python API - Android",
    "description": "How to deploy a Python API using Amplify Functions - Android",
    "slug": "/guides/api-rest/python-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Python API - Android-6",
    "title": "Python API - Android",
    "description": "How to deploy a Python API using Amplify Functions - Android",
    "slug": "/guides/api-rest/python-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Python API - Android-7",
    "title": "Python API - Android",
    "description": "How to deploy a Python API using Amplify Functions - Android",
    "slug": "/guides/api-rest/python-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "Python API - JavaScript-0",
    "title": "Python API - JavaScript",
    "description": "How to deploy a Python API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/python-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Python API."
  },
  {
    "objectID": "Python API - JavaScript-1",
    "title": "Python API - JavaScript",
    "description": "How to deploy a Python API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/python-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "Python API - JavaScript-2",
    "title": "Python API - JavaScript",
    "description": "How to deploy a Python API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/python-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/index.py and update the code to the following:"
  },
  {
    "objectID": "Python API - JavaScript-3",
    "title": "Python API - JavaScript",
    "description": "How to deploy a Python API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/python-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "Python API - JavaScript-4",
    "title": "Python API - JavaScript",
    "description": "How to deploy a Python API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/python-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "Python API - JavaScript-5",
    "title": "Python API - JavaScript",
    "description": "How to deploy a Python API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/python-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Python API - JavaScript-6",
    "title": "Python API - JavaScript",
    "description": "How to deploy a Python API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/python-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Python API - JavaScript-7",
    "title": "Python API - JavaScript",
    "description": "How to deploy a Python API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/python-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "Go API - iOS-0",
    "title": "Go API - iOS",
    "description": "How to deploy a Go API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/go-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Go API."
  },
  {
    "objectID": "Go API - iOS-1",
    "title": "Go API - iOS",
    "description": "How to deploy a Go API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/go-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "Go API - iOS-2",
    "title": "Go API - iOS",
    "description": "How to deploy a Go API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/go-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/main.go and update the code to the following:"
  },
  {
    "objectID": "Go API - iOS-3",
    "title": "Go API - iOS",
    "description": "How to deploy a Go API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/go-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "Go API - iOS-4",
    "title": "Go API - iOS",
    "description": "How to deploy a Go API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/go-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "Go API - iOS-5",
    "title": "Go API - iOS",
    "description": "How to deploy a Go API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/go-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Go API - iOS-6",
    "title": "Go API - iOS",
    "description": "How to deploy a Go API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/go-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Go API - iOS-7",
    "title": "Go API - iOS",
    "description": "How to deploy a Go API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/go-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "Go API - Android-0",
    "title": "Go API - Android",
    "description": "How to deploy a Go API using Amplify Functions - Android",
    "slug": "/guides/api-rest/go-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Go API."
  },
  {
    "objectID": "Go API - Android-1",
    "title": "Go API - Android",
    "description": "How to deploy a Go API using Amplify Functions - Android",
    "slug": "/guides/api-rest/go-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "Go API - Android-2",
    "title": "Go API - Android",
    "description": "How to deploy a Go API using Amplify Functions - Android",
    "slug": "/guides/api-rest/go-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/main.go and update the code to the following:"
  },
  {
    "objectID": "Go API - Android-3",
    "title": "Go API - Android",
    "description": "How to deploy a Go API using Amplify Functions - Android",
    "slug": "/guides/api-rest/go-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "Go API - Android-4",
    "title": "Go API - Android",
    "description": "How to deploy a Go API using Amplify Functions - Android",
    "slug": "/guides/api-rest/go-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "Go API - Android-5",
    "title": "Go API - Android",
    "description": "How to deploy a Go API using Amplify Functions - Android",
    "slug": "/guides/api-rest/go-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Go API - Android-6",
    "title": "Go API - Android",
    "description": "How to deploy a Go API using Amplify Functions - Android",
    "slug": "/guides/api-rest/go-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Go API - Android-7",
    "title": "Go API - Android",
    "description": "How to deploy a Go API using Amplify Functions - Android",
    "slug": "/guides/api-rest/go-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "Go API - JavaScript-0",
    "title": "Go API - JavaScript",
    "description": "How to deploy a Go API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/go-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Go API."
  },
  {
    "objectID": "Go API - JavaScript-1",
    "title": "Go API - JavaScript",
    "description": "How to deploy a Go API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/go-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "Go API - JavaScript-2",
    "title": "Go API - JavaScript",
    "description": "How to deploy a Go API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/go-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/main.go and update the code to the following:"
  },
  {
    "objectID": "Go API - JavaScript-3",
    "title": "Go API - JavaScript",
    "description": "How to deploy a Go API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/go-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "Go API - JavaScript-4",
    "title": "Go API - JavaScript",
    "description": "How to deploy a Go API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/go-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "Go API - JavaScript-5",
    "title": "Go API - JavaScript",
    "description": "How to deploy a Go API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/go-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Go API - JavaScript-6",
    "title": "Go API - JavaScript",
    "description": "How to deploy a Go API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/go-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Go API - JavaScript-7",
    "title": "Go API - JavaScript",
    "description": "How to deploy a Go API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/go-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "Express Server - iOS-0",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you'll learn how to deploy an Express web server complete with routing."
  },
  {
    "objectID": "Express Server - iOS-1",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Initializing the Amplify project",
    "depth": 3,
    "text": "Initialize a new Amplify project:"
  },
  {
    "objectID": "Express Server - iOS-2",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Next, create the API and web server. To do so, you can use the Amplify add command:"
  },
  {
    "objectID": "Express Server - iOS-3",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "The CLI has created a few things for you:"
  },
  {
    "objectID": "Express Server - iOS-4",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "API endpoint"
  },
  {
    "objectID": "Express Server - iOS-5",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Lambda function"
  },
  {
    "objectID": "Express Server - iOS-6",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Web server using Serverless Express in the function"
  },
  {
    "objectID": "Express Server - iOS-7",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Some boilerplate code for different methods on the /items route"
  },
  {
    "objectID": "Express Server - iOS-8",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Let's open the code for the server."
  },
  {
    "objectID": "Express Server - iOS-9",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Open amplify/backend/function/mylambda/src/index.js."
  },
  {
    "objectID": "Express Server - iOS-10",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "In this file you will see the main function handler with the event and context being proxied to an express server located at ./app.js (do not make any changes to this file):"
  },
  {
    "objectID": "Express Server - iOS-11",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Next, open amplify/backend/function/mylambda/src/app.js."
  },
  {
    "objectID": "Express Server - iOS-12",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Here, you will see the code for the express server and some boilerplate for the different HTTP methods for the route you declared."
  },
  {
    "objectID": "Express Server - iOS-13",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Find the route for app.get('/items') and update it to the following:"
  },
  {
    "objectID": "Express Server - iOS-14",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "To deploy the API and function, we can run the push command:"
  },
  {
    "objectID": "Express Server - iOS-15",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "From here, you may want to add additional path. To do so, run the update command:"
  },
  {
    "objectID": "Express Server - iOS-16",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "From there, you can add, update, or remove paths. To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Express Server - iOS-17",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Express Server - iOS-18",
    "title": "Express Server - iOS",
    "description": "How to deploy an Express server to AWS using AWS Amplify - iOS",
    "slug": "/guides/api-rest/express-server/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "Express Server - Android-0",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you'll learn how to deploy an Express web server complete with routing."
  },
  {
    "objectID": "Express Server - Android-1",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Initializing the Amplify project",
    "depth": 3,
    "text": "Initialize a new Amplify project:"
  },
  {
    "objectID": "Express Server - Android-2",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Next, create the API and web server. To do so, you can use the Amplify add command:"
  },
  {
    "objectID": "Express Server - Android-3",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "The CLI has created a few things for you:"
  },
  {
    "objectID": "Express Server - Android-4",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "API endpoint"
  },
  {
    "objectID": "Express Server - Android-5",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Lambda function"
  },
  {
    "objectID": "Express Server - Android-6",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Web server using Serverless Express in the function"
  },
  {
    "objectID": "Express Server - Android-7",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Some boilerplate code for different methods on the /items route"
  },
  {
    "objectID": "Express Server - Android-8",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Let's open the code for the server."
  },
  {
    "objectID": "Express Server - Android-9",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Open amplify/backend/function/mylambda/src/index.js."
  },
  {
    "objectID": "Express Server - Android-10",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "In this file you will see the main function handler with the event and context being proxied to an express server located at ./app.js (do not make any changes to this file):"
  },
  {
    "objectID": "Express Server - Android-11",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Next, open amplify/backend/function/mylambda/src/app.js."
  },
  {
    "objectID": "Express Server - Android-12",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Here, you will see the code for the express server and some boilerplate for the different HTTP methods for the route you declared."
  },
  {
    "objectID": "Express Server - Android-13",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Find the route for app.get('/items') and update it to the following:"
  },
  {
    "objectID": "Express Server - Android-14",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "To deploy the API and function, we can run the push command:"
  },
  {
    "objectID": "Express Server - Android-15",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "From here, you may want to add additional path. To do so, run the update command:"
  },
  {
    "objectID": "Express Server - Android-16",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "From there, you can add, update, or remove paths. To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Express Server - Android-17",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Express Server - Android-18",
    "title": "Express Server - Android",
    "description": "How to deploy an Express server to AWS using AWS Amplify - Android",
    "slug": "/guides/api-rest/express-server/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "Express Server - JavaScript-0",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you'll learn how to deploy an Express web server complete with routing."
  },
  {
    "objectID": "Express Server - JavaScript-1",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Initializing the Amplify project",
    "depth": 3,
    "text": "Initialize a new Amplify project:"
  },
  {
    "objectID": "Express Server - JavaScript-2",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Next, create the API and web server. To do so, you can use the Amplify add command:"
  },
  {
    "objectID": "Express Server - JavaScript-3",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "The CLI has created a few things for you:"
  },
  {
    "objectID": "Express Server - JavaScript-4",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "API endpoint"
  },
  {
    "objectID": "Express Server - JavaScript-5",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Lambda function"
  },
  {
    "objectID": "Express Server - JavaScript-6",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Web server using Serverless Express in the function"
  },
  {
    "objectID": "Express Server - JavaScript-7",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Creating the API and function",
    "depth": 3,
    "text": "Some boilerplate code for different methods on the /items route"
  },
  {
    "objectID": "Express Server - JavaScript-8",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Let's open the code for the server."
  },
  {
    "objectID": "Express Server - JavaScript-9",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Open amplify/backend/function/mylambda/src/index.js."
  },
  {
    "objectID": "Express Server - JavaScript-10",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "In this file you will see the main function handler with the event and context being proxied to an express server located at ./app.js (do not make any changes to this file):"
  },
  {
    "objectID": "Express Server - JavaScript-11",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Next, open amplify/backend/function/mylambda/src/app.js."
  },
  {
    "objectID": "Express Server - JavaScript-12",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Here, you will see the code for the express server and some boilerplate for the different HTTP methods for the route you declared."
  },
  {
    "objectID": "Express Server - JavaScript-13",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Updating the function code",
    "depth": 3,
    "text": "Find the route for app.get('/items') and update it to the following:"
  },
  {
    "objectID": "Express Server - JavaScript-14",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "To deploy the API and function, we can run the push command:"
  },
  {
    "objectID": "Express Server - JavaScript-15",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "From here, you may want to add additional path. To do so, run the update command:"
  },
  {
    "objectID": "Express Server - JavaScript-16",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "From there, you can add, update, or remove paths. To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "Express Server - JavaScript-17",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "Express Server - JavaScript-18",
    "title": "Express Server - JavaScript",
    "description": "How to deploy an Express server to AWS using AWS Amplify - JavaScript",
    "slug": "/guides/api-rest/express-server/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Deploying the service",
    "depth": 3,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "NodeJS API - iOS-0",
    "title": "NodeJS API - iOS",
    "description": "How to deploy a NodeJS API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/node-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Node.js API."
  },
  {
    "objectID": "NodeJS API - iOS-1",
    "title": "NodeJS API - iOS",
    "description": "How to deploy a NodeJS API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/node-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "NodeJS API - iOS-2",
    "title": "NodeJS API - iOS",
    "description": "How to deploy a NodeJS API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/node-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/index.js and update the code to the following:"
  },
  {
    "objectID": "NodeJS API - iOS-3",
    "title": "NodeJS API - iOS",
    "description": "How to deploy a NodeJS API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/node-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "NodeJS API - iOS-4",
    "title": "NodeJS API - iOS",
    "description": "How to deploy a NodeJS API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/node-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "NodeJS API - iOS-5",
    "title": "NodeJS API - iOS",
    "description": "How to deploy a NodeJS API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/node-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "NodeJS API - iOS-6",
    "title": "NodeJS API - iOS",
    "description": "How to deploy a NodeJS API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/node-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "NodeJS API - iOS-7",
    "title": "NodeJS API - iOS",
    "description": "How to deploy a NodeJS API using Amplify Functions - iOS",
    "slug": "/guides/api-rest/node-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "NodeJS API - Android-0",
    "title": "NodeJS API - Android",
    "description": "How to deploy a NodeJS API using Amplify Functions - Android",
    "slug": "/guides/api-rest/node-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Node.js API."
  },
  {
    "objectID": "NodeJS API - Android-1",
    "title": "NodeJS API - Android",
    "description": "How to deploy a NodeJS API using Amplify Functions - Android",
    "slug": "/guides/api-rest/node-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "NodeJS API - Android-2",
    "title": "NodeJS API - Android",
    "description": "How to deploy a NodeJS API using Amplify Functions - Android",
    "slug": "/guides/api-rest/node-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/index.js and update the code to the following:"
  },
  {
    "objectID": "NodeJS API - Android-3",
    "title": "NodeJS API - Android",
    "description": "How to deploy a NodeJS API using Amplify Functions - Android",
    "slug": "/guides/api-rest/node-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "NodeJS API - Android-4",
    "title": "NodeJS API - Android",
    "description": "How to deploy a NodeJS API using Amplify Functions - Android",
    "slug": "/guides/api-rest/node-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "NodeJS API - Android-5",
    "title": "NodeJS API - Android",
    "description": "How to deploy a NodeJS API using Amplify Functions - Android",
    "slug": "/guides/api-rest/node-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "NodeJS API - Android-6",
    "title": "NodeJS API - Android",
    "description": "How to deploy a NodeJS API using Amplify Functions - Android",
    "slug": "/guides/api-rest/node-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "NodeJS API - Android-7",
    "title": "NodeJS API - Android",
    "description": "How to deploy a NodeJS API using Amplify Functions - Android",
    "slug": "/guides/api-rest/node-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "NodeJS API - JavaScript-0",
    "title": "NodeJS API - JavaScript",
    "description": "How to deploy a NodeJS API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/node-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide, you will learn how to deploy a Node.js API."
  },
  {
    "objectID": "NodeJS API - JavaScript-1",
    "title": "NodeJS API - JavaScript",
    "description": "How to deploy a NodeJS API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/node-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "2. Add the API and function",
    "depth": 2,
    "text": "The CLI should have created a new function located at amplify/backend/function/greetingfunction."
  },
  {
    "objectID": "NodeJS API - JavaScript-2",
    "title": "NodeJS API - JavaScript",
    "description": "How to deploy a NodeJS API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/node-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "3. Updating the function code",
    "depth": 2,
    "text": "Next, open  amplify/backend/function/greetingfunction/src/index.js and update the code to the following:"
  },
  {
    "objectID": "NodeJS API - JavaScript-3",
    "title": "NodeJS API - JavaScript",
    "description": "How to deploy a NodeJS API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/node-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "4. Deploy the API",
    "depth": 2,
    "text": "To deploy the API, run the push command:"
  },
  {
    "objectID": "NodeJS API - JavaScript-4",
    "title": "NodeJS API - JavaScript",
    "description": "How to deploy a NodeJS API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/node-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "Here is how you can send a GET request to the API."
  },
  {
    "objectID": "NodeJS API - JavaScript-5",
    "title": "NodeJS API - JavaScript",
    "description": "How to deploy a NodeJS API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/node-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "To learn more about interacting with REST APIs using Amplify, check out the complete documentation here."
  },
  {
    "objectID": "NodeJS API - JavaScript-6",
    "title": "NodeJS API - JavaScript",
    "description": "How to deploy a NodeJS API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/node-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "The API endpoint is located in the aws-exports.js folder."
  },
  {
    "objectID": "NodeJS API - JavaScript-7",
    "title": "NodeJS API - JavaScript",
    "description": "How to deploy a NodeJS API using Amplify Functions - JavaScript",
    "slug": "/guides/api-rest/node-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "5. Using the API",
    "depth": 2,
    "text": "You can also interact directly with the API using this URL and the specified path:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-0",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The GraphQL Transform Library provides a @function directive that enables the configuration of AWS Lambda function resolvers within your GraphQL API. In this guide you will learn how to use Lambda functions as GraphQL resolvers to interact with other services and APIs using the @function directive."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-1",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "To get started, let's take a look at a GraphQL schema with a query and a mutation that has the data source set as a Lambda function."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-2",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "Using the @function directive, you can specify a Lambda function to be invoked as the GraphQL resolver."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-3",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "In this guide, you'll learn how to enable Lambda function resolvers in a GraphQL API."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-4",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "To get started, create the first Lambda function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-5",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "Open the function code (located at amplify/backend/function/echofunction/src/index.js) and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-6",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "This function will just return the value of the msg property passed in as an argument."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-7",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "The event object will contain the following properties:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-8",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "In the above function we've used the arguments property to get the values passed in as arguments to the function."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-9",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "Next, create another Lambda function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-10",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "Next, update the function code (located at amplify/backend/function/addingfunction/src/index.js) to the following and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-11",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "This function will add two numbers together and return the result."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-12",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Now that the functions have been created, you can create the GraphQL API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-13",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Next, update the base GraphQL schema (located at amplify/backend/api/gqllambda/schema.graphql) with the following code and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-14",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Now deploy the functions and GraphQL API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-15",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Querying the GraphQL API",
    "depth": 3,
    "text": "Now, you can run the following queries and mutations to interact with the API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-16",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, we'll create a function that will interact with a public Cryptocurrency REST API."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-17",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Create another function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-18",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, update the function code (located at amplify/backend/function/cryptofunction/src/index.js) to the following and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-19",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, install the axios library in the function src folder and change back into the root directory:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-20",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Now, update the GraphQL schema and add a getCoins resolver to the Query type:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-21",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, deploy the updates:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-22",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Now you can query the GraphQL API using the new getCoins query."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - iOS-23",
    "title": "How to use Lambda GraphQL Resolvers - iOS",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - iOS",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query with limit",
    "depth": 4,
    "text": "To learn more about the @function directive, check out the GraphQL Transform documentation here."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-0",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The GraphQL Transform Library provides a @function directive that enables the configuration of AWS Lambda function resolvers within your GraphQL API. In this guide you will learn how to use Lambda functions as GraphQL resolvers to interact with other services and APIs using the @function directive."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-1",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "To get started, let's take a look at a GraphQL schema with a query and a mutation that has the data source set as a Lambda function."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-2",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "Using the @function directive, you can specify a Lambda function to be invoked as the GraphQL resolver."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-3",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "In this guide, you'll learn how to enable Lambda function resolvers in a GraphQL API."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-4",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "To get started, create the first Lambda function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-5",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "Open the function code (located at amplify/backend/function/echofunction/src/index.js) and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-6",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "This function will just return the value of the msg property passed in as an argument."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-7",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "The event object will contain the following properties:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-8",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "In the above function we've used the arguments property to get the values passed in as arguments to the function."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-9",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "Next, create another Lambda function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-10",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "Next, update the function code (located at amplify/backend/function/addingfunction/src/index.js) to the following and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-11",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "This function will add two numbers together and return the result."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-12",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Now that the functions have been created, you can create the GraphQL API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-13",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Next, update the base GraphQL schema (located at amplify/backend/api/gqllambda/schema.graphql) with the following code and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-14",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Now deploy the functions and GraphQL API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-15",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Querying the GraphQL API",
    "depth": 3,
    "text": "Now, you can run the following queries and mutations to interact with the API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-16",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, we'll create a function that will interact with a public Cryptocurrency REST API."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-17",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Create another function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-18",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, update the function code (located at amplify/backend/function/cryptofunction/src/index.js) to the following and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-19",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, install the axios library in the function src folder and change back into the root directory:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-20",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Now, update the GraphQL schema and add a getCoins resolver to the Query type:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-21",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, deploy the updates:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-22",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Now you can query the GraphQL API using the new getCoins query."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - Android-23",
    "title": "How to use Lambda GraphQL Resolvers - Android",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - Android",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query with limit",
    "depth": 4,
    "text": "To learn more about the @function directive, check out the GraphQL Transform documentation here."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-0",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The GraphQL Transform Library provides a @function directive that enables the configuration of AWS Lambda function resolvers within your GraphQL API. In this guide you will learn how to use Lambda functions as GraphQL resolvers to interact with other services and APIs using the @function directive."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-1",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "To get started, let's take a look at a GraphQL schema with a query and a mutation that has the data source set as a Lambda function."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-2",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "Using the @function directive, you can specify a Lambda function to be invoked as the GraphQL resolver."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-3",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating basic query and mutation Function resolvers",
    "depth": 2,
    "text": "In this guide, you'll learn how to enable Lambda function resolvers in a GraphQL API."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-4",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "To get started, create the first Lambda function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-5",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "Open the function code (located at amplify/backend/function/echofunction/src/index.js) and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-6",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the functions",
    "depth": 3,
    "text": "This function will just return the value of the msg property passed in as an argument."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-7",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "The event object will contain the following properties:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-8",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "In the above function we've used the arguments property to get the values passed in as arguments to the function."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-9",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "Next, create another Lambda function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-10",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "Next, update the function code (located at amplify/backend/function/addingfunction/src/index.js) to the following and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-11",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda event information",
    "depth": 4,
    "text": "This function will add two numbers together and return the result."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-12",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Now that the functions have been created, you can create the GraphQL API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-13",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Next, update the base GraphQL schema (located at amplify/backend/api/gqllambda/schema.graphql) with the following code and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-14",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating the GraphQL API",
    "depth": 3,
    "text": "Now deploy the functions and GraphQL API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-15",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Querying the GraphQL API",
    "depth": 3,
    "text": "Now, you can run the following queries and mutations to interact with the API:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-16",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, we'll create a function that will interact with a public Cryptocurrency REST API."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-17",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Create another function:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-18",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, update the function code (located at amplify/backend/function/cryptofunction/src/index.js) to the following and press enter:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-19",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, install the axios library in the function src folder and change back into the root directory:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-20",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Now, update the GraphQL schema and add a getCoins resolver to the Query type:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-21",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Next, deploy the updates:"
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-22",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a resolver that interacts with another API",
    "depth": 2,
    "text": "Now you can query the GraphQL API using the new getCoins query."
  },
  {
    "objectID": "How to use Lambda GraphQL Resolvers - JavaScript-23",
    "title": "How to use Lambda GraphQL Resolvers - JavaScript",
    "description": "How to use Lambda GraphQL resolvers to interact with other services - JavaScript",
    "slug": "/guides/api-graphql/lambda-resolvers/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query with limit",
    "depth": 4,
    "text": "To learn more about the @function directive, check out the GraphQL Transform documentation here."
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-0",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to implement sorting in a GraphQL API. In our example, you will implement sorting results by date in either an ascending or descending order by implementing an additional data access pattern leveraging a DynamoDB Global Secondary Index using the @index GraphQL Transformer directive."
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-1",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "To get started, let's start with a basic GraphQL schema for a Todo app:"
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-2",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "When the API is created with an @model directive, the following queries will automatically be created for you:"
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-3",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "Next, take a look at the ModelTodoConnection type to get an idea of the data that will be returned when the listTodos query is run:"
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-4",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "By default, the listTodos query will return the items array unordered. Many times you will need these items to be ordered by title, by creation date, or in some other way."
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-5",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "To enable this, you can use the @index directive. This directive will allow you to set a custom sortKey on any field in your API."
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-6",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "In this example, you will enable sorting by the createdAt field. By default, Amplify will populate this createdAt field with a timestamp if none is passed in."
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-7",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "To enable this, update your schema with the following:"
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-8",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "When created a Todo, you must now populate the type field for this to work properly."
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-9",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "Next, create a few todos being sure to populate the type field:"
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-10",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "Now, you can query for todos by date in an ascending or descending order using the new todosByDate query:"
  },
  {
    "objectID": "GraphQL query with sorting by date - iOS-11",
    "title": "GraphQL query with sorting by date - iOS",
    "description": "How to implement sorting in a GraphQL query - iOS",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "To learn more about the @index directive, check out the documentation here"
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-0",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to implement sorting in a GraphQL API. In our example, you will implement sorting results by date in either an ascending or descending order by implementing an additional data access pattern leveraging a DynamoDB Global Secondary Index using the @index GraphQL Transformer directive."
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-1",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "To get started, let's start with a basic GraphQL schema for a Todo app:"
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-2",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "When the API is created with an @model directive, the following queries will automatically be created for you:"
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-3",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "Next, take a look at the ModelTodoConnection type to get an idea of the data that will be returned when the listTodos query is run:"
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-4",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "By default, the listTodos query will return the items array unordered. Many times you will need these items to be ordered by title, by creation date, or in some other way."
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-5",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "To enable this, you can use the @index directive. This directive will allow you to set a custom sortKey on any field in your API."
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-6",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "In this example, you will enable sorting by the createdAt field. By default, Amplify will populate this createdAt field with a timestamp if none is passed in."
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-7",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "To enable this, update your schema with the following:"
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-8",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "When created a Todo, you must now populate the type field for this to work properly."
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-9",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "Next, create a few todos being sure to populate the type field:"
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-10",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "Now, you can query for todos by date in an ascending or descending order using the new todosByDate query:"
  },
  {
    "objectID": "GraphQL query with sorting by date - Android-11",
    "title": "GraphQL query with sorting by date - Android",
    "description": "How to implement sorting in a GraphQL query - Android",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "To learn more about the @index directive, check out the documentation here"
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-0",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to implement sorting in a GraphQL API. In our example, you will implement sorting results by date in either an ascending or descending order by implementing an additional data access pattern leveraging a DynamoDB Global Secondary Index using the @index GraphQL Transformer directive."
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-1",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "To get started, let's start with a basic GraphQL schema for a Todo app:"
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-2",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "When the API is created with an @model directive, the following queries will automatically be created for you:"
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-3",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "Next, take a look at the ModelTodoConnection type to get an idea of the data that will be returned when the listTodos query is run:"
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-4",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "By default, the listTodos query will return the items array unordered. Many times you will need these items to be ordered by title, by creation date, or in some other way."
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-5",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overview",
    "depth": 3,
    "text": "To enable this, you can use the @index directive. This directive will allow you to set a custom sortKey on any field in your API."
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-6",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "In this example, you will enable sorting by the createdAt field. By default, Amplify will populate this createdAt field with a timestamp if none is passed in."
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-7",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "To enable this, update your schema with the following:"
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-8",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "When created a Todo, you must now populate the type field for this to work properly."
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-9",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "Next, create a few todos being sure to populate the type field:"
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-10",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "Now, you can query for todos by date in an ascending or descending order using the new todosByDate query:"
  },
  {
    "objectID": "GraphQL query with sorting by date - JavaScript-11",
    "title": "GraphQL query with sorting by date - JavaScript",
    "description": "How to implement sorting in a GraphQL query - JavaScript",
    "slug": "/guides/api-graphql/query-with-sorting/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Implementation",
    "depth": 3,
    "text": "To learn more about the @index directive, check out the documentation here"
  },
  {
    "objectID": "GraphQL pagination - iOS-0",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to implement pagination in your GraphQL API."
  },
  {
    "objectID": "GraphQL pagination - iOS-1",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When working with a large record set, you may want to only fetch the first N number of items. For example, let's start with a basic GraphQL schema for a Todo app:"
  },
  {
    "objectID": "GraphQL pagination - iOS-2",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When the API is created with an @model directive, the following queries will automatically be created for you:"
  },
  {
    "objectID": "GraphQL pagination - iOS-3",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Next, take a look at the ModelTodoConnection type to get an idea of the data that will be returned when the listTodos query is run:"
  },
  {
    "objectID": "GraphQL pagination - iOS-4",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When querying the API using the listTodos query, the return type will be of ModelTodoConnection, meaning you can return both an array of Todos and a nextToken."
  },
  {
    "objectID": "GraphQL pagination - iOS-5",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The nextToken is what is used to handle pagination. If the nextToken is null, that means that there is no more data to return from the API. If the nextToken is present, you can use the value as an argument to the next listTodos query to return the next selection set from the API."
  },
  {
    "objectID": "GraphQL pagination - iOS-6",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To test this out, try creating 5 todos using a mutation like this:"
  },
  {
    "objectID": "GraphQL pagination - iOS-7",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Next, you can set the limit of the number of todos in a query by passing in a limit argument. In this query, you'll set the limit to 2 items and request a nextToken as a return value:"
  },
  {
    "objectID": "GraphQL pagination - iOS-8",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Now, to query the next 2 items from the API, you can pass this nextToken as the argument:"
  },
  {
    "objectID": "GraphQL pagination - iOS-9",
    "title": "GraphQL pagination - iOS",
    "description": "How to implement pagination with GraphQL  - iOS",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When there are no other items left to be returned, the nextToken in the response will be set to null."
  },
  {
    "objectID": "GraphQL pagination - Android-0",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to implement pagination in your GraphQL API."
  },
  {
    "objectID": "GraphQL pagination - Android-1",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When working with a large record set, you may want to only fetch the first N number of items. For example, let's start with a basic GraphQL schema for a Todo app:"
  },
  {
    "objectID": "GraphQL pagination - Android-2",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When the API is created with an @model directive, the following queries will automatically be created for you:"
  },
  {
    "objectID": "GraphQL pagination - Android-3",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Next, take a look at the ModelTodoConnection type to get an idea of the data that will be returned when the listTodos query is run:"
  },
  {
    "objectID": "GraphQL pagination - Android-4",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When querying the API using the listTodos query, the return type will be of ModelTodoConnection, meaning you can return both an array of Todos and a nextToken."
  },
  {
    "objectID": "GraphQL pagination - Android-5",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The nextToken is what is used to handle pagination. If the nextToken is null, that means that there is no more data to return from the API. If the nextToken is present, you can use the value as an argument to the next listTodos query to return the next selection set from the API."
  },
  {
    "objectID": "GraphQL pagination - Android-6",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To test this out, try creating 5 todos using a mutation like this:"
  },
  {
    "objectID": "GraphQL pagination - Android-7",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Next, you can set the limit of the number of todos in a query by passing in a limit argument. In this query, you'll set the limit to 2 items and request a nextToken as a return value:"
  },
  {
    "objectID": "GraphQL pagination - Android-8",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Now, to query the next 2 items from the API, you can pass this nextToken as the argument:"
  },
  {
    "objectID": "GraphQL pagination - Android-9",
    "title": "GraphQL pagination - Android",
    "description": "How to implement pagination with GraphQL  - Android",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When there are no other items left to be returned, the nextToken in the response will be set to null."
  },
  {
    "objectID": "GraphQL pagination - JavaScript-0",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to implement pagination in your GraphQL API."
  },
  {
    "objectID": "GraphQL pagination - JavaScript-1",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When working with a large record set, you may want to only fetch the first N number of items. For example, let's start with a basic GraphQL schema for a Todo app:"
  },
  {
    "objectID": "GraphQL pagination - JavaScript-2",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When the API is created with an @model directive, the following queries will automatically be created for you:"
  },
  {
    "objectID": "GraphQL pagination - JavaScript-3",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Next, take a look at the ModelTodoConnection type to get an idea of the data that will be returned when the listTodos query is run:"
  },
  {
    "objectID": "GraphQL pagination - JavaScript-4",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When querying the API using the listTodos query, the return type will be of ModelTodoConnection, meaning you can return both an array of Todos and a nextToken."
  },
  {
    "objectID": "GraphQL pagination - JavaScript-5",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The nextToken is what is used to handle pagination. If the nextToken is null, that means that there is no more data to return from the API. If the nextToken is present, you can use the value as an argument to the next listTodos query to return the next selection set from the API."
  },
  {
    "objectID": "GraphQL pagination - JavaScript-6",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To test this out, try creating 5 todos using a mutation like this:"
  },
  {
    "objectID": "GraphQL pagination - JavaScript-7",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Next, you can set the limit of the number of todos in a query by passing in a limit argument. In this query, you'll set the limit to 2 items and request a nextToken as a return value:"
  },
  {
    "objectID": "GraphQL pagination - JavaScript-8",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Now, to query the next 2 items from the API, you can pass this nextToken as the argument:"
  },
  {
    "objectID": "GraphQL pagination - JavaScript-9",
    "title": "GraphQL pagination - JavaScript",
    "description": "How to implement pagination with GraphQL  - JavaScript",
    "slug": "/guides/api-graphql/graphql-pagination/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When there are no other items left to be returned, the nextToken in the response will be set to null."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Flutter-0",
    "title": "How to create GraphQL subscriptions by id - Flutter",
    "description": "How to create a custom GraphQL subscription that will listen by id - Flutter",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/flutter",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to create a custom GraphQL subscription that will only by connected and triggered by a mutation containing a specific ID as an argument."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Flutter-1",
    "title": "How to create GraphQL subscriptions by id - Flutter",
    "description": "How to create a custom GraphQL subscription that will listen by id - Flutter",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/flutter",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When using the Amplify GraphQL transform library, there will often be times when you need to expand the GraphQL schema and operations created by the @model directive. A common use case is when fine grained control is needed for GraphQL subscriptions."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Flutter-2",
    "title": "How to create GraphQL subscriptions by id - Flutter",
    "description": "How to create a custom GraphQL subscription that will listen by id - Flutter",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/flutter",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Take for example the following GraphQL schema:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Flutter-3",
    "title": "How to create GraphQL subscriptions by id - Flutter",
    "description": "How to create a custom GraphQL subscription that will listen by id - Flutter",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/flutter",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "By default, subscriptions will be created for the following mutations:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Flutter-4",
    "title": "How to create GraphQL subscriptions by id - Flutter",
    "description": "How to create a custom GraphQL subscription that will listen by id - Flutter",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/flutter",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "One operation that is not covered is if you wanted to only subscribe to comments for a specific post."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Flutter-5",
    "title": "How to create GraphQL subscriptions by id - Flutter",
    "description": "How to create a custom GraphQL subscription that will listen by id - Flutter",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/flutter",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Because the schema has a one to many relationship enabled between posts and comments, you can use the auto-generated field postCommentsId that defines the relationship between the post and the comment to set this up in a new Subscription definition."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Flutter-6",
    "title": "How to create GraphQL subscriptions by id - Flutter",
    "description": "How to create a custom GraphQL subscription that will listen by id - Flutter",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/flutter",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To implement this, you could update the schema with the following:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - iOS-0",
    "title": "How to create GraphQL subscriptions by id - iOS",
    "description": "How to create a custom GraphQL subscription that will listen by id - iOS",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to create a custom GraphQL subscription that will only by connected and triggered by a mutation containing a specific ID as an argument."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - iOS-1",
    "title": "How to create GraphQL subscriptions by id - iOS",
    "description": "How to create a custom GraphQL subscription that will listen by id - iOS",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When using the Amplify GraphQL transform library, there will often be times when you need to expand the GraphQL schema and operations created by the @model directive. A common use case is when fine grained control is needed for GraphQL subscriptions."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - iOS-2",
    "title": "How to create GraphQL subscriptions by id - iOS",
    "description": "How to create a custom GraphQL subscription that will listen by id - iOS",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Take for example the following GraphQL schema:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - iOS-3",
    "title": "How to create GraphQL subscriptions by id - iOS",
    "description": "How to create a custom GraphQL subscription that will listen by id - iOS",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "By default, subscriptions will be created for the following mutations:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - iOS-4",
    "title": "How to create GraphQL subscriptions by id - iOS",
    "description": "How to create a custom GraphQL subscription that will listen by id - iOS",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "One operation that is not covered is if you wanted to only subscribe to comments for a specific post."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - iOS-5",
    "title": "How to create GraphQL subscriptions by id - iOS",
    "description": "How to create a custom GraphQL subscription that will listen by id - iOS",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Because the schema has a one to many relationship enabled between posts and comments, you can use the auto-generated field postCommentsId that defines the relationship between the post and the comment to set this up in a new Subscription definition."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - iOS-6",
    "title": "How to create GraphQL subscriptions by id - iOS",
    "description": "How to create a custom GraphQL subscription that will listen by id - iOS",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To implement this, you could update the schema with the following:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Android-0",
    "title": "How to create GraphQL subscriptions by id - Android",
    "description": "How to create a custom GraphQL subscription that will listen by id - Android",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to create a custom GraphQL subscription that will only by connected and triggered by a mutation containing a specific ID as an argument."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Android-1",
    "title": "How to create GraphQL subscriptions by id - Android",
    "description": "How to create a custom GraphQL subscription that will listen by id - Android",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When using the Amplify GraphQL transform library, there will often be times when you need to expand the GraphQL schema and operations created by the @model directive. A common use case is when fine grained control is needed for GraphQL subscriptions."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Android-2",
    "title": "How to create GraphQL subscriptions by id - Android",
    "description": "How to create a custom GraphQL subscription that will listen by id - Android",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Take for example the following GraphQL schema:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Android-3",
    "title": "How to create GraphQL subscriptions by id - Android",
    "description": "How to create a custom GraphQL subscription that will listen by id - Android",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "By default, subscriptions will be created for the following mutations:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Android-4",
    "title": "How to create GraphQL subscriptions by id - Android",
    "description": "How to create a custom GraphQL subscription that will listen by id - Android",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "One operation that is not covered is if you wanted to only subscribe to comments for a specific post."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Android-5",
    "title": "How to create GraphQL subscriptions by id - Android",
    "description": "How to create a custom GraphQL subscription that will listen by id - Android",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Because the schema has a one to many relationship enabled between posts and comments, you can use the auto-generated field postCommentsId that defines the relationship between the post and the comment to set this up in a new Subscription definition."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - Android-6",
    "title": "How to create GraphQL subscriptions by id - Android",
    "description": "How to create a custom GraphQL subscription that will listen by id - Android",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To implement this, you could update the schema with the following:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - JavaScript-0",
    "title": "How to create GraphQL subscriptions by id - JavaScript",
    "description": "How to create a custom GraphQL subscription that will listen by id - JavaScript",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to create a custom GraphQL subscription that will only by connected and triggered by a mutation containing a specific ID as an argument."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - JavaScript-1",
    "title": "How to create GraphQL subscriptions by id - JavaScript",
    "description": "How to create a custom GraphQL subscription that will listen by id - JavaScript",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When using the Amplify GraphQL transform library, there will often be times when you need to expand the GraphQL schema and operations created by the @model directive. A common use case is when fine grained control is needed for GraphQL subscriptions."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - JavaScript-2",
    "title": "How to create GraphQL subscriptions by id - JavaScript",
    "description": "How to create a custom GraphQL subscription that will listen by id - JavaScript",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Take for example the following GraphQL schema:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - JavaScript-3",
    "title": "How to create GraphQL subscriptions by id - JavaScript",
    "description": "How to create a custom GraphQL subscription that will listen by id - JavaScript",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "By default, subscriptions will be created for the following mutations:"
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - JavaScript-4",
    "title": "How to create GraphQL subscriptions by id - JavaScript",
    "description": "How to create a custom GraphQL subscription that will listen by id - JavaScript",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "One operation that is not covered is if you wanted to only subscribe to comments for a specific post."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - JavaScript-5",
    "title": "How to create GraphQL subscriptions by id - JavaScript",
    "description": "How to create a custom GraphQL subscription that will listen by id - JavaScript",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Because the schema has a one to many relationship enabled between posts and comments, you can use the auto-generated field postCommentsId that defines the relationship between the post and the comment to set this up in a new Subscription definition."
  },
  {
    "objectID": "How to create GraphQL subscriptions by id - JavaScript-6",
    "title": "How to create GraphQL subscriptions by id - JavaScript",
    "description": "How to create a custom GraphQL subscription that will listen by id - JavaScript",
    "slug": "/guides/api-graphql/subscriptions-by-id/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To implement this, you could update the schema with the following:"
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-0",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to build and interact with a Form API using Amplify."
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-1",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The API that we will create is for a basic contact form. The form will allow the user to input their name and phone number, and for us to query for the list of contacts."
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-2",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "To get started, create a new Amplify project:"
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-3",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "Next, create a GraphQL API:"
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-4",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "The CLI should open the GraphQL schema, located at amplify/backend/api/contactapi/schema.graphql, in your text editor. Update the schema with the following and save the file:"
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-5",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "In the above schema, we've overriding the default mutations and are specifying that only the createContact mutation be allowed to be created. By doing this, the API does not allow users to update or delete contacts. For more fine grained authorization rules, check out the @auth directive."
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-6",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "Next, deploy the API:"
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-7",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Interacting the API",
    "depth": 3,
    "text": "To create a new contact, you can use the createContact mutation:"
  },
  {
    "objectID": "Building a Form API with GraphQL - iOS-8",
    "title": "Building a Form API with GraphQL - iOS",
    "description": "How to implement pagination with GraphQL - iOS",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/ios",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Interacting the API",
    "depth": 3,
    "text": "To query for a list of contacts, you can use the listContacts query:"
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-0",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to build and interact with a Form API using Amplify."
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-1",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The API that we will create is for a basic contact form. The form will allow the user to input their name and phone number, and for us to query for the list of contacts."
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-2",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "To get started, create a new Amplify project:"
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-3",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "Next, create a GraphQL API:"
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-4",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "The CLI should open the GraphQL schema, located at amplify/backend/api/contactapi/schema.graphql, in your text editor. Update the schema with the following and save the file:"
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-5",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "In the above schema, we've overriding the default mutations and are specifying that only the createContact mutation be allowed to be created. By doing this, the API does not allow users to update or delete contacts. For more fine grained authorization rules, check out the @auth directive."
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-6",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "Next, deploy the API:"
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-7",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Interacting the API",
    "depth": 3,
    "text": "To create a new contact, you can use the createContact mutation:"
  },
  {
    "objectID": "Building a Form API with GraphQL - Android-8",
    "title": "Building a Form API with GraphQL - Android",
    "description": "How to implement pagination with GraphQL - Android",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/android",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Interacting the API",
    "depth": 3,
    "text": "To query for a list of contacts, you can use the listContacts query:"
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-0",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this guide you will learn how to build and interact with a Form API using Amplify."
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-1",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The API that we will create is for a basic contact form. The form will allow the user to input their name and phone number, and for us to query for the list of contacts."
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-2",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "To get started, create a new Amplify project:"
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-3",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "Next, create a GraphQL API:"
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-4",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "The CLI should open the GraphQL schema, located at amplify/backend/api/contactapi/schema.graphql, in your text editor. Update the schema with the following and save the file:"
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-5",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "In the above schema, we've overriding the default mutations and are specifying that only the createContact mutation be allowed to be created. By doing this, the API does not allow users to update or delete contacts. For more fine grained authorization rules, check out the @auth directive."
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-6",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Getting started",
    "depth": 3,
    "text": "Next, deploy the API:"
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-7",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Interacting the API",
    "depth": 3,
    "text": "To create a new contact, you can use the createContact mutation:"
  },
  {
    "objectID": "Building a Form API with GraphQL - JavaScript-8",
    "title": "Building a Form API with GraphQL - JavaScript",
    "description": "How to implement pagination with GraphQL - JavaScript",
    "slug": "/guides/api-graphql/building-a-form-api/q/platform/js",
    "category": "Guides",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Interacting the API",
    "depth": 3,
    "text": "To query for a list of contacts, you can use the listContacts query:"
  },
  {
    "objectID": "File storage-0",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio File Storage provides a simple mechanism for managing user content for your app in public, protected or private storage folders. In Studio you can specify authorization rules that limit individual user or group access to create, read, update, or delete operations on your files. The File Storage category comes with built-in support for Amazon S3."
  },
  {
    "objectID": "File storage-2",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "There are two ways to add file storage to Amplify Studio - import an existing S3 bucket and create a new S3 bucket. Both methods require the authentication category to also be enabled."
  },
  {
    "objectID": "File storage-3",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "When you create new file storage for your app, you can edit authorization rules."
  },
  {
    "objectID": "File storage-4",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "Sign in to the AWS Management console and open AWS Amplify."
  },
  {
    "objectID": "File storage-5",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "In the navigation pane, choose an application."
  },
  {
    "objectID": "File storage-6",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "On the application information page, choose Launch Studio."
  },
  {
    "objectID": "File storage-7",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "On the Set up menu, choose Storage."
  },
  {
    "objectID": "File storage-8",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "On the Storage page, locate the Authorization settings on the bottom of the File storage bucket card."
  },
  {
    "objectID": "File storage-9",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "Select your desired authorization settings for Signed-in users, or Guest users (optional)."
  },
  {
    "objectID": "File storage-10",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "The authorization modes can always be edited under Set up, Storage."
  },
  {
    "objectID": "File storage-11",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization modes on new file storage",
    "depth": 2,
    "text": "To enable local development after setting up guest permissions, you must allow unauthenticated logins by updating your auth settings. Learn more"
  },
  {
    "objectID": "File storage-12",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To import file storage",
    "depth": 2,
    "text": "For default file access levels to work, your bucket needs to be configured accordingly:"
  },
  {
    "objectID": "File storage-13",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To import file storage",
    "depth": 2,
    "text": "private// - Only accessible for the individual user"
  },
  {
    "objectID": "File storage-14",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To import file storage",
    "depth": 2,
    "text": "protected// - Readable by all users, writable only by the creating user"
  },
  {
    "objectID": "File storage-15",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To import file storage",
    "depth": 2,
    "text": "public/ - Accessible by all users of your app"
  },
  {
    "objectID": "File storage-16",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To import file storage",
    "depth": 2,
    "text": "Learn more about how to import file storage."
  },
  {
    "objectID": "File storage-17",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization mode on imported file storage",
    "depth": 2,
    "text": "If you're using an imported S3 bucket with an imported Cognito resource, then you'll need to update the policy of your Cognito Identity Pool's authenticated and unauthenticated role. You'll need to create new managed policies (not inline policies) for these roles."
  },
  {
    "objectID": "File storage-18",
    "title": "File storage",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-storage",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To set the authorization mode on imported file storage",
    "depth": 2,
    "text": "Learn more about how to configure IAM roles for imported file storage"
  },
  {
    "objectID": "File browser-0",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio's File browser provides a view of the backend file storage for an application. You can use this feature to test your files and to provide both technical and non-technical team members with the ability to create and update an application's files in real-time instead of building admin views."
  },
  {
    "objectID": "File browser-2",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "By default, your storage is created with the following 4 folders:"
  },
  {
    "objectID": "File browser-3",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "private/ - Files here are nested under the user whom owns the file. Only the file owner can access or edit the files."
  },
  {
    "objectID": "File browser-4",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "protected/ - Files here are nested under the user whom owns the file. These files are accessible by all users, but editable only by the file owner."
  },
  {
    "objectID": "File browser-5",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "public/ - Files in here are accessible by all users of your app."
  },
  {
    "objectID": "File browser-6",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "upload/ - Contains files that were uploaded by users. Only the bucket owner has access to these files."
  },
  {
    "objectID": "File browser-7",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To upload a file",
    "depth": 2,
    "text": "Open Amplify Studio for an app."
  },
  {
    "objectID": "File browser-8",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To upload a file",
    "depth": 2,
    "text": "On the Manage menu, choose File browser."
  },
  {
    "objectID": "File browser-9",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To upload a file",
    "depth": 2,
    "text": "On the File browser page, select the folder you want to upload your file to."
  },
  {
    "objectID": "File browser-10",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To upload a file",
    "depth": 2,
    "text": "There are several ways to upload a file:"
  },
  {
    "objectID": "File browser-11",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To upload a file",
    "depth": 2,
    "text": "Select Upload, and select a file to upload."
  },
  {
    "objectID": "File browser-12",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To upload a file",
    "depth": 2,
    "text": "Drag and drop a file or folder onto the Studio file browser page."
  },
  {
    "objectID": "File browser-13",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To delete a file",
    "depth": 2,
    "text": "Open Amplify Studio for an app."
  },
  {
    "objectID": "File browser-14",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To delete a file",
    "depth": 2,
    "text": "On the Manage menu, choose File browser."
  },
  {
    "objectID": "File browser-15",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To delete a file",
    "depth": 2,
    "text": "On the File browser page, select the folder you want to delete your file from."
  },
  {
    "objectID": "File browser-16",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To delete a file",
    "depth": 2,
    "text": "Select the file you want to delete."
  },
  {
    "objectID": "File browser-17",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To delete a file",
    "depth": 2,
    "text": "Select the Actions dropdown and then select Delete."
  },
  {
    "objectID": "File browser-18",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To copy a file",
    "depth": 2,
    "text": "Open Amplify Studio for an app."
  },
  {
    "objectID": "File browser-19",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To copy a file",
    "depth": 2,
    "text": "On the Manage menu, choose File browser."
  },
  {
    "objectID": "File browser-20",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To copy a file",
    "depth": 2,
    "text": "On the File browser page, select the folder you want to delete your file from."
  },
  {
    "objectID": "File browser-21",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To copy a file",
    "depth": 2,
    "text": "Select the file you want to move."
  },
  {
    "objectID": "File browser-22",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To copy a file",
    "depth": 2,
    "text": "Select the Actions dropdown and then select Copy to."
  },
  {
    "objectID": "File browser-23",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To copy a file",
    "depth": 2,
    "text": "Select or create the folder you want a copy of your file to be saved to."
  },
  {
    "objectID": "File browser-24",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To copy a file",
    "depth": 2,
    "text": "Select Copy to copy your file to the selected folder."
  },
  {
    "objectID": "File browser-25",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To move a file",
    "depth": 2,
    "text": "Open Amplify Studio for an app."
  },
  {
    "objectID": "File browser-26",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To move a file",
    "depth": 2,
    "text": "On the Manage menu, choose File browser."
  },
  {
    "objectID": "File browser-27",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To move a file",
    "depth": 2,
    "text": "On the File browser page, select the folder you want to delete your file from."
  },
  {
    "objectID": "File browser-28",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To move a file",
    "depth": 2,
    "text": "Select the file you want to move."
  },
  {
    "objectID": "File browser-29",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To move a file",
    "depth": 2,
    "text": "Select the Actions dropdown and then select Move."
  },
  {
    "objectID": "File browser-30",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To move a file",
    "depth": 2,
    "text": "Select or create the folder you want to move your to."
  },
  {
    "objectID": "File browser-31",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To move a file",
    "depth": 2,
    "text": "Select Move to move your file to the selected folder."
  },
  {
    "objectID": "File browser-32",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "To test your files",
    "depth": 2,
    "text": "We've provided several shortcuts to test your files in your code."
  },
  {
    "objectID": "File browser-33",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Copy S3 key",
    "depth": 3,
    "text": "You can copy your file's S3 key either by:"
  },
  {
    "objectID": "File browser-34",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Copy S3 key",
    "depth": 3,
    "text": "Selecting Actions, and then Copy S3 key."
  },
  {
    "objectID": "File browser-35",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Copy S3 key",
    "depth": 3,
    "text": "Selecting the copy icon next to your S3 key in the right-hand inspector panel."
  },
  {
    "objectID": "File browser-36",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Copy get file code snippet",
    "depth": 3,
    "text": "We've provided code snippets for 'get file' in all Amplify supported languages in a code block in the right-hand inspector panel"
  },
  {
    "objectID": "File browser-37",
    "title": "File browser",
    "description": "Get started with Amplify Studio",
    "slug": "/console/storage/file-browser",
    "category": "Amplify Studio",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Copy object URL",
    "depth": 3,
    "text": "You can copy your file's object URL by Selecting the copy icon next to your object URL in the right-hand inspector panel"
  },
  {
    "objectID": "Access control-0",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Clone the example data model to follow along."
  },
  {
    "objectID": "Access control-1",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "We are going to define set up role-based authorization rules for each of the models that we created for our bookstore example. Authorization rules help in restricting who can query or update a table based on certain conditions."
  },
  {
    "objectID": "Access control-2",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set an owner authorization rule",
    "depth": 2,
    "text": "Using the Books data model that we created in the Create a data model example, set the authorization mode to Cognito user pool."
  },
  {
    "objectID": "Access control-3",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set an owner authorization rule",
    "depth": 2,
    "text": "In the Model pane on the right, expand the Owners window."
  },
  {
    "objectID": "Access control-4",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set an owner authorization rule",
    "depth": 2,
    "text": "Choose Create, Read, Update and Delete to specify that Owners have create, read, update, and delete access. The settings look as follows."
  },
  {
    "objectID": "Access control-6",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a private authorization rule",
    "depth": 2,
    "text": "Using the Books data model that we created in the Create a data model example, set the authorization mode to Cognito user pool."
  },
  {
    "objectID": "Access control-7",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a private authorization rule",
    "depth": 2,
    "text": "In the Model pane on the right, expand the Any signed-in users window."
  },
  {
    "objectID": "Access control-8",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a private authorization rule",
    "depth": 2,
    "text": "Choose Create, Read, and Update to specify that any signed-in authenticated user has create, read, and update, access. The settings look as follows."
  },
  {
    "objectID": "Access control-10",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a group authorization rule",
    "depth": 2,
    "text": "Using the Books data model that we created in the Create a data model example, set the authorization mode to Cognito user pool."
  },
  {
    "objectID": "Access control-11",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a group authorization rule",
    "depth": 2,
    "text": "Create an Editors group using the instructions to create a group. Alternately, you can create a new group from the Add a new rule for... menu."
  },
  {
    "objectID": "Access control-12",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a group authorization rule",
    "depth": 2,
    "text": "In the Model pane on the right, select Editors from the Add a new rule for... menu."
  },
  {
    "objectID": "Access control-14",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a group authorization rule",
    "depth": 2,
    "text": "Choose Create, Read, Update and Delete to specify that signed in users in the Editors group have create, read, update, and delete access. The settings look as follows."
  },
  {
    "objectID": "Access control-16",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a public authorization rule",
    "depth": 2,
    "text": "If you want your data model to be publicly accessible, switch to API_KEY or IAM based authorization."
  },
  {
    "objectID": "Access control-17",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a public authorization rule",
    "depth": 2,
    "text": "Using the Books data model that we created in the Create a data model example, set the authorization mode to API Key."
  },
  {
    "objectID": "Access control-18",
    "title": "Access control",
    "description": "Set up authorization rules",
    "slug": "/console/authz/permissions",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set a public authorization rule",
    "depth": 2,
    "text": "In the Model pane on the right, expand the Anyone window. Choose Read to specify that any signed in user has read access to the data in the Book model. The settings look as follows."
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Authorization is the process of validating what a user can access. In Amplify Studio you can specify authorization rules that limit individual user or group access to create, read, update, or delete operations on your data. Amplify Studio supports owner, public, private, and group based authorization at the model level. When an authorization directive is added to a type, all fields of the type are made available to that mode by default."
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set the authorization mode",
    "depth": 2,
    "text": "As you create a data model for your app, you can use the Inspector Panel on the right side of the Data modeling page to set authorization rules."
  },
  {
    "objectID": "Overview-2",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set the authorization mode",
    "depth": 2,
    "text": "Sign in to the AWS Management console and open AWS Amplify."
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set the authorization mode",
    "depth": 2,
    "text": "In the navigation pane, choose an application."
  },
  {
    "objectID": "Overview-4",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set the authorization mode",
    "depth": 2,
    "text": "On the application information page, choose the Backend environments tab, then choose Launch Studio."
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set the authorization mode",
    "depth": 2,
    "text": "On the Set up menu, choose Data."
  },
  {
    "objectID": "Overview-6",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set the authorization mode",
    "depth": 2,
    "text": "On the Data modeling page, locate the Authorization mode menu in the upper right corner."
  },
  {
    "objectID": "Overview-7",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set the authorization mode",
    "depth": 2,
    "text": "Choose one of API Key, Cognito user pool, or IAM."
  },
  {
    "objectID": "Overview-8",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "To set the authorization mode",
    "depth": 2,
    "text": "Skip ahead to set up authorization rules for the bookstore app, or learn about the different authorization modes below."
  },
  {
    "objectID": "Overview-9",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "Authorization modes",
    "depth": 2,
    "text": "The type of authorization rules that you are able to set depends on the authorization mode that you specify. There are three available authorization modes - API_KEY, Cognito User pools, and IAM."
  },
  {
    "objectID": "Overview-10",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "API Key",
    "depth": 3,
    "text": "The API key is the default authorization mode when you first deploy a data model. API Keys are recommended for development purposes or use cases where it is safe to provide public access to an API without specific authentication requirements (i.e. guest users). It is recommended to use API keys when you are getting started with the API development, want to iterate quickly, and don’t want to worry about more complicated authorization methods. Applications expected to be long-lived and widely distributed should not use API keys unless you have use cases where all or part of the application will always support guest access. API keys are valid for 30 days before they need to be rotated."
  },
  {
    "objectID": "Overview-11",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "Cognito user pool",
    "depth": 3,
    "text": "Amplify Authentication is powered by Amazon Cognito User Pools, a fully managed user directory. This the preferred authorization mode with Amplify as it provides finer grained access to your models - scope access to any signed-in user, groups, and owners. Cognito provides a secure way to exchange JWT tokens from User Pools with temporary AWS credentials that allow you to interact with other AWS services."
  },
  {
    "objectID": "Overview-12",
    "title": "Overview",
    "description": "Get started with Amplify Studio",
    "slug": "/console/authz/authorization",
    "category": "Amplify Studio",
    "subcategory": "Authorization",
    "type": "article",
    "heading": "IAM",
    "depth": 3,
    "text": "With the IAM authorization mode, requests are signed using the AWS Signature Version 4 Signing Process. The IAM public authorization mode is primarily used when your application needs to provide guest (public) access to your data. Guest access is accomplished with IAM using Amazon Cognito Identity Pools unauthenticated identities. The IAM private authorization mode is a great fit when used with backend systems (e.g.: Amazon EC2 instances or AWS Lambda) that can be securely configured with AWS credentials."
  },
  {
    "objectID": "Import Amazon Cognito resources-0",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can import existing Amazon Cognito resources into your Amplify project using Amplify Studio. To get started, choose Authentication from the Set up menu in your app's Studio. On the Authentication page, choose Reuse existing Amazon Cognito resources."
  },
  {
    "objectID": "Import Amazon Cognito resources-1",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "This feature is particularly useful if you’re trying to do the following:"
  },
  {
    "objectID": "Import Amazon Cognito resources-2",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Authorize user access to fields/tables in Amplify Studio's data model"
  },
  {
    "objectID": "Import Amazon Cognito resources-3",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Manage users and groups from Amplify Studio (instead of having to login to the AWS console)"
  },
  {
    "objectID": "Import Amazon Cognito resources-4",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Reuse the imported auth resource across Amplify environments"
  },
  {
    "objectID": "Import Amazon Cognito resources-5",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito user pool",
    "depth": 2,
    "text": "To successfully import your user pool, your user pools require at least two app clients with the following conditions:"
  },
  {
    "objectID": "Import Amazon Cognito resources-6",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito user pool",
    "depth": 2,
    "text": "At least one “Web app client”: an app client without a client secret"
  },
  {
    "objectID": "Import Amazon Cognito resources-7",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito user pool",
    "depth": 2,
    "text": "At least one “Native app client“: an app client with a client secret"
  },
  {
    "objectID": "Import Amazon Cognito resources-8",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito user pool",
    "depth": 2,
    "text": "The client secret is used by applications that have a server-side component that secure the client secret, which is why the native app client needs one."
  },
  {
    "objectID": "Import Amazon Cognito resources-9",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito user pool",
    "depth": 2,
    "text": "To complete the import procedure, run the amplify push command."
  },
  {
    "objectID": "Import Amazon Cognito resources-10",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito user pool",
    "depth": 2,
    "text": "Learn more about getting started with User Pools\nor\nconfiguring a User Pool App Client"
  },
  {
    "objectID": "Import Amazon Cognito resources-11",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing identity pool",
    "depth": 2,
    "text": "In order to successfully import your identity pool, it must have both of the user pool app clients must meet the following requirements:"
  },
  {
    "objectID": "Import Amazon Cognito resources-12",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing identity pool",
    "depth": 2,
    "text": "An Authenticated Role with a trust relationship to your identity pool"
  },
  {
    "objectID": "Import Amazon Cognito resources-13",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing identity pool",
    "depth": 2,
    "text": "An optional Unauthenticated Role if you want to use any guest user access for your Amplify categories (For example, guest access for your Amazon S3 buckets or REST API endpoints)."
  },
  {
    "objectID": "Import Amazon Cognito resources-14",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing identity pool",
    "depth": 2,
    "text": "These roles are usually automatically configured when you create a new identity pool enabling “Unauthenticated” access and have an Amazon Cognito user pool as an authentication provider."
  },
  {
    "objectID": "Import Amazon Cognito resources-15",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing identity pool",
    "depth": 2,
    "text": "Learn more about getting started with Identity Pools."
  },
  {
    "objectID": "Import Amazon Cognito resources-16",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import and update your source code",
    "depth": 2,
    "text": "Choose Import on the bottom of the page to complete the import procedure. Update your source code by running the following command:"
  },
  {
    "objectID": "Import Amazon Cognito resources-17",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import and update your source code",
    "depth": 2,
    "text": "Next, generate the necessary GraphQL files by running the following command:"
  },
  {
    "objectID": "Import Amazon Cognito resources-18",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import and update your source code",
    "depth": 2,
    "text": "After running this command, the following occurs:"
  },
  {
    "objectID": "Import Amazon Cognito resources-19",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import and update your source code",
    "depth": 2,
    "text": "Your Amplify Library configuration files (aws-exports.js, amplifyconfiguration.json) are automatically populated with your chosen Amazon Cognito resource information"
  },
  {
    "objectID": "Import Amazon Cognito resources-20",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import and update your source code",
    "depth": 2,
    "text": "Your designated existing Amazon Cognito resource is provided as the authentication and authorization mechanism for all auth-dependent categories (API, Storage and more)"
  },
  {
    "objectID": "Import Amazon Cognito resources-21",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import and update your source code",
    "depth": 2,
    "text": "Lambda functions are enabled to access the chosen Amazon Cognito resource if you permit it."
  },
  {
    "objectID": "Import Amazon Cognito resources-22",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Multi-environment support",
    "depth": 2,
    "text": "When you clone an environment or create a new one, you’ll be required to import your Amazon Cognito resources."
  },
  {
    "objectID": "Import Amazon Cognito resources-23",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Multi-environment support",
    "depth": 2,
    "text": "If you want to have Amplify manage your authorization resources in a new environment, unlink the imported Cognito resource and add authorization to your new environment. This will create new Amplify-managed authorization resources in the new environment."
  },
  {
    "objectID": "Import Amazon Cognito resources-24",
    "title": "Import Amazon Cognito resources",
    "description": "Configure Amplify Studio to use existing Amazon Cognito user pool and identity pool resources as an authentication and authorization mechanism for other Amplify categories ( For example, API, Storage, and more).",
    "slug": "/console/auth/import",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Unlink an existing Amazon Cognito user pool or identity pool",
    "depth": 2,
    "text": "In order to unlink your existing Amazon Cognito resource, click Unlink Cognito User Pool and Identity Pool on the bottom of the Authentication page and follow the prompt to confirm this action. This only unlinks the Amazon Cognito resource referenced from the Amplify project. It does not delete the Amazon Cognito resource itself."
  },
  {
    "objectID": "Manage authentication for users and groups-0",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In Amplify Studio, you can create and manage users and groups, edit user attributes, and suspend users."
  },
  {
    "objectID": "Manage authentication for users and groups-1",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "This topic shows you how to create and manage your app's users and groups. To set authorization rules that allow these users and groups to perform create, read, update, or delete operations on your app data, see Authorization."
  },
  {
    "objectID": "Manage authentication for users and groups-2",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a user",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Manage authentication for users and groups-3",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a user",
    "depth": 2,
    "text": "On the Manage menu, choose User management."
  },
  {
    "objectID": "Manage authentication for users and groups-4",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a user",
    "depth": 2,
    "text": "On the User management page, choose the Users tab and then choose Create user."
  },
  {
    "objectID": "Manage authentication for users and groups-5",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a user",
    "depth": 2,
    "text": "In the Create user window, for Unique identifier enter a username, email address, or phone number. For Temporary password enter a password."
  },
  {
    "objectID": "Manage authentication for users and groups-6",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a user",
    "depth": 2,
    "text": "Choose Create user."
  },
  {
    "objectID": "Manage authentication for users and groups-7",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To modify access for a user",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Manage authentication for users and groups-8",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To modify access for a user",
    "depth": 2,
    "text": "On the Manage menu, choose User management."
  },
  {
    "objectID": "Manage authentication for users and groups-9",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To modify access for a user",
    "depth": 2,
    "text": "On the User management page, choose the Users tab."
  },
  {
    "objectID": "Manage authentication for users and groups-10",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To modify access for a user",
    "depth": 2,
    "text": "Select the name of the user to manage."
  },
  {
    "objectID": "Manage authentication for users and groups-11",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To modify access for a user",
    "depth": 2,
    "text": "On the Actions menu, choose the action to perform on the user. The options are Reset password, Delete, Suspend, or Reactivate."
  },
  {
    "objectID": "Manage authentication for users and groups-12",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To modify access for a user",
    "depth": 2,
    "text": "For each menu option, a confirmation window is displayed. Follow the instructions in the confirmation window to complete the action on the user."
  },
  {
    "objectID": "Manage authentication for users and groups-13",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a group",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Manage authentication for users and groups-14",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a group",
    "depth": 2,
    "text": "On the Manage menu, choose User management."
  },
  {
    "objectID": "Manage authentication for users and groups-15",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a group",
    "depth": 2,
    "text": "On the User management page, choose the Groups tab and then choose Create group."
  },
  {
    "objectID": "Manage authentication for users and groups-16",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a group",
    "depth": 2,
    "text": "In the Create group window, for Title enter a name for the group."
  },
  {
    "objectID": "Manage authentication for users and groups-17",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To create a group",
    "depth": 2,
    "text": "Choose Create group."
  },
  {
    "objectID": "Manage authentication for users and groups-18",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To add a user to a group",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Manage authentication for users and groups-19",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To add a user to a group",
    "depth": 2,
    "text": "On the Manage menu, choose User management."
  },
  {
    "objectID": "Manage authentication for users and groups-20",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To add a user to a group",
    "depth": 2,
    "text": "On the User management page, choose the Groups tab."
  },
  {
    "objectID": "Manage authentication for users and groups-21",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To add a user to a group",
    "depth": 2,
    "text": "Select the name of the group to add users to."
  },
  {
    "objectID": "Manage authentication for users and groups-22",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To add a user to a group",
    "depth": 2,
    "text": "Choose Add user(s)."
  },
  {
    "objectID": "Manage authentication for users and groups-23",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To add a user to a group",
    "depth": 2,
    "text": "In the Add users to group window, choose how you want to search for users to add from the Search menu. You can choose Email, Phone number, or Username."
  },
  {
    "objectID": "Manage authentication for users and groups-24",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To add a user to a group",
    "depth": 2,
    "text": "Choose one user or multiple users to add to the group and then choose Add users."
  },
  {
    "objectID": "Manage authentication for users and groups-25",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To delete a group",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Manage authentication for users and groups-26",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To delete a group",
    "depth": 2,
    "text": "On the Manage menu, choose User management."
  },
  {
    "objectID": "Manage authentication for users and groups-27",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To delete a group",
    "depth": 2,
    "text": "On the User management page, choose the Groups tab."
  },
  {
    "objectID": "Manage authentication for users and groups-28",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To delete a group",
    "depth": 2,
    "text": "In the Groups section, select the name of the group to delete."
  },
  {
    "objectID": "Manage authentication for users and groups-29",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To delete a group",
    "depth": 2,
    "text": "Choose Delete."
  },
  {
    "objectID": "Manage authentication for users and groups-30",
    "title": "Manage authentication for users and groups",
    "description": "Manage authentication for users and groups",
    "slug": "/console/auth/user-management",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To delete a group",
    "depth": 2,
    "text": "A confirmation window is displayed. Enter Delete and choose, Confirm deletion."
  },
  {
    "objectID": "Authentication-0",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Authentication is the process of verifying the identity of a user. Writing the code for an application's login flow can be difficult and time consuming. In Amplify Studio, you can easily add a complete Amazon Cognito authentication solution to your app. You simply specify the log-in method, such as email and password, Amazon, Google, Facebook, or Sign in with Apple, and you are provided with the authentication UI component for the entire authentication flow."
  },
  {
    "objectID": "Authentication-1",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you choose to add one of the social sign-in login mechanisms, you will also need to specify an app ID, app secret, and redirect URIs. To learn more about how social sign-in works, see Social sign-in (OAuth)."
  },
  {
    "objectID": "Authentication-2",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Multi-factor authentication (MFA) increases security for your app by adding an authentication method and not relying solely on the username and password. AWS Amplify uses Amazon Cognito to provide MFA. To learn more, see Multi-factor authentication."
  },
  {
    "objectID": "Authentication-3",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note that you must configure and deploy authentication for your application before you can create users and groups or apply authorization rules to your data models."
  },
  {
    "objectID": "Authentication-4",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "Sign in to the AWS Management console and open AWS Amplify."
  },
  {
    "objectID": "Authentication-5",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "In the navigation pane, choose an application."
  },
  {
    "objectID": "Authentication-6",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "On the application information page, choose the Backend environments tab, then choose Launch Studio."
  },
  {
    "objectID": "Authentication-7",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "On the Set up menu, choose Authentication."
  },
  {
    "objectID": "Authentication-8",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "In the Configure log in section, choose a login mechanism to add from the Add login mechanism list. Valid options are Username, Phone number, Facebook, Google, Amazon, and Sign in with Apple. If you choose one of the social sign-in mechanisms, Facebook, Google, Amazon, or Sign in with Apple you will also need to enter your App ID, App Secret, and redirect URLs."
  },
  {
    "objectID": "Authentication-9",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "(Optional) Add multi-factor authentication (MFA).  MFA is set to Off by default. To turn on MFA, do the following in the Multi-factor authentication section:"
  },
  {
    "objectID": "Authentication-10",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "Choose Enforced to require MFA for all users or choose Optional to allow individual users to enable MFA."
  },
  {
    "objectID": "Authentication-11",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "(Optional) Choose SMS, and enter your SMS message."
  },
  {
    "objectID": "Authentication-12",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "(Optional) Choose Authenticator Application if you want your app to load with an authentication flow that includes sign up and sign in."
  },
  {
    "objectID": "Authentication-13",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "In the Configure sign up section, expand Password protection settings and customize the password policy settings to enforce.\nu6. Choose Save and Deploy. This starts a CloudFormation deployment with the progress displayed in the upper right corner of the page."
  },
  {
    "objectID": "Authentication-14",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To configure how users log in to an app",
    "depth": 2,
    "text": "Login mechanism settings, and sign up settings can't be changed after you deploy authentication. To change these settings, you must first delete the deployed authentication and then create and deploy new settings. You can, however, add new login mechanisms, add multi-factor authentication, and update the password protection settings."
  },
  {
    "objectID": "Authentication-15",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To reset authentication configuration settings",
    "depth": 2,
    "text": "Sign in to the AWS Management console and open AWS Amplify."
  },
  {
    "objectID": "Authentication-16",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To reset authentication configuration settings",
    "depth": 2,
    "text": "In the navigation pane, choose an application."
  },
  {
    "objectID": "Authentication-17",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To reset authentication configuration settings",
    "depth": 2,
    "text": "On the application information page, choose the Backend environments tab, then choose Launch Studio."
  },
  {
    "objectID": "Authentication-18",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To reset authentication configuration settings",
    "depth": 2,
    "text": "On the Set up menu, choose Authentication."
  },
  {
    "objectID": "Authentication-19",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To reset authentication configuration settings",
    "depth": 2,
    "text": "At the end of the Authentication page, choose Reset all authentication settings and users."
  },
  {
    "objectID": "Authentication-20",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To reset authentication configuration settings",
    "depth": 2,
    "text": "In the Delete authentication confirmation window, choose Delete all authentication rules."
  },
  {
    "objectID": "Authentication-21",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To reset authentication configuration settings",
    "depth": 2,
    "text": "The deployment progress displays in the upper right corner of the page."
  },
  {
    "objectID": "Authentication-22",
    "title": "Authentication",
    "description": "Getting started with authentication for an app",
    "slug": "/console/auth/authentication",
    "category": "Amplify Studio",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "To reset authentication configuration settings",
    "depth": 2,
    "text": "After the delete authentication deployment completes, deploy new authentication rules by following the steps in the preceding procedure for configuring how users log in to an app."
  },
  {
    "objectID": "Content management-0",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify Studio Content management view provides a tabular view of the backend data for an application. You can use this feature to test your models and to provide both technical and non-technical team members with the ability to create and update an application's data in real-time instead of building admin views."
  },
  {
    "objectID": "Content management-2",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Data modeling topic guides you through several examples for creating data models and setting the relationships between them. The following content management procedures, reference the Book and Author tables that were created in the data modeling example in order to demonstrate how to perform operations on your data."
  },
  {
    "objectID": "Content management-3",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create data",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Content management-4",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create data",
    "depth": 2,
    "text": "On the Manage menu, choose Content."
  },
  {
    "objectID": "Content management-5",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create data",
    "depth": 2,
    "text": "On the Content page, select the table to update from the Select table menu. For this example, select the Author table."
  },
  {
    "objectID": "Content management-6",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create data",
    "depth": 2,
    "text": "Choose Create author."
  },
  {
    "objectID": "Content management-7",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create data",
    "depth": 2,
    "text": "In the Add Author window, specify your custom values for the fields in the table. For this example, enter Martha for the firstName field and enter Riviera for the lastName field."
  },
  {
    "objectID": "Content management-8",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create data",
    "depth": 2,
    "text": "Choose Save author."
  },
  {
    "objectID": "Content management-9",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To seed data",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Content management-10",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To seed data",
    "depth": 2,
    "text": "On the Manage menu, choose Content."
  },
  {
    "objectID": "Content management-11",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To seed data",
    "depth": 2,
    "text": "On the Content page, select the table to update from the Select table menu. For this example, select the Author table."
  },
  {
    "objectID": "Content management-12",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To seed data",
    "depth": 2,
    "text": "On the Actions menu, choose Auto-generate data."
  },
  {
    "objectID": "Content management-13",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To seed data",
    "depth": 2,
    "text": "In the Auto-generate data window, specify how many rows of data you want to generate and constraints for the generated data."
  },
  {
    "objectID": "Content management-14",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To seed data",
    "depth": 2,
    "text": "Choose Generate data."
  },
  {
    "objectID": "Content management-15",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To seed data",
    "depth": 2,
    "text": "Seed data is auto-generated using Faker."
  },
  {
    "objectID": "Content management-16",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To edit data",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Content management-17",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To edit data",
    "depth": 2,
    "text": "On the Manage menu, choose Content."
  },
  {
    "objectID": "Content management-18",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To edit data",
    "depth": 2,
    "text": "On the Content page, select the table to update from the Select table menu. For this example, select the Author table that we used in the previous procedure."
  },
  {
    "objectID": "Content management-19",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To edit data",
    "depth": 2,
    "text": "From the list of records, select the record to update. For this example, select Martha Riviera. Let's assume that the last name of the author is misspelled and needs to be corrected."
  },
  {
    "objectID": "Content management-20",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To edit data",
    "depth": 2,
    "text": "On the Actions menu, choose Edit."
  },
  {
    "objectID": "Content management-21",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To edit data",
    "depth": 2,
    "text": "In the Edit Author window, change the spelling of the author's last name. Enter Rivera in the lastName field, then choose Save author."
  },
  {
    "objectID": "Content management-22",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create and link data",
    "depth": 2,
    "text": "When you create a new instance in a table, you can also link it to an instance in another table based on the relationships between the data models."
  },
  {
    "objectID": "Content management-23",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create and link data",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Content management-24",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create and link data",
    "depth": 2,
    "text": "On the Manage menu, choose Content."
  },
  {
    "objectID": "Content management-25",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create and link data",
    "depth": 2,
    "text": "On the Content page, select the table to update from the Select table menu. For this example, select the Book table, to add a new instance of a book."
  },
  {
    "objectID": "Content management-26",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create and link data",
    "depth": 2,
    "text": "Choose Create book. For title, enter All About Dogs."
  },
  {
    "objectID": "Content management-27",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create and link data",
    "depth": 2,
    "text": "Let's link this book to the Martha Rivera author instance that we edited in the previous procedure. Choose Link to an existing Author, then choose Martha Rivera from the list of Author instances. Note that you have the option to link to an an author because a relationship was defined between the Book and Author tables during the data modeling process."
  },
  {
    "objectID": "Content management-28",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To create and link data",
    "depth": 2,
    "text": "View the details for the All About Dogs instance in the Book table, and Martha Rivera is listed as an author."
  },
  {
    "objectID": "Content management-29",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To delete data",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Content management-30",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To delete data",
    "depth": 2,
    "text": "On the Manage menu, choose Content."
  },
  {
    "objectID": "Content management-31",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To delete data",
    "depth": 2,
    "text": "On the Content page, select the table to update from the Select table menu. For this example, select the Author table that we used in the previous procedure."
  },
  {
    "objectID": "Content management-32",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To delete data",
    "depth": 2,
    "text": "From the list of records in the table, select the record to delete. For this example, select Martha Rivera. On the Actions menu, then choose Delete."
  },
  {
    "objectID": "Content management-33",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To delete data",
    "depth": 2,
    "text": "In the Delete item confirmation window, choose Delete."
  },
  {
    "objectID": "Content management-34",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To download data",
    "depth": 2,
    "text": "Open Studio for an app."
  },
  {
    "objectID": "Content management-35",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To download data",
    "depth": 2,
    "text": "On the Manage menu, choose Content."
  },
  {
    "objectID": "Content management-36",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To download data",
    "depth": 2,
    "text": "On the Actions menu you have two options for downloading data."
  },
  {
    "objectID": "Content management-37",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To download data",
    "depth": 2,
    "text": "Choose Download selected items to CSV to download only the selected rows of data."
  },
  {
    "objectID": "Content management-38",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To download data",
    "depth": 2,
    "text": "Choose Download results to CSV to download all rows of data on the currently selected page."
  },
  {
    "objectID": "Content management-39",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "To download data",
    "depth": 2,
    "text": "Once you have selected a download option, your data should immediately start downloading as a CSV."
  },
  {
    "objectID": "Content management-40",
    "title": "Content management",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/content-management",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Create or edit data in markdown",
    "depth": 2,
    "text": "You can also edit and store the data as markdown with the markdown editor. This is especially useful for blogs, news, marketing, or content-focused apps where you want the app UI to be styled appropriately. The markdown editor is available by choosing Edit in markdown when you are in the Edit window for a data instance."
  },
  {
    "objectID": "Relationships-0",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Clone the example data model to follow along"
  },
  {
    "objectID": "Relationships-1",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a one to one relationship",
    "depth": 2,
    "text": "In this scenario, the bookstore maintains a list of ISBN numbers to track the books it sells. Each book has only one ISBN number and each ISBN number is assigned to only one book. This is an example of a one to one (1:1) data relationship between ISBN numbers and books. Use the following instructions to model the Book and ISBN data types and their relationship in Studio."
  },
  {
    "objectID": "Relationships-2",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a one to one relationship",
    "depth": 2,
    "text": "In the cloned schema, define the one to one data relationship between ISBN and Book, as each book has a single ISBN number and each ISBN number is associated with a single book. On the ISBN type, choose Add a relationship."
  },
  {
    "objectID": "Relationships-3",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a one to one relationship",
    "depth": 2,
    "text": "In the Add relationship window, in the Select related model menu, choose Book. For the relationship type, choose One ISBN to one Book. For Relationship name, enter Book. Choose Save. The relationship should look like the following."
  },
  {
    "objectID": "Relationships-5",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a one to one relationship",
    "depth": 2,
    "text": "When you return to the Data modeling page, the ISBN model will be updated with the relationship information. Now repeat the same steps for the Book model - define a 1:1 relationship from Book to ISBN."
  },
  {
    "objectID": "Relationships-6",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a one to many relationship",
    "depth": 2,
    "text": "Now let's create a data model for publishers. Each book in the bookstore has only one publisher. However, each publisher can publish many books. This represents a one to many relationship (1:n) between publishers and books that we can model in our example."
  },
  {
    "objectID": "Relationships-7",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a one to many relationship",
    "depth": 2,
    "text": "In the cloned schema, select the Publisher model."
  },
  {
    "objectID": "Relationships-8",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a one to many relationship",
    "depth": 2,
    "text": "For the Publisher model, choose Add a relationship."
  },
  {
    "objectID": "Relationships-9",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a one to many relationship",
    "depth": 2,
    "text": "In the Add relationship window, in the Select related model menu, choose Book. For the relationship type, choose One Publisher to many Book. For Relationship name, enter books. Choose Save. The relationship should look like the following."
  },
  {
    "objectID": "Relationships-11",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a many to many relationship",
    "depth": 2,
    "text": "Let's add a final data model for authors to our example. A book can have a single author or multiple authors. Therefore, a book in the bookstore can be written by many authors and each author can write many books. This is a many to many (m:n)data relationship between books and authors that we can model in our example."
  },
  {
    "objectID": "Relationships-12",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a many to many relationship",
    "depth": 2,
    "text": "In the cloned schema, select the Author model."
  },
  {
    "objectID": "Relationships-13",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a many to many relationship",
    "depth": 2,
    "text": "For the Author model, choose Add a relationship."
  },
  {
    "objectID": "Relationships-14",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a many to many relationship",
    "depth": 2,
    "text": "In the Add relationship window, choose Book from the Select related model menu. For the relationship type, choose Many Author to many Book. For Relationship name, enter a meaningful name, such as Book. Choose Save. The relationship should look like the following."
  },
  {
    "objectID": "Relationships-16",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Model data for a many to many relationship",
    "depth": 2,
    "text": "Studio does not support custom naming. Changing the auto-generated name will break Studio."
  },
  {
    "objectID": "Relationships-17",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Test data model works as expected",
    "depth": 2,
    "text": "When you are finished modeling your data and defining the data relationships, you can save and deploy the models to an Amplify backend environment."
  },
  {
    "objectID": "Relationships-18",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Test data model works as expected",
    "depth": 2,
    "text": "Choose Deploy in the upper right corner of the Data modeling page."
  },
  {
    "objectID": "Relationships-19",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Test data model works as expected",
    "depth": 2,
    "text": "If you are working in the sandbox, on the Deploy to AWS page, either choose Create an AWS account or Login to deploy AWS Account and proceed with the deployment process."
  },
  {
    "objectID": "Relationships-20",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Test data model works as expected",
    "depth": 2,
    "text": "If you are working in Studio from your AWS account, the deployment status displays in the upper right corner of the page."
  },
  {
    "objectID": "Relationships-21",
    "title": "Relationships",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/relationships",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Test data model works as expected",
    "depth": 2,
    "text": "Navigate to the Content tab and create data in the tables. You should be able to create and link records from different models. For more information, see Manage content."
  },
  {
    "objectID": "Data modeling-0",
    "title": "Data modeling",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/data-model",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Data modeling example",
    "depth": 2,
    "text": "In this example we will build a data model for a bookstore to maintain information about books, authors, and publishers with relationships and authorization rules. The schema template below is a starting point for the bookstore backend."
  },
  {
    "objectID": "Data modeling-1",
    "title": "Data modeling",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/data-model",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Data modeling example",
    "depth": 2,
    "text": "Clone in Sandbox"
  },
  {
    "objectID": "Data modeling-2",
    "title": "Data modeling",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/data-model",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Data modeling example",
    "depth": 2,
    "text": "A bookstore data model template with four models called Book, ISBN,\nPublisher, and Author"
  },
  {
    "objectID": "Data modeling-3",
    "title": "Data modeling",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/data-model",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Data modeling example",
    "depth": 2,
    "text": "Skip ahead to relationships or read below on how data modeling works in Amplify Studio."
  },
  {
    "objectID": "Data modeling-4",
    "title": "Data modeling",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/data-model",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Data modeling in Amplify Studio",
    "depth": 2,
    "text": "The Studio data model designer provides a visual way to define your app's data model, relationships, and authorization rules. Studio generates a schema.graphql GraphQL Transform for the data model you create. To learn more about how the GraphQl transform works, see GraphQL Transform Overview."
  },
  {
    "objectID": "Data modeling-6",
    "title": "Data modeling",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/data-model",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Data modeling in Amplify Studio",
    "depth": 2,
    "text": "All data models built with Studio work with Amplify DataStore out-of-the-box. DataStore is an on-device storage engine that automatically synchronizes data between your mobile and web apps and your database in the AWS cloud to help you build real-time and offline apps faster."
  },
  {
    "objectID": "Data modeling-7",
    "title": "Data modeling",
    "description": "Get started with Amplify Studio",
    "slug": "/console/data/data-model",
    "category": "Amplify Studio",
    "subcategory": "Data",
    "type": "article",
    "heading": "Data modeling in Amplify Studio",
    "depth": 2,
    "text": "The experience for modeling data is the same in the sandbox and in Studio. With an AWS account, you will have real-time data synchronization capabilities and you will also be able to set authorization rules on your models. For more information, see Authorization. All data models are provisioned in your account as AWS AppSync GraphQL APIs and Amazon DynamoDB tables. As with every feature of Studio, it can be further extended with the CLI."
  },
  {
    "objectID": "Figma-to-Code best practices-0",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "We're constantly improving Amplify Studio to make Figma-to-React code conversion better but there are some constraints that need to be taken into account."
  },
  {
    "objectID": "Figma-to-Code best practices-1",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Make sure to mark frames as components in Figma",
    "depth": 2,
    "text": "Amplify Studio only converts Figma components. If you only have a Figma \"frame\", Studio will ignore it because frames tend to be used to layout a set of components."
  },
  {
    "objectID": "Figma-to-Code best practices-2",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Make sure to mark frames as components in Figma",
    "depth": 2,
    "text": "Learn more about how Figma components work and how to create them with the video below from the Figma team:"
  },
  {
    "objectID": "Figma-to-Code best practices-3",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Fonts aren't automatically integrated",
    "depth": 2,
    "text": "By default, Amplify Studio doesn't automatically export the font from the Figma file and download it as part of your src/ui-components/ folder. To workaround this, you can include the font like you'd usually do yourself in your React app."
  },
  {
    "objectID": "Figma-to-Code best practices-4",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Fonts aren't automatically integrated",
    "depth": 2,
    "text": "Review the Adding Fonts documentation from the Create React App on how to configure this."
  },
  {
    "objectID": "Figma-to-Code best practices-5",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Try to use Figma Auto layout whenever possible",
    "depth": 2,
    "text": "Figma \"Auto layout\" can make a component significantly more responsive than used fixed position of elements. Think of Figma's Auto layout as \"Flexboxes\" (display: flex) in CSS."
  },
  {
    "objectID": "Figma-to-Code best practices-6",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Try to use Figma Auto layout whenever possible",
    "depth": 2,
    "text": "Learn more about how Figma's Auto layout works with the video below from the Figma team:"
  },
  {
    "objectID": "Figma-to-Code best practices-7",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Represent UI element states in code (hover, active)",
    "depth": 2,
    "text": "Amplify Studio currently doesn't support Figma-to-React code conversion of UI state. For example, if you want to add a hover effect to a button, you need to override the component behavior in code instead of creating a hover variant in Figma."
  },
  {
    "objectID": "Figma-to-Code best practices-8",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Figma variants must have the same child elements",
    "depth": 2,
    "text": "The Figma variants are required to have the same component structure. If the variants don't have the same child elements, then Amplify Studio will not be able to import the component."
  },
  {
    "objectID": "Figma-to-Code best practices-9",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Figma variants must have the same child elements",
    "depth": 2,
    "text": "In the example below the \"base\" variant has the same child elements as the \"small variant\". You can still make changes to each individual element."
  },
  {
    "objectID": "Figma-to-Code best practices-11",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Use \"Hug contents\" and \"Fill container\" to ensure components resize correctly",
    "depth": 2,
    "text": "To ensure your components resize correctly when elements get assigned with real-world data, use Figma's \"Constraints\" feature. This is commonly the source of the issue if your text wraps unexpectedly or elements are cut-off unexpectedly. It allows you to specify whether an element should \"Hug its contents\" or \"Fill the container its in\" when resized."
  },
  {
    "objectID": "Figma-to-Code best practices-12",
    "title": "Figma-to-Code best practices",
    "description": "Constraints of Amplify Studio's Figma-to-React capabilities",
    "slug": "/console/uibuilder/bestpractices",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Use \"Hug contents\" and \"Fill container\" to ensure components resize correctly",
    "depth": 2,
    "text": "Learn more about how Figma's Constraints works with the video below from the Figma team:"
  },
  {
    "objectID": "Extend with code-0",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When you run amplify pull, Amplify automatically generates JSX and TS versions of your Figma components. You cannot directly edit the code for these components as they will get overwritten on the next pull, but we have exposed mechanisms to extend the code."
  },
  {
    "objectID": "Extend with code-1",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Extend generated code via component prop",
    "depth": 3,
    "text": "When using Figma created components, you can use any exposed component props. The example code below shows how you can add pagination to a collection. The isPaginated prop is a property of the <Collection/> component. Similarly, you can use any prop such as gap or isSearchable to extend the collection."
  },
  {
    "objectID": "Extend with code-2",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Extend generated components via overrides prop",
    "depth": 3,
    "text": "All generated code exposes an overrides prop on all components and children to give you full control over extending generated code. The following example shows how to override the color of the title of the FAQItem component, that is part of the default Figma file, to red."
  },
  {
    "objectID": "Extend with code-3",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Extend generated components via overrides prop",
    "depth": 3,
    "text": "In Studio, navigate to the FAQItem component"
  },
  {
    "objectID": "Extend with code-4",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Extend generated components via overrides prop",
    "depth": 3,
    "text": "Find the name of the text element, in this case Title"
  },
  {
    "objectID": "Extend with code-5",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Extend generated components via overrides prop",
    "depth": 3,
    "text": "Wherever you are rendering the FAQItem add an overrides prop."
  },
  {
    "objectID": "Extend with code-7",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Extend generated collections via overrideItems prop",
    "depth": 3,
    "text": "All generated Collection code exposes an overrideItems prop to give you full control to extend each collection item with context its data item. overrideItems expects a function that accepts an { item, index } parameter and returns the override props that should be applied to each collection item."
  },
  {
    "objectID": "Extend with code-8",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Extend generated collections via overrideItems prop",
    "depth": 3,
    "text": "The following example shows how to override each collection item to show a different color based on their index in the collection and alerts the user of which the clicked home."
  },
  {
    "objectID": "Extend with code-10",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Extend generated collections via overrideItems prop",
    "depth": 3,
    "text": "If you want to override a prop for a specific element within a collection item, pass an override object to overrideItems."
  },
  {
    "objectID": "Extend with code-11",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Nesting collections",
    "depth": 3,
    "text": "Component slots within collections allow you to render additional nested collections. For example, use nested collections to generate a collection of posts, each with its own collection of comments."
  },
  {
    "objectID": "Extend with code-12",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Nesting collections",
    "depth": 3,
    "text": "In this example, we have two collections: AmpligramCollection and CommentViewCollection.  These are bound to the Post and Comment data models, which have a one-to-many relationship."
  },
  {
    "objectID": "Extend with code-13",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Nesting collections",
    "depth": 3,
    "text": "By nesting the CommentViewCollection within the comment component slot in the AmpligramCollection, and using the overrideItems prop, we can render each Post with its related Comments."
  },
  {
    "objectID": "Extend with code-14",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Add business logic during or after action execution",
    "depth": 3,
    "text": "Use the Amplify Hub to listen to actions that are executed via UI event handlers and then add your custom business logic."
  },
  {
    "objectID": "Extend with code-15",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Add business logic during or after action execution",
    "depth": 3,
    "text": "In the example above, you can add your own custom business logic, when the customer clicks on a \"Sign out\" button. The Amplify Hub provides Studio-generated events on the ui channel. The format of action binding Hub events is actions:[category]:[action_name]:[status]:"
  },
  {
    "objectID": "Extend with code-16",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Add business logic during or after action execution",
    "depth": 3,
    "text": "| Action name  | Description  |\n|---|---|\n| actions:core:navigate:started | Navigate action started |\n| actions:core:navigate:finished | Navigate action finished (possibly with errors) |\n| actions:datastore:create:started | DataStore create action started |\n| actions:datastore:create:finished | DataStore create action finished |\n| actions:datastore:update:started | DataStore update action started |\n| actions:datastore:update:finished | DataStore update action finished (possibly with errors) |\n| actions:datastore:delete:started | DataStore delete action started |\n| actions:datastore:delete:finished | DataStore delete action finished (possibly with errors) |\n| actions:auth:signout:started  | SignOut action started |\n| actions:auth:signout:finished | SignOut action finished (possibly with errors) |"
  },
  {
    "objectID": "Extend with code-17",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Modify generated code",
    "depth": 2,
    "text": "You can't directly customize all generated component code, as changes will be overwritten on the next amplify pull. However, the following workaround is available if you want to take control of component modifications."
  },
  {
    "objectID": "Extend with code-18",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Modify generated code",
    "depth": 2,
    "text": "Duplicate the generated JSX and TS file inside ui-components (e.g. Ampligram)"
  },
  {
    "objectID": "Extend with code-19",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Modify generated code",
    "depth": 2,
    "text": "Change the name of the files to something else (e.g. Ampligram2) and update the function names to match as well."
  },
  {
    "objectID": "Extend with code-20",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Modify generated code",
    "depth": 2,
    "text": "Update index.js to include the new export (e.g. export { default as Ampligram2 } from \"./Ampligram2\";)"
  },
  {
    "objectID": "Extend with code-21",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Modify generated code",
    "depth": 2,
    "text": "Import the duplicated component wherever you want."
  },
  {
    "objectID": "Extend with code-22",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Modify generated code",
    "depth": 2,
    "text": "The next amplify pull will not overwrite this new file."
  },
  {
    "objectID": "Extend with code-23",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Example use cases",
    "depth": 2,
    "text": "The following code snippets show how you can handle specific scenarios in your app."
  },
  {
    "objectID": "Extend with code-24",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Make a component responsive",
    "depth": 3,
    "text": "Figma components that use Auto layout are automatically mapped to responsive React components. However, some components may require further customizations."
  },
  {
    "objectID": "Extend with code-25",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Make a component responsive",
    "depth": 3,
    "text": "Use breakpoints to define behavior:"
  },
  {
    "objectID": "Extend with code-26",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Make a component responsive",
    "depth": 3,
    "text": "or"
  },
  {
    "objectID": "Extend with code-27",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Set hover states on icons",
    "depth": 3,
    "text": "The following example shows how to override an icon with a CSS class name."
  },
  {
    "objectID": "Extend with code-29",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Save form data",
    "depth": 3,
    "text": "Amplify Studio provides data action bindings but if you can also self-manage the form submission states and workflows in code."
  },
  {
    "objectID": "Extend with code-30",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Save form data",
    "depth": 3,
    "text": "Get the override keys based on the element name in Studio and then set onChange handlers. For example TextFieldzoh is the name of the \"name input field\" component."
  },
  {
    "objectID": "Extend with code-32",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Navigation from parent to detail views",
    "depth": 3,
    "text": "Amplify Studio provides navigation action bindings but if you want to integrate with your own routing system, you can also self-manage the navigation actions."
  },
  {
    "objectID": "Extend with code-33",
    "title": "Extend with code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/override",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Navigation from parent to detail views",
    "depth": 3,
    "text": "For example, you want to click on an item in a collection to get to detail views. Use the overrideItems prop to modify each element's property within a collection. The return value of overrideItems will be applied as an override onto the collection item's component."
  },
  {
    "objectID": "Responsive components-0",
    "title": "Responsive components",
    "description": "Learn how to configure Figma-to-Code components in order for them to scale according to breakpoints",
    "slug": "/console/uibuilder/responsive",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can use Amplify Studio to dynamically toggle between different component variants based on your app's breakpoint. For example, you can have the navigation bar shrink to a smaller size as the window gets smaller."
  },
  {
    "objectID": "Responsive components-2",
    "title": "Responsive components",
    "description": "Learn how to configure Figma-to-Code components in order for them to scale according to breakpoints",
    "slug": "/console/uibuilder/responsive",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Setup Figma components with responsive variants",
    "depth": 2,
    "text": "By default, all Amplify UI provides the following breakpoints as part of the Amplify UI theme:"
  },
  {
    "objectID": "Responsive components-3",
    "title": "Responsive components",
    "description": "Learn how to configure Figma-to-Code components in order for them to scale according to breakpoints",
    "slug": "/console/uibuilder/responsive",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Setup Figma components with responsive variants",
    "depth": 2,
    "text": "Configure your Figma components with variants with names that match the breakpoint values. In the example below, our TopBar component has the following variants:"
  },
  {
    "objectID": "Responsive components-4",
    "title": "Responsive components",
    "description": "Learn how to configure Figma-to-Code components in order for them to scale according to breakpoints",
    "slug": "/console/uibuilder/responsive",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Setup Figma components with responsive variants",
    "depth": 2,
    "text": "variation: default"
  },
  {
    "objectID": "Responsive components-5",
    "title": "Responsive components",
    "description": "Learn how to configure Figma-to-Code components in order for them to scale according to breakpoints",
    "slug": "/console/uibuilder/responsive",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Setup Figma components with responsive variants",
    "depth": 2,
    "text": "variation: small"
  },
  {
    "objectID": "Responsive components-6",
    "title": "Responsive components",
    "description": "Learn how to configure Figma-to-Code components in order for them to scale according to breakpoints",
    "slug": "/console/uibuilder/responsive",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Setup Figma components with responsive variants",
    "depth": 2,
    "text": "The small variation should be shown when the screen size falls below the \"small\" breakpoint."
  },
  {
    "objectID": "Responsive components-7",
    "title": "Responsive components",
    "description": "Learn how to configure Figma-to-Code components in order for them to scale according to breakpoints",
    "slug": "/console/uibuilder/responsive",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Setup Figma components with responsive variants",
    "depth": 2,
    "text": "IMPORTANT: The variants are required to have the same component structure. If the variants don't have the same child elements, then Amplify Studio will not be able to import the component."
  },
  {
    "objectID": "Responsive components-9",
    "title": "Responsive components",
    "description": "Learn how to configure Figma-to-Code components in order for them to scale according to breakpoints",
    "slug": "/console/uibuilder/responsive",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "2. Render component variants in code based on breakpoints",
    "depth": 2,
    "text": "In your React code, use the useBreakpoint hook to dynamically toggle between the different variants of the component. In the example below, it should show the \"default\" variant when the breakpoint is medium and above and the \"small\" variant when it's \"small\" when the breakpoints of small and below are triggered:"
  },
  {
    "objectID": "Theming-0",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Use Amplify Theme Editor to customize the UI primitives in your Figma file to match your brand's look and feel. Amplify Studio allows you to visually configure the Amplify UI theme definition."
  },
  {
    "objectID": "Theming-1",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The plugin saves your theme directly in the Figma file itself so when you sync your Studio app with Figma it will automatically bring in the updated theme as well."
  },
  {
    "objectID": "Theming-2",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Install Amplify Theme Editor (Figma plugin)",
    "depth": 2,
    "text": "To install the Amplify Theme Editor:"
  },
  {
    "objectID": "Theming-3",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Install Amplify Theme Editor (Figma plugin)",
    "depth": 2,
    "text": "Go to the Amplify Theme Editor Figma plugin page"
  },
  {
    "objectID": "Theming-4",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Install Amplify Theme Editor (Figma plugin)",
    "depth": 2,
    "text": "Click \"Install\" on the top-right corner"
  },
  {
    "objectID": "Theming-5",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Install Amplify Theme Editor (Figma plugin)",
    "depth": 2,
    "text": "Go to your Figma file"
  },
  {
    "objectID": "Theming-6",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Install Amplify Theme Editor (Figma plugin)",
    "depth": 2,
    "text": "Right-click an empty area of the canvas and select Plugins > Amplify Theme Editor or use the Figma quick actions menu by pressing command/control + / then typing \"AWS Amplify\""
  },
  {
    "objectID": "Theming-7",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Modify brand colors",
    "depth": 3,
    "text": "Select your own brand color or choose a preset. Your brand color affects almost every single UI primitive and allows you to quickly modify your components look and feel to match your brand."
  },
  {
    "objectID": "Theming-9",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Modify brand colors",
    "depth": 3,
    "text": "Amplify Theme Editor will automatically cascade color levels 10 - 100. You can modify the auto-generated levels further by selecting the level and tweaking the HEX or HSL values to your exact specification."
  },
  {
    "objectID": "Theming-10",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "2. Use brand colors in Figma",
    "depth": 3,
    "text": "Every color listed in the Amplify Theme Editor is also available as a Figma color style."
  },
  {
    "objectID": "Theming-12",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "2. Use brand colors in Figma",
    "depth": 3,
    "text": "You can choose any layer and assign the fill to your brand colors. Updating the brand colors in the plugin will update the color styles."
  },
  {
    "objectID": "Theming-14",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "2. Use brand colors in Figma",
    "depth": 3,
    "text": "The Figma plugin creates color styles that match the colors in the theme. But any changes to color styles directly won't have an effect on the theme."
  },
  {
    "objectID": "Theming-15",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Modify UI primitive colors",
    "depth": 3,
    "text": "Individual primitives such as Alerts have their own bindings for color to fine-tune their look and feel as well. This is especially useful as you start defining colors for states such as \"success\", \"warning\", \"error\", or \"info\"."
  },
  {
    "objectID": "Theming-16",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Modify UI primitive colors",
    "depth": 3,
    "text": "To change colors of UI primitives:"
  },
  {
    "objectID": "Theming-17",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Modify UI primitive colors",
    "depth": 3,
    "text": "Open the Amplify Theme Editor"
  },
  {
    "objectID": "Theming-18",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Modify UI primitive colors",
    "depth": 3,
    "text": "Click on the \"Component\" tab"
  },
  {
    "objectID": "Theming-19",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Modify UI primitive colors",
    "depth": 3,
    "text": "Select the value you want to edit. For example: components.badge.error.backgroundColor. You can also filter the list of component tokens with the search bar at the top"
  },
  {
    "objectID": "Theming-20",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Modify UI primitive colors",
    "depth": 3,
    "text": "Choose a new color"
  },
  {
    "objectID": "Theming-21",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Modify UI primitive colors",
    "depth": 3,
    "text": "Click \"Update theme\""
  },
  {
    "objectID": "Theming-23",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Modify UI primitive colors",
    "depth": 3,
    "text": "Colors in the theme can either be references to other colors or exact Hex, HSL, or RGB values."
  },
  {
    "objectID": "Theming-25",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Space",
    "depth": 2,
    "text": "Each Amplify UI theme contains definitions for spacing such as \"small\", \"large\", or \"xl\". You can define the spacing scale within the \"Space\" tab in the Amplify Theme Editor."
  },
  {
    "objectID": "Theming-27",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Space",
    "depth": 2,
    "text": "To apply spacing tokens to your own components:"
  },
  {
    "objectID": "Theming-28",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Space",
    "depth": 2,
    "text": "Open the Amplify Theme Editor"
  },
  {
    "objectID": "Theming-29",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Space",
    "depth": 2,
    "text": "Click on the \"Apply\" tab"
  },
  {
    "objectID": "Theming-30",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Space",
    "depth": 2,
    "text": "Select a frame"
  },
  {
    "objectID": "Theming-31",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Space",
    "depth": 2,
    "text": "Configure it as a reference by entering {space.<SPACING_TOKEN>}. For example: {space.small}"
  },
  {
    "objectID": "Theming-32",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Space",
    "depth": 2,
    "text": "Click \"Update theme\""
  },
  {
    "objectID": "Theming-34",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Font sizes",
    "depth": 2,
    "text": "To update the font sizes in the theme:"
  },
  {
    "objectID": "Theming-35",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Font sizes",
    "depth": 2,
    "text": "Open the Amplify Theme Editor"
  },
  {
    "objectID": "Theming-36",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Font sizes",
    "depth": 2,
    "text": "Click on the \"Font sizes\" tab"
  },
  {
    "objectID": "Theming-37",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Font sizes",
    "depth": 2,
    "text": "Click on any of the font sizes to edit it"
  },
  {
    "objectID": "Theming-39",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Font sizes",
    "depth": 2,
    "text": "You can input 'rem' values or 'px' values. Updating font sizes will update the primitives, text styles, as well as any Figma layers that use that font size."
  },
  {
    "objectID": "Theming-40",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Borders",
    "depth": 2,
    "text": "You can edit border widths and radii in addition to colors as well."
  },
  {
    "objectID": "Theming-41",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Borders",
    "depth": 2,
    "text": "To update the font sizes in the theme:"
  },
  {
    "objectID": "Theming-42",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Borders",
    "depth": 2,
    "text": "Open the Amplify Theme Editor"
  },
  {
    "objectID": "Theming-43",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Borders",
    "depth": 2,
    "text": "Click on the \"Borders\" tab"
  },
  {
    "objectID": "Theming-44",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Borders",
    "depth": 2,
    "text": "Click on any of the border widths or radii to edit it"
  },
  {
    "objectID": "Theming-45",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Borders",
    "depth": 2,
    "text": "You can apply these border values to your own components by selecting the 'Apply' tab and selecting a frame component. Subsequent changes to the core border widths and radii will update any usage in your Figma document."
  },
  {
    "objectID": "Theming-47",
    "title": "Theming",
    "description": "Configure your Amplify-generated UI components to match your brand using the Amplify Theme Editor Figma plugin",
    "slug": "/console/uibuilder/theming",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Borders",
    "depth": 2,
    "text": "If you have any issues, please let us know by filing an issue on Github."
  },
  {
    "objectID": "Component slots-0",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Component slots allow you to nest other components as React code within your Studio-generated UI components. You can use component slots to create dynamically generated child components, like Comments on a Post, or to replace a child element altogether."
  },
  {
    "objectID": "Component slots-1",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "First, you'll need a component."
  },
  {
    "objectID": "Component slots-2",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "Log into Amplify and navigate to Studio."
  },
  {
    "objectID": "Component slots-3",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "On the left-hand navigation bar, click UI Library"
  },
  {
    "objectID": "Component slots-4",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "Select a Figma component from your UI Library that you've imported into Studio.\nIf you don't have any Figma components already, you can start with Amplify's Figma UI file."
  },
  {
    "objectID": "Component slots-5",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "Configure that component by clicking the Configure button in the upper right-hand corner."
  },
  {
    "objectID": "Component slots-7",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "Next, you'll add a component slot to this component."
  },
  {
    "objectID": "Component slots-8",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "On the left-hand side, you'll see the elements of your component. Select a Figma Frame () within your component."
  },
  {
    "objectID": "Component slots-9",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "In this example, the \"Area\" frame is selected."
  },
  {
    "objectID": "Component slots-10",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "On the right-hand panel, click the \"Convert to a slot\" button. This will add a new prop to your UI component. Any JSX element you pass into that prop will be rendered in the generated component slot."
  },
  {
    "objectID": "Component slots-11",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "Optionally, change your your property name."
  },
  {
    "objectID": "Component slots-12",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "In this example, the property has been renamed \"comments\""
  },
  {
    "objectID": "Component slots-14",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "Want to undo your component slot creation?"
  },
  {
    "objectID": "Component slots-15",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding a component slot",
    "depth": 2,
    "text": "Locate your component slot in the Component properties (top-right corner), click the triple-dot menu, and click Erase property to remove the component slot."
  },
  {
    "objectID": "Component slots-16",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Importing your component",
    "depth": 3,
    "text": "Once you've added a component slot to your component, click the Get component code button at the bottom of the screen to see instructions on the next steps."
  },
  {
    "objectID": "Component slots-17",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Importing your component",
    "depth": 3,
    "text": "Copy the amplify pull command, and run it in your Terminal"
  },
  {
    "objectID": "Component slots-18",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Importing your component",
    "depth": 3,
    "text": "Copy the import code and paste it in your React app code"
  },
  {
    "objectID": "Component slots-19",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Importing your component",
    "depth": 3,
    "text": "Lastly, render the component"
  },
  {
    "objectID": "Component slots-20",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Importing your component",
    "depth": 3,
    "text": "Here's how the code above would render in your app. Some minor styling has been added to help with visibility."
  },
  {
    "objectID": "Component slots-22",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Using your component slot to replace individual child components",
    "depth": 3,
    "text": "To use the component slot, pass a child component as a property of the parent component, using the prop name you picked earlier. Then, the content you pass will be rendered as a child of the component."
  },
  {
    "objectID": "Component slots-23",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Using your component slot to replace individual child components",
    "depth": 3,
    "text": "Here's how the code above would render in your app. Some styling has been added to the comments to help with display."
  },
  {
    "objectID": "Component slots-25",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding component slots to collections",
    "depth": 3,
    "text": "Any component can be converted to a collection and bound to data, and that includes components with component slots.  With a collection, you can extend your component via code using the overrideItems prop to generate unique content within each component slot."
  },
  {
    "objectID": "Component slots-26",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding component slots to collections",
    "depth": 3,
    "text": "Here, the Ampligram collection is mapped to a data model called Post. The Post model has a field called Comment, which contains an array of all the Comments associated with this Post. Each of these items in the Comment array is then mapped to the \"comments\" component slot we created."
  },
  {
    "objectID": "Component slots-27",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding component slots to collections",
    "depth": 3,
    "text": "Dynamically rendering child components is where component slots get very useful - you can even pass another collection into this component slot."
  },
  {
    "objectID": "Component slots-28",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding component slots to collections",
    "depth": 3,
    "text": "The code below will render an Ampligram for each Post in the AmpligramCollection. Then, the Comments for each Post will render in the \"comments\" component slot."
  },
  {
    "objectID": "Component slots-29",
    "title": "Component slots",
    "description": "Add component slots to Amplify-generated Figma-to-code components.  Use this to support nested components or collections in React code.",
    "slug": "/console/uibuilder/slots",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Adding component slots to collections",
    "depth": 3,
    "text": "In this example, the first Post has 2 comments, but the second post has none."
  },
  {
    "objectID": "Collections-0",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Collections are any list of repeating items. You can visually create a collection from any individual component by selecting the Create collection button in the top right corner of the UI component editor. All collections are generated as code with real-time subscriptions automatically set up."
  },
  {
    "objectID": "Collections-1",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Data binding",
    "depth": 2,
    "text": "Amplify Studio offers a visual way to bind collections to items in your data model. Collection items can be filtered, sorted, or linked to specific records from the content management view."
  },
  {
    "objectID": "Collections-2",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Data binding",
    "depth": 2,
    "text": "Create a collection from a component"
  },
  {
    "objectID": "Collections-3",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Data binding",
    "depth": 2,
    "text": "Link collection to a data model"
  },
  {
    "objectID": "Collections-4",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Data binding",
    "depth": 2,
    "text": "Define a data set with either a dynamic query or specific records."
  },
  {
    "objectID": "Collections-5",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Data binding",
    "depth": 2,
    "text": "Components that already have data model bindings, automatically map data to child elements. For components that do not have data model bindings,"
  },
  {
    "objectID": "Collections-7",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Dynamic query",
    "depth": 3,
    "text": "A dynamic query allows you to sort and filter data from the content view to show relevant data."
  },
  {
    "objectID": "Collections-9",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Specific records",
    "depth": 3,
    "text": "Link the collection to specific items in your database."
  },
  {
    "objectID": "Collections-11",
    "title": "Collections",
    "description": "Collections",
    "slug": "/console/uibuilder/collections",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Edit layout",
    "depth": 2,
    "text": "You can edit some of the Amplify UI collection properties directly in Studio. Changes to the layout properties (e.g. List vs. grid, direction, order, padding) are reflected in the real-time preview."
  },
  {
    "objectID": "UI event handler-0",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio offers the ability to bind UI component events (onClick, onChange, and more) to actions to build interactive components. Use the UI component editor to map UI components' events to actions for navigation, data manipulation, authentication, and more. All data bindings get automatically included in generated code."
  },
  {
    "objectID": "UI event handler-1",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Select an UI element such as a button"
  },
  {
    "objectID": "UI event handler-2",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Click Set onClick action on Child properties panel"
  },
  {
    "objectID": "UI event handler-3",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Select an action to bind it to the UI element"
  },
  {
    "objectID": "UI event handler-4",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to navigation actions",
    "depth": 2,
    "text": "You can bind UI elements to navigation actions. Navigation actions include the ability to go to a URL, open a URL in a new tab, scroll to an anchor, and refresh the page."
  },
  {
    "objectID": "UI event handler-5",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Go to URL",
    "depth": 3,
    "text": "The \"Go to URL\" action navigates the customer to the designated URL. You can also construct the URL with dynamic data provided by the component's top-level properties."
  },
  {
    "objectID": "UI event handler-6",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Go to URL",
    "depth": 3,
    "text": "Select the Go to URL"
  },
  {
    "objectID": "UI event handler-7",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Go to URL",
    "depth": 3,
    "text": "Enter the target URL. For example: https://support.example.com"
  },
  {
    "objectID": "UI event handler-8",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Go to URL",
    "depth": 3,
    "text": "|Studio interface to \"Go to URL\"|Live app navigating to the URL|\n|-|-|\n| | |"
  },
  {
    "objectID": "UI event handler-9",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Go to URL",
    "depth": 3,
    "text": "Dynamically navigate to a specific item's URL in a collection by concatenating the item's id. In the example below, the URL is concatenated with home's id field."
  },
  {
    "objectID": "UI event handler-11",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Open URL in new tab",
    "depth": 3,
    "text": "Select \"Open URL in new tab\" to open the target URL in a new tab. Similar to Go to URL, you can also construct the URL with dynamic data provided by the component's top-level properties."
  },
  {
    "objectID": "UI event handler-12",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Scroll to anchor",
    "depth": 3,
    "text": "You can bind an onClick action to scroll to a designated anchor (based on HTML's id attribute) on the page. For example, have a table of contents section that then navigates to a specific element in a UI."
  },
  {
    "objectID": "UI event handler-13",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Scroll to anchor",
    "depth": 3,
    "text": "Select the Scroll to anchor"
  },
  {
    "objectID": "UI event handler-14",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Scroll to anchor",
    "depth": 3,
    "text": "Enter lorem-ipsum as the value"
  },
  {
    "objectID": "UI event handler-15",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Scroll to anchor",
    "depth": 3,
    "text": "In your app code add an HTML element with id=\"lorem-ipsum\""
  },
  {
    "objectID": "UI event handler-17",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Refresh page",
    "depth": 3,
    "text": "Select \"Refresh\" to execute a browser refresh of the current page."
  },
  {
    "objectID": "UI event handler-18",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to create, update, or delete a data record",
    "depth": 2,
    "text": "You can bind UI elements to data actions. Data actions include the ability to create, update, and delete records from your database."
  },
  {
    "objectID": "UI event handler-19",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to create, update, or delete a data record",
    "depth": 2,
    "text": "Make sure to mark the component as a form for accessibility."
  },
  {
    "objectID": "UI event handler-20",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to create, update, or delete a data record",
    "depth": 2,
    "text": "Select the top element from the element tree"
  },
  {
    "objectID": "UI event handler-21",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to create, update, or delete a data record",
    "depth": 2,
    "text": "Add a new child property named as"
  },
  {
    "objectID": "UI event handler-22",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to create, update, or delete a data record",
    "depth": 2,
    "text": "Set the value to form"
  },
  {
    "objectID": "UI event handler-23",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to create, update, or delete a data record",
    "depth": 2,
    "text": "This will render the component within an HTML <form /> element."
  },
  {
    "objectID": "UI event handler-24",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Create a record in database",
    "depth": 3,
    "text": "You can create a new record based on the values provided by input fields. For example, you have a form to create a new \"Home\" for a rental listing site. The form contains inputs for the address, price, and an image URL."
  },
  {
    "objectID": "UI event handler-25",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Create a record in database",
    "depth": 3,
    "text": "Select the \"Submit\" button element"
  },
  {
    "objectID": "UI event handler-26",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Create a record in database",
    "depth": 3,
    "text": "Add an onClick action to the element"
  },
  {
    "objectID": "UI event handler-27",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Create a record in database",
    "depth": 3,
    "text": "Choose the \"Create\" data action"
  },
  {
    "objectID": "UI event handler-28",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Create a record in database",
    "depth": 3,
    "text": "Select the database model to create a record for"
  },
  {
    "objectID": "UI event handler-29",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Create a record in database",
    "depth": 3,
    "text": "Map the model fields to input values"
  },
  {
    "objectID": "UI event handler-31",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Create a record in database",
    "depth": 3,
    "text": "Render the component with the \"Create\" data action. Pro tip: Amplify Studio's collection components synchronizes data in real-time. If a new record is available in the database, it will automatically sync to the app."
  },
  {
    "objectID": "UI event handler-33",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "You can update an existing record using the \"Update\" data action. For example, users can click on a home in a collection and update its values with a form."
  },
  {
    "objectID": "UI event handler-34",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "Select the \"Submit\" button element"
  },
  {
    "objectID": "UI event handler-35",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "Add an onClick action to the element"
  },
  {
    "objectID": "UI event handler-36",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "Choose the \"Update\" data action"
  },
  {
    "objectID": "UI event handler-37",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "Select the database model to create a record for"
  },
  {
    "objectID": "UI event handler-38",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "Enter the ID of the record to update"
  },
  {
    "objectID": "UI event handler-39",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "Map the model fields to input values"
  },
  {
    "objectID": "UI event handler-41",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "Use the overrideItems property in collections to configure an onClick handler to select a home to update. Optionally, configure the form's placeholder values to be the current home value."
  },
  {
    "objectID": "UI event handler-42",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Update a record from database",
    "depth": 3,
    "text": "Pro tip: Amplify Studio's collection components synchronizes data in real-time. If a record is updated in the database, it will automatically sync to the app."
  },
  {
    "objectID": "UI event handler-44",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Delete a record from database",
    "depth": 3,
    "text": "You can delete a new record based on a model's ID field. For example, if you have a modal to delete a \"Home\" from a rental listing site."
  },
  {
    "objectID": "UI event handler-45",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Delete a record from database",
    "depth": 3,
    "text": "Select the \"Delete\" button element"
  },
  {
    "objectID": "UI event handler-46",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Delete a record from database",
    "depth": 3,
    "text": "Add an onClick action to the element"
  },
  {
    "objectID": "UI event handler-47",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Delete a record from database",
    "depth": 3,
    "text": "Choose the \"Delete\" data action"
  },
  {
    "objectID": "UI event handler-48",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Delete a record from database",
    "depth": 3,
    "text": "Select the database model to delete from"
  },
  {
    "objectID": "UI event handler-49",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Delete a record from database",
    "depth": 3,
    "text": "Map the ID value to a property"
  },
  {
    "objectID": "UI event handler-51",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Delete a record from database",
    "depth": 3,
    "text": "In your app code, you can set an onClick handler for Home collections to show the delete modal. Then, set the DeleteHome component's home property to configure which home to delete. You can also listen in to the ui Hub events to dismiss the modal after the record is deleted."
  },
  {
    "objectID": "UI event handler-53",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI event to modify another UI element",
    "depth": 2,
    "text": "Use the element modification action binding to introduce more UI-level interactivity for your components. For example, you can configure hover effects, trigger color changes when a user clicks on an element, or toggle visibility on other elements based on user interactions. To add a hover effect to an element:"
  },
  {
    "objectID": "UI event handler-54",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI event to modify another UI element",
    "depth": 2,
    "text": "Set the \"onMouseEnter\" property"
  },
  {
    "objectID": "UI event handler-55",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI event to modify another UI element",
    "depth": 2,
    "text": "Select \"Modify element property\""
  },
  {
    "objectID": "UI event handler-56",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI event to modify another UI element",
    "depth": 2,
    "text": "Select the component you want to modify"
  },
  {
    "objectID": "UI event handler-57",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI event to modify another UI element",
    "depth": 2,
    "text": "Select the \"backgroundColor\" as an example"
  },
  {
    "objectID": "UI event handler-58",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI event to modify another UI element",
    "depth": 2,
    "text": "Update the desired background color value"
  },
  {
    "objectID": "UI event handler-59",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI event to modify another UI element",
    "depth": 2,
    "text": "Repeat with \"onMouseLeave\" property to reset the background value"
  },
  {
    "objectID": "UI event handler-61",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to \"sign out\" actions",
    "depth": 2,
    "text": "Use the \"Sign out\" actions to sign out the user from the app. Choose to either sign out from the current device or across all devices, also known as global sign out."
  },
  {
    "objectID": "UI event handler-62",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to \"sign out\" actions",
    "depth": 2,
    "text": "Select the \"Sign out\" button element"
  },
  {
    "objectID": "UI event handler-63",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to \"sign out\" actions",
    "depth": 2,
    "text": "Add an onClick action to the element"
  },
  {
    "objectID": "UI event handler-64",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to \"sign out\" actions",
    "depth": 2,
    "text": "Choose the \"Sign out from this device\" data action"
  },
  {
    "objectID": "UI event handler-66",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to \"sign out\" actions",
    "depth": 2,
    "text": "The sign out actions work in combination with the Authenticator component. When you sign out, the Authenticator will appear to request the user to sign-in again."
  },
  {
    "objectID": "UI event handler-68",
    "title": "UI event handler",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/eventhandling",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Handle UI changes after action execution",
    "depth": 2,
    "text": "In case you want to add additional business logic after an action is executed, review Add additional business logic before or after action execution. You can use this capability to dismiss a modal after a data record was created, send analytics event after action, or display loading indicators when a record is being created."
  },
  {
    "objectID": "Data binding-0",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio offers visual data binding capabilities to bind UI components to data to build dynamic components. Use the UI component editor to map fields to static values, or map fields to your backend data model. All data bindings get automatically included in generated code."
  },
  {
    "objectID": "Data binding-1",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "UI component editor",
    "depth": 2,
    "text": "The UI component editor allows you to bind elements in your component to actual data."
  },
  {
    "objectID": "Data binding-3",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1. Elements tree",
    "depth": 3,
    "text": "The elements tree shows the composition of the component in Figma. Each layer in Figma maps to a specific Amplify UI primitive. For example, a frame in Figma maps to a <Flex> component in the Amplify UI library. Clicking on a layer will highlight the element in the live preview."
  },
  {
    "objectID": "Data binding-4",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "2. Live component preview",
    "depth": 3,
    "text": "The live preview is a representation of the React component! If you inspect the component in the browser developer tools, you will see that each element in the component maps to real code. Click on any element within a component to select a specific child component. This will highlight the layer in the elements tree as well as bring up all relevant child properties for that component."
  },
  {
    "objectID": "Data binding-5",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "3. Component properties",
    "depth": 3,
    "text": "Just like in React, you can set props on your parent component. React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. To learn more about React props visit their documentation. Amplify Studio supports Scalar (String, Number, Boolean) and Data model component types."
  },
  {
    "objectID": "Data binding-6",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "4. Child properties",
    "depth": 3,
    "text": "Clicking on any child elements within the live preview allows you to set child prop values. You can either set static values or pass prop values from the parent component. Child props will map to props available on the UI primitives. For example, if you select a <Button> component, you will be able to set props such as variation, size and see the live preview update with the values."
  },
  {
    "objectID": "Data binding-7",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "5. Component controls",
    "depth": 3,
    "text": "You can perform the following actions on a component:"
  },
  {
    "objectID": "Data binding-8",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "5. Component controls",
    "depth": 3,
    "text": "Edit component in Figma: This will deep link you into the Figma file to edit the component."
  },
  {
    "objectID": "Data binding-9",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "5. Component controls",
    "depth": 3,
    "text": "Shuffle preview data: When you bind UI to static data or data from data models, use shuffle preview to see how your component renders with different data.\n"
  },
  {
    "objectID": "Data binding-10",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "5. Component controls",
    "depth": 3,
    "text": "Create collection: Create a collection out of a component. Learn more."
  },
  {
    "objectID": "Data binding-11",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "5. Component controls",
    "depth": 3,
    "text": "Get component code: Use this React component in your app."
  },
  {
    "objectID": "Data binding-12",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to data from data models",
    "depth": 2,
    "text": "You need to deploy a data model in order to bind to data. Clone the Home example."
  },
  {
    "objectID": "Data binding-13",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to data from data models",
    "depth": 2,
    "text": "With Amplify Studio you can bind elements in your UI component to actual backend data from your database by passing component properties with a Data model type down to the child elements."
  },
  {
    "objectID": "Data binding-14",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to data from data models",
    "depth": 2,
    "text": "Add Component property named foo. Reference your data model (e.g. Home) as the type."
  },
  {
    "objectID": "Data binding-15",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to data from data models",
    "depth": 2,
    "text": "Click on an image child element in your UI component."
  },
  {
    "objectID": "Data binding-16",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to data from data models",
    "depth": 2,
    "text": "Choose Set prop for child properties. From the Prop dropdown, choose src, and for value, link to home.image_url.\nThe live preview should update to an image from your database. Continue to repeat the same steps for different child elements such as text fields, inputs etc."
  },
  {
    "objectID": "Data binding-18",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Bind UI to static data",
    "depth": 2,
    "text": "You can bind text labels to static values. Use one of the following two methods to bind UI elements to static values."
  },
  {
    "objectID": "Data binding-19",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Pass component property default value to child props",
    "depth": 3,
    "text": "The following example demonstrates how to set the text label's value to the component's default value."
  },
  {
    "objectID": "Data binding-20",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Pass component property default value to child props",
    "depth": 3,
    "text": "Add a Component property named foo of type String with a default value of Hello world."
  },
  {
    "objectID": "Data binding-21",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Pass component property default value to child props",
    "depth": 3,
    "text": "Click on a text child element in your UI component."
  },
  {
    "objectID": "Data binding-22",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Pass component property default value to child props",
    "depth": 3,
    "text": "Choose Set prop for child properties. From the Prop dropdown, choose label and for value, link to foo.\nThe live preview should update to display \"Hello world\"."
  },
  {
    "objectID": "Data binding-24",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Directly set child props",
    "depth": 3,
    "text": "You can directly set child prop values with all available properties. In the following example, we are setting the label prop to \"Explore\" and the color prop to \"orange\"."
  },
  {
    "objectID": "Data binding-26",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Apply modifiers",
    "depth": 2,
    "text": "Modifiers let you apply custom logic to renders child prop values."
  },
  {
    "objectID": "Data binding-27",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Conditionals",
    "depth": 3,
    "text": "You can apply conditional logic on values of child props. The following example demonstrates how you can conditionally set the value of a child prop based on custom logic."
  },
  {
    "objectID": "Data binding-29",
    "title": "Data binding",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/databinding",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Concatenations",
    "depth": 3,
    "text": "You can apply concatenations on values of child props. The following example demonstrates how to add a $ sign before displaying a price."
  },
  {
    "objectID": "Figma to code-0",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio offers an integration with Figma, allowing you to generate clean React code by importing your Figma design file. Figma is a browser-based UI and UX design application that is used to build high-fidelity designs. In the standard product development lifecycle, UI or UX designers build mockups that get implemented as code by developers. Amplify Studio automatically converts any Figma component in your Figma file to a React component that is then usable in your app."
  },
  {
    "objectID": "Figma to code-1",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 1: Set up Figma file",
    "depth": 2,
    "text": "To get started, all you have to do is link your Studio project to a Figma file. While you can link any Figma file to Studio, for the best end to end experience, we recommend starting with our Figma file. To get started from scratch, duplicate our Figma UI file."
  },
  {
    "objectID": "Figma to code-3",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 1: Set up Figma file",
    "depth": 2,
    "text": "This file contains the following pages:"
  },
  {
    "objectID": "Figma to code-4",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 1: Set up Figma file",
    "depth": 2,
    "text": "README: The README page explains how to use the Figma file to create new components, theme primitives, and customize layout and styling."
  },
  {
    "objectID": "Figma to code-5",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 1: Set up Figma file",
    "depth": 2,
    "text": "Primitives: Primitives are building-block components such as alerts, buttons, and badges. These primitives correspond to the Amplify UI primitives and get exported to code with all the primitive properties."
  },
  {
    "objectID": "Figma to code-6",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 1: Set up Figma file",
    "depth": 2,
    "text": "My components: This page contains all of the custom components built using the primitives. Amplify provides dozens of components such as news feed, social media, and marketing hero components to get you started. Customize these to match your needs or build your own components."
  },
  {
    "objectID": "Figma to code-7",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 1: Set up Figma file",
    "depth": 2,
    "text": "Examples: This is for demonstration purposes only, to show designers how to use our components to build entire pages."
  },
  {
    "objectID": "Figma to code-8",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 1: Set up Figma file",
    "depth": 2,
    "text": "Please follow the README in our Figma file to learn how to create your components to optimize for code quality."
  },
  {
    "objectID": "Figma to code-9",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 2: Link Figma file in Studio",
    "depth": 2,
    "text": "In Amplify Studio, enter the URL for the Figma file you just created (or duplicated). You will be asked to authenticate with Figma."
  },
  {
    "objectID": "Figma to code-11",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 2: Link Figma file in Studio",
    "depth": 2,
    "text": "After authenticating with Figma, you will see a list of components that you can sync. Choose Accept all to import all components, or walkthrough them one-by-one to make sure they are visually acceptable. Once you complete the sync, you should see a list of components that have been imported. All previews of the components are live renders of the actual coded components. Open your dev tools inspector to check it out!"
  },
  {
    "objectID": "Figma to code-13",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 3: Pull UI components code in your project",
    "depth": 2,
    "text": "In Studio, pick a component and choose Configure to get to the component editor screen. Choose Get component code at the bottom of the page."
  },
  {
    "objectID": "Figma to code-15",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 3: Pull UI components code in your project",
    "depth": 2,
    "text": "Go to the Initial project setup tab and follow the setup instructions."
  },
  {
    "objectID": "Figma to code-17",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 3: Pull UI components code in your project",
    "depth": 2,
    "text": "Amplify generates all UI component code into src/ui-components, as JSX and TS files. All generated code is built with primitives from the Amplify UI library. Although you have access to inspect the component code, you cannot modify it directly as we will override any changes on the next amplify pull."
  },
  {
    "objectID": "Figma to code-18",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Step 3: Pull UI components code in your project",
    "depth": 2,
    "text": "Once that is done, you can use the components anywhere in your app. Learn how to customize these UI components in code."
  },
  {
    "objectID": "Figma to code-19",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Upgrading Figma files",
    "depth": 2,
    "text": "Duplicate the new Figma community file into your Figma account.\n"
  },
  {
    "objectID": "Figma to code-20",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Upgrading Figma files",
    "depth": 2,
    "text": "(optional) Delete all the components in the 'My Components' page of the new Figma file."
  },
  {
    "objectID": "Figma to code-21",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Upgrading Figma files",
    "depth": 2,
    "text": "Copy everything in the 'My Components' page of your old Figma file and paste it into the 'My Components' page of the new Figma file."
  },
  {
    "objectID": "Figma to code-22",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "Upgrading Figma files",
    "depth": 2,
    "text": "Go through each component on the 'My Components' page and update the broken component instances to point to the local components on the 'Primitives' page. Unfortunately, there is no easy way to bulk update component instances in Figma. This is important because if you do not do this, your design might look ok, but the React code it generates won't use the Amplify UI components.\n"
  },
  {
    "objectID": "Figma to code-23",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1.2.0: July 25 2022",
    "depth": 4,
    "text": "Update supported Amplify UI React version to 3.1.0."
  },
  {
    "objectID": "Figma to code-24",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1.2.0: July 25 2022",
    "depth": 4,
    "text": "Add TextAreaField primitive component. You can change any existing TextField into a TextAreaField by selecting the desired TextField instance and choosing \"TextAreaField\" under the Swap Instance dropdown.\n"
  },
  {
    "objectID": "Figma to code-25",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1.0.0: March 2 2022",
    "depth": 4,
    "text": "Fixing primitive component layer names to map properly to React props."
  },
  {
    "objectID": "Figma to code-26",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1.0.0: March 2 2022",
    "depth": 4,
    "text": "Removing the Icon primitive and adding a custom Icon component. This change allows for easier icon customization."
  },
  {
    "objectID": "Figma to code-27",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1.0.0: March 2 2022",
    "depth": 4,
    "text": "Fixing visual discrepancies between Figma file and React components."
  },
  {
    "objectID": "Figma to code-28",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1.0.0: March 2 2022",
    "depth": 4,
    "text": "Re-organizing primitive component variants to make the default variant more expected. For example, default size and default variation of the button instead of the primary variation."
  },
  {
    "objectID": "Figma to code-29",
    "title": "Figma to code",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/uibuilder/figmatocode",
    "category": "Amplify Studio",
    "subcategory": "UI development (React)",
    "type": "article",
    "heading": "1.0.0: March 2 2022",
    "depth": 4,
    "text": "Adding version number to the Figma file"
  },
  {
    "objectID": "Write React code-0",
    "title": "Write React code",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/code",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The generated UI components accept properties available on the \"Flex\" component or properties available on the \"Collection\" component."
  },
  {
    "objectID": "Write React code-1",
    "title": "Write React code",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/code",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For example, to make a component go full width you can use all the properties available on an Amplify UI “Flex” component. In this case, I've set width={“100vw”} for the NavBar and the MarketingFooter, so it scales with my browser window size. We can also enable pagination for NewHomes by setting the isPaginated and itemsPerPage properties."
  },
  {
    "objectID": "Write React code-2",
    "title": "Write React code",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/code",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Now, you can change the window size and also paginate through the collection as well."
  },
  {
    "objectID": "Write React code-4",
    "title": "Write React code",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/code",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "There are many more customizations you can apply in code such as applying overrides to child elements, setting up onClick handlers for collection items, or set hover states on icons. Review Extend via Code in the Amplify Studio documentation."
  },
  {
    "objectID": "Collections-0",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio also allows you to build lists and grids based on individual UI components. Let's create a \"NewHomes\" grid that showcases the latest homes added to the app."
  },
  {
    "objectID": "Collections-1",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create a collection",
    "depth": 2,
    "text": "To get started, choose the Create collection button in the top right corner in the UI component editor."
  },
  {
    "objectID": "Collections-2",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create a collection",
    "depth": 2,
    "text": "Specify a name for the new collection component, or use the default name provided by Studio. For this example, we'll name the collection NewHomes."
  },
  {
    "objectID": "Collections-3",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Modify collection styling",
    "depth": 2,
    "text": "On the left side of the component editor, you can modify all the style settings for your collection. In our case, we'll choose a grid and apply column and margin settings to add spacing between the items."
  },
  {
    "objectID": "Collections-4",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Modify collection styling",
    "depth": 2,
    "text": "Select Grid as the Type"
  },
  {
    "objectID": "Collections-5",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Modify collection styling",
    "depth": 2,
    "text": "Change Columns to 3"
  },
  {
    "objectID": "Collections-6",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Modify collection styling",
    "depth": 2,
    "text": "Add Padding to 10px on all sides"
  },
  {
    "objectID": "Collections-7",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Modify collection styling",
    "depth": 2,
    "text": "Your collection should look similar to the following:"
  },
  {
    "objectID": "Collections-9",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Modify collection data",
    "depth": 2,
    "text": "Next, let's populate the list with all recently created homes. By default, Amplify Studio renders collections with all records from the specified model. For our example, we will apply a sort condition to sort the records by the most recently created homes."
  },
  {
    "objectID": "Collections-10",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Modify collection data",
    "depth": 2,
    "text": "Modify the rendered data set by choosing View/Edit on the panel on the right side. Then choose Add sort and select createdAt and Descending as the sort condition."
  },
  {
    "objectID": "Collections-12",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Modify collection data",
    "depth": 2,
    "text": "Once configured, choose Create data set to display your collection sorted by the most recently created time stamp."
  },
  {
    "objectID": "Collections-13",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Use a collection in your app",
    "depth": 2,
    "text": "Similar to individual components, choose Get component code to get your React code for the collection."
  },
  {
    "objectID": "Collections-14",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Use a collection in your app",
    "depth": 2,
    "text": "Run amplify pull to sync all your components, including the NewHomes collection, into your local ./ui-components folder."
  },
  {
    "objectID": "Collections-15",
    "title": "Collections",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/collections",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Use a collection in your app",
    "depth": 2,
    "text": "Import the NewHomes collection from ./ui-components and then render it in your React app. For example:"
  },
  {
    "objectID": "Bind UI to data-0",
    "title": "Bind UI to data",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/bindui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Studio also allows you to bind UI elements to real backend data. Add properties to components, then reference the properties in your child UI elements. To get started, navigate into a UI component by choosing the Configure button in the UI Library. For this example, we'll use the CardB component."
  },
  {
    "objectID": "Bind UI to data-1",
    "title": "Bind UI to data",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/bindui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Add a component property",
    "depth": 2,
    "text": "To add a property, choose Add prop and set a name for your property. For this example, create a new property called home with the type Home."
  },
  {
    "objectID": "Bind UI to data-2",
    "title": "Bind UI to data",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/bindui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Set child property values",
    "depth": 2,
    "text": "Select a child element such as the \"$99 USD\" Text element and choose Set prop. Here, you are able to set all available properties for that child element. Configure the label for the text element and set the value to \"Price: $\" and then select Command + Enter on your keyboard to concatenate another value such as home.price."
  },
  {
    "objectID": "Bind UI to data-4",
    "title": "Bind UI to data",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/bindui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Set child property values",
    "depth": 2,
    "text": "Bind the address text element's label to home.address and the image's src to home.image_url."
  },
  {
    "objectID": "Bind UI to data-5",
    "title": "Bind UI to data",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/bindui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Set child property values",
    "depth": 2,
    "text": "You are also able to set traditional HTML properties through Studio. For example, hide the text element containing \"4bds 3 ba 2,530 sqft - Active\" by setting the display to none."
  },
  {
    "objectID": "Bind UI to data-6",
    "title": "Bind UI to data",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/bindui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Shuffle preview data",
    "depth": 2,
    "text": "To see how your component scales with different data, choose the Shuffle preview data button. This selects a random record in your database and applies it as a property to preview the component."
  },
  {
    "objectID": "Model database-0",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio provides a visual way to create your app's data model and manage the contents of your database."
  },
  {
    "objectID": "Model database-1",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create data model",
    "depth": 2,
    "text": "To get started, from the Set up menu, choose Data. On the Data modeling page, choose Add model to create your first data model. Think of a model as a table in your database."
  },
  {
    "objectID": "Model database-2",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create data model",
    "depth": 2,
    "text": "In this case, we'll create a Home model and add a few fields like address (String), price (Float), and image_url (String)."
  },
  {
    "objectID": "Model database-4",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create data model",
    "depth": 2,
    "text": "You can take this further by adding more data models to your app and creating relationships between them."
  },
  {
    "objectID": "Model database-5",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create data model",
    "depth": 2,
    "text": "Once you're ready, choose Save and Deploy to deploy your data model to the cloud."
  },
  {
    "objectID": "Model database-7",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Browse and auto-generate your app data",
    "depth": 2,
    "text": "After your backend is deployed, choose Content on the Manage menu to start browsing your app data. Amplify Studio also provides a feature to auto-generate seed data to help you test your app faster."
  },
  {
    "objectID": "Model database-8",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Browse and auto-generate your app data",
    "depth": 2,
    "text": "Choose Auto-generate data from the Actions menu."
  },
  {
    "objectID": "Model database-10",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Browse and auto-generate your app data",
    "depth": 2,
    "text": "The auto-generate seed data functionality also allows you to set constraints to make the generated seed data more semantically accurate. In our case, set a constraint for address as \"Street address\"."
  },
  {
    "objectID": "Model database-12",
    "title": "Model database",
    "description": "Create a database and GraphQL API.",
    "slug": "/console/tutorial/data",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Browse and auto-generate your app data",
    "depth": 2,
    "text": "Five records are now created. To better showcase image support for the rest of this tutorial, select each record and modify the image_url to a publicly reachable image URL."
  },
  {
    "objectID": "Build UI-0",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "With Studio’s new “UI Library”, you can sync components from Figma to React code. Amplify also provides you with a handy Figma file to get started faster. The Amplify Figma file includes both UI primitives and component templates. You can also create your own component in Figma! In this tutorial, we'll create a home listings app using Amplify Studio."
  },
  {
    "objectID": "Build UI-1",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create UI components in Figma",
    "depth": 2,
    "text": "Clone the Amplify UI Figma file\n\nThe Amplify UI Figma file provides a starting point for your app. It includes common UI primitives and pre-built UI components."
  },
  {
    "objectID": "Build UI-2",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create UI components in Figma",
    "depth": 2,
    "text": "Explore the UI primitives and templates"
  },
  {
    "objectID": "Build UI-4",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create UI components in Figma",
    "depth": 2,
    "text": "Primitives are common UI components that allow you to build complete applications that fit your brand, like Buttons, Text Fields, and Badges."
  },
  {
    "objectID": "Build UI-6",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create UI components in Figma",
    "depth": 2,
    "text": "Templates are Figma components that leverage the primitives to enhance your UI even further, such as Hero Cards, Profile Cards, and Product Detail Cards."
  },
  {
    "objectID": "Build UI-7",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Create UI components in Figma",
    "depth": 2,
    "text": "Create a custom component in Figma"
  },
  {
    "objectID": "Build UI-9",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Sync components with Figma",
    "depth": 2,
    "text": "Back in Studio, choose the “Sync from Figma” button to review all the components from your Figma file."
  },
  {
    "objectID": "Build UI-10",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Sync components with Figma",
    "depth": 2,
    "text": "Paste in the URL of your Figma file to start syncing. If this is your first time syncing from Figma, you need to grant Amplify Studio access to your Figma account."
  },
  {
    "objectID": "Build UI-12",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Sync components with Figma",
    "depth": 2,
    "text": "Either choose Accept all or review individual components with the Reject and Accept buttons."
  },
  {
    "objectID": "Build UI-14",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Use component in code",
    "depth": 2,
    "text": "Now that your components are synced, navigate to a component and choose Configure. To get your React code, choose Get component code."
  },
  {
    "objectID": "Build UI-15",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Use component in code",
    "depth": 2,
    "text": "Follow the instructions in the modal. If this is your first time setting up the UI components in your app, make sure to complete Initial project setup first to install all dependencies."
  },
  {
    "objectID": "Build UI-17",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Use component in code",
    "depth": 2,
    "text": "Next, run amplify pull to sync all your components into your local code base. A new ui-components folder with all the UI components is created."
  },
  {
    "objectID": "Build UI-18",
    "title": "Build UI",
    "description": "Figma to React code with Amplify Studio",
    "slug": "/console/tutorial/buildui",
    "category": "Amplify Studio",
    "subcategory": "Tutorial",
    "type": "article",
    "heading": "Use component in code",
    "depth": 2,
    "text": "Import the UI component you want from ./ui-components and then render it in your React app. For example:"
  },
  {
    "objectID": "Custom domains-0",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If your app is set up to use Amplify's web hosting features, you can access Amplify Studio with the custom domain for your app's frontend. For example, if you host your app at https://example.com, you can set up a friendly redirect to Studio for the app at a domain address such as https://example.com/amplify/studio."
  },
  {
    "objectID": "Custom domains-1",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When you connect a custom domain, the process for updating the DNS settings with your third-party DNS provider varies.  For more information about connecting custom domains, see Set up custom domains in the AWS Amplify Console User Guide. That topic includes instructions for updating your DNS settings with GoDaddy, Google Domains, and Amazon Route 53."
  },
  {
    "objectID": "Custom domains-2",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To set up custom domain access for Studio",
    "depth": 2,
    "text": "Sign in to the AWS Management Console and open AWS Amplify."
  },
  {
    "objectID": "Custom domains-3",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To set up custom domain access for Studio",
    "depth": 2,
    "text": "Choose the app that you want to connect to a custom domain for Studio access."
  },
  {
    "objectID": "Custom domains-4",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To set up custom domain access for Studio",
    "depth": 2,
    "text": "In the navigation pane, choose App settings, Domain management."
  },
  {
    "objectID": "Custom domains-5",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To set up custom domain access for Studio",
    "depth": 2,
    "text": "On the Domain management page, choose Add domain."
  },
  {
    "objectID": "Custom domains-6",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To set up custom domain access for Studio",
    "depth": 2,
    "text": "Under Add domain, for Domain, enter your root domain, and then choose Configure domain."
  },
  {
    "objectID": "Custom domains-7",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To set up custom domain access for Studio",
    "depth": 2,
    "text": "At the bottom of the Add domain page, select the Set up redirects for custom domain to point to Studio checkbox."
  },
  {
    "objectID": "Custom domains-8",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To set up custom domain access for Studio",
    "depth": 2,
    "text": "Update the DNS management settings for your domain with your DNS provider. Note that verification of domain ownership and DNS propagation for third-party domains can take up to 48 hours."
  },
  {
    "objectID": "Custom domains-9",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To set up custom domain access for Studio",
    "depth": 2,
    "text": "After your app is successfully connected to your custom domain, you can access Studio at your domain address with /amplify/staging appended. For example, if your app's domain is https://example.com, by default you can access Studio at https://example.com/amplify/staging. You can also customize the domain address with a custom redirect rule."
  },
  {
    "objectID": "Custom domains-10",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "Sign in to the AWS Management Console and open AWS Amplify."
  },
  {
    "objectID": "Custom domains-11",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "Choose the app that you want to add a redirect rule to for Studio access."
  },
  {
    "objectID": "Custom domains-12",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "In the navigation pane, choose App settings, Amplify Studio settings."
  },
  {
    "objectID": "Custom domains-13",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "The Domain management section displays the redirect rules for Studio."
  },
  {
    "objectID": "Custom domains-14",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "Choose Manage."
  },
  {
    "objectID": "Custom domains-15",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "Choose Add redirect rule, and then do the following:"
  },
  {
    "objectID": "Custom domains-16",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "For Source, enter a custom redirect rule, for example /amplify/studio."
  },
  {
    "objectID": "Custom domains-17",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "For Target, select the backend environment to open Studio for, for example, staging."
  },
  {
    "objectID": "Custom domains-18",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "Choose Save."
  },
  {
    "objectID": "Custom domains-19",
    "title": "Custom domains",
    "description": "Access Amplify Studio on a custom domain",
    "slug": "/console/adminui/custom-domain",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To add a redirect rule for Studio access",
    "depth": 2,
    "text": "In this example, if an app is hosted at https://example.com, Studio for the staging backend is available at https://example.com/amplify/studio."
  },
  {
    "objectID": "Manage team access-0",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "With Amplify Studio, team members with different job functions can collaborate on different aspects of a project deployed in Amplify. Studio developers can create accounts with scoped access to resources and invite team members to join via email. Team members with Full access can create and manage AWS resources, while team members with Manage only access can edit application content and users."
  },
  {
    "objectID": "Manage team access-1",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Studio manages user access using an Amazon Cognito User Pool in your account. If you visit Cognito from the AWS console you should see a User Pool named amplify_backend_manager_APPID. This User Pool is managed by Studio so please do not modify the settings for this resource. You can invite up to 50,000 monthly users to Studio without cost. In order to give the Full access and Manage only groups the necessary permissions, Studio creates 2 IAM roles, namely: USERPOOLID_Full-access, and USERPOOLID_Manage-only. An Amazon Cognito Identity Pool named, amplify_backend_manager_APPID  is also created to vend AWS credentials that are tied to the Full access and Manage only groups."
  },
  {
    "objectID": "Manage team access-2",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To provide a passwordless login experience from AWS Amplify Console to Amplify Studio, Studio creates 4 Cognito Lambda triggers (associated with the above-mentioned User Pool), namely: amplify-login-create-auth-challenge-SHORT_CODE, amplify-login-custom-message-SHORT_CODE, amplify-login-define-auth-challenge-SHORT_CODE, and amplify-login-verify-auth-challenge-SHORT_CODE."
  },
  {
    "objectID": "Manage team access-3",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Follow these instructions to add and manage team members and their access to a project."
  },
  {
    "objectID": "Manage team access-4",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "Sign in to the AWS Management Console and open AWS Amplify."
  },
  {
    "objectID": "Manage team access-5",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "In the navigation pane, choose Amplify Studio settings."
  },
  {
    "objectID": "Manage team access-6",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "On the Amplify Studio settings page, in the Access control settings section, choose Add team members."
  },
  {
    "objectID": "Manage team access-7",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "For Email, enter the email address of the team member to invite."
  },
  {
    "objectID": "Manage team access-8",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "For Access level, choose the level of access to grant the team member."
  },
  {
    "objectID": "Manage team access-9",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "Full access allows the team member to create and manage AWS resources."
  },
  {
    "objectID": "Manage team access-10",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "Manage only access allows the team member to edit app content and users."
  },
  {
    "objectID": "Manage team access-11",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "To email the invitation, choose Send invite. The team member receives an email with temporary credentials and a link to access the project in Studio."
  },
  {
    "objectID": "Manage team access-12",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To invite team members to access a project",
    "depth": 2,
    "text": "Granting a user the Full Access level attaches the AdministratorAccess-Amplify IAM policy. This IAM policy is not scoped to a single application and grants the user access to all applications within the AWS account. See AWS managed policies for AWS Amplify for more details."
  },
  {
    "objectID": "Manage team access-13",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To edit team member access or delete a user",
    "depth": 2,
    "text": "Sign in to the AWS Management Console and open AWS Amplify."
  },
  {
    "objectID": "Manage team access-14",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To edit team member access or delete a user",
    "depth": 2,
    "text": "In the navigation pane, choose Amplify Studio settings."
  },
  {
    "objectID": "Manage team access-15",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To edit team member access or delete a user",
    "depth": 2,
    "text": "On the Amplify Studio settings page, in the Access control settings section, select the team member to edit or delete."
  },
  {
    "objectID": "Manage team access-16",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To edit team member access or delete a user",
    "depth": 2,
    "text": "Do one of the following:"
  },
  {
    "objectID": "Manage team access-17",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To edit team member access or delete a user",
    "depth": 2,
    "text": "Choose Edit. In the Edit team member(s) window, choose the Access level for the team member."
  },
  {
    "objectID": "Manage team access-18",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To edit team member access or delete a user",
    "depth": 2,
    "text": "Choose Delete. In the Delete users window, confirm the delete action."
  },
  {
    "objectID": "Manage team access-19",
    "title": "Manage team access",
    "description": "Manage team access to a project",
    "slug": "/console/adminui/access-management",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To edit team member access or delete a user",
    "depth": 2,
    "text": "If a team member logs into Amplify Studio, their login token is valid for 60 minutes, unless explicitly logged out. When you change a team member's permission from full access to manage-only or when you delete a team member's access, the team member can continue accessing Amplify Studio with their previously granted permissions until their token expires."
  },
  {
    "objectID": "Extend with the Amplify CLI-0",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio allows you to use all the Amplify CLI's features without the need to configure it with AWS Identity and Access Management (IAM). Changes made in Amplify Studio can be made available in the CLI by running the amplify pull command. Similarly, CLI changes to the data model or auth will be visible in Amplify Studio. For all other categories, Studio provides links to the relevant service consoles in AWS."
  },
  {
    "objectID": "Extend with the Amplify CLI-2",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To install the Amplify CLI",
    "depth": 2,
    "text": "Open a terminal window and install the CLI."
  },
  {
    "objectID": "Extend with the Amplify CLI-3",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To install the Amplify CLI",
    "depth": 2,
    "text": "After the Amplify CLI finishes installing, you can configure the CLI so that you can use it without an AWS account."
  },
  {
    "objectID": "Extend with the Amplify CLI-4",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Adding features with the Amplify CLI",
    "depth": 2,
    "text": "The Studio Set up menu lists cloud backend features such as functions, storage, and APIs that you can add to your app using the CLI. For each backend resource, Studio displays the CLI commands to run in your terminal window."
  },
  {
    "objectID": "Extend with the Amplify CLI-5",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Adding features with the Amplify CLI",
    "depth": 2,
    "text": "In Studio, on the Set up menu, choose Storage or Functions."
  },
  {
    "objectID": "Extend with the Amplify CLI-6",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Adding features with the Amplify CLI",
    "depth": 2,
    "text": "On the Storage page, under Pull your Amplify project, copy the following command and run it in your terminal window."
  },
  {
    "objectID": "Extend with the Amplify CLI-7",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Adding features with the Amplify CLI",
    "depth": 2,
    "text": "After your backend environment has been successfully pulled from the cloud, copy the following command under Add storage capabilities and paste it in your terminal window:"
  },
  {
    "objectID": "Extend with the Amplify CLI-8",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Adding features with the Amplify CLI",
    "depth": 2,
    "text": "Follow the prompts in the terminal window to configure storage with your desired settings."
  },
  {
    "objectID": "Extend with the Amplify CLI-9",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Adding features with the Amplify CLI",
    "depth": 2,
    "text": "Run the following command in your terminal window to build your local backend resources and provision them in the cloud:"
  },
  {
    "objectID": "Extend with the Amplify CLI-10",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Adding features with the Amplify CLI",
    "depth": 2,
    "text": "Return to the Studio Storage page. Confirm that a link to your new storage resource is available in the Deployed storage resources section."
  },
  {
    "objectID": "Extend with the Amplify CLI-11",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Infrastructure-as-code",
    "depth": 2,
    "text": "All backends created in Amplify Studio and Amplify CLI are deployed using AWS CloudFormation. AWS CloudFormation allows you store your backend configuration as code in your repository. This has three major benefits:"
  },
  {
    "objectID": "Extend with the Amplify CLI-12",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Infrastructure-as-code",
    "depth": 2,
    "text": "Ability to extend a project with capabilities offered by individual services (e.g. Cognito, DynamoDB) that are not available in Amplify."
  },
  {
    "objectID": "Extend with the Amplify CLI-13",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Infrastructure-as-code",
    "depth": 2,
    "text": "Ability to easily replicate backend environments across AWS accounts and regions."
  },
  {
    "objectID": "Extend with the Amplify CLI-14",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Infrastructure-as-code",
    "depth": 2,
    "text": "Ability to easily integrate with CI/CD pipelines such as the pipeline offered in the Amplify console."
  },
  {
    "objectID": "Extend with the Amplify CLI-15",
    "title": "Extend with the Amplify CLI",
    "description": "Install the CLI without npm and use the CLI without an AWS account",
    "slug": "/console/adminui/extend-cli",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Infrastructure-as-code",
    "depth": 2,
    "text": "All backend infrastructure-as-code definitions can be added to your project with the Amplify Command Line Interface (CLI)."
  },
  {
    "objectID": "Getting started-0",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Amplify Studio is a visual development environment for building full-stack web and mobile apps. To learn more, see the Amplify Studio introduction."
  },
  {
    "objectID": "Getting started-1",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify Studio is available in the following regions: Amplify Studio service endpoints."
  },
  {
    "objectID": "Getting started-2",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can get started with or without an AWS account. Without an AWS account, you can begin modeling data for your backend and testing it locally. If you choose to create an AWS account and deploy your backend in the AWS Amplify console, an expanded set of features becomes available for configuring your backend environment."
  },
  {
    "objectID": "Getting started-3",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Get started without an AWS account",
    "depth": 2,
    "text": "If you are new to AWS, you don't need an AWS account to get started. You can still model and test your data before deploying to the cloud. After building your data model, you must connect an AWS account to deploy your backend environment to Amplify using Amplify Studio. The sandbox interface lets you perform the following tasks:"
  },
  {
    "objectID": "Getting started-4",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Get started without an AWS account",
    "depth": 2,
    "text": "Set up your data model. For instructions on creating models and setting relationships, see Data modeling in Amplify Studio."
  },
  {
    "objectID": "Getting started-5",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Get started without an AWS account",
    "depth": 2,
    "text": "Test your new data model locally."
  },
  {
    "objectID": "Getting started-6",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Get started without an AWS account",
    "depth": 2,
    "text": "Deploy your backend to the cloud. This requires an AWS account."
  },
  {
    "objectID": "Getting started-7",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Get started without an AWS account",
    "depth": 2,
    "text": "Launch Sandbox\nGet started without an AWS account"
  },
  {
    "objectID": "Getting started-8",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Get started with your AWS account",
    "depth": 2,
    "text": "If you already have an AWS account and you want to skip the sandbox experience, deploy Amplify Studio to start using all Amplify features, including DataStore, user authentication and authorization, and file storage. After you deploy a backend in Amplify, you can launch Amplify Studio from your Amplify app. Your entire team can use Studio to add new features, update app data, and manage users and groups."
  },
  {
    "objectID": "Getting started-9",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Get started with your AWS account",
    "depth": 2,
    "text": "Log in to AWS console\nGet started in the AWS Amplify console"
  },
  {
    "objectID": "Getting started-10",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started with a new Amplify app",
    "depth": 3,
    "text": "Sign in to the AWS Management Console and open AWS Amplify. Choose Create app backend."
  },
  {
    "objectID": "Getting started-11",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started with a new Amplify app",
    "depth": 3,
    "text": "Enter a name for your app and choose Confirm deployment. This deploys a default staging backend environment."
  },
  {
    "objectID": "Getting started-12",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started with a new Amplify app",
    "depth": 3,
    "text": "On the application information page, choose the Backend environments tab."
  },
  {
    "objectID": "Getting started-13",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started with a new Amplify app",
    "depth": 3,
    "text": "Choose Launch Studio. This automatically logs you in to Amplify Studio."
  },
  {
    "objectID": "Getting started-14",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started with a new Amplify app",
    "depth": 3,
    "text": "If you already have an existing backend environment, you can enable Amplify Studio from the console."
  },
  {
    "objectID": "Getting started-15",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started from an existing Amplify app",
    "depth": 3,
    "text": "Sign in to the AWS Management Console and open AWS Amplify. Or, enter amplify console from the Amplify Command Line Interface (CLI)."
  },
  {
    "objectID": "Getting started-16",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started from an existing Amplify app",
    "depth": 3,
    "text": "In the navigation pane, choose Amplify Studio settings."
  },
  {
    "objectID": "Getting started-17",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started from an existing Amplify app",
    "depth": 3,
    "text": "Turn on Enable Amplify Studio."
  },
  {
    "objectID": "Getting started-18",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "To get started from an existing Amplify app",
    "depth": 3,
    "text": "In the Backend environments section, choose Launch Studio.  This automatically logs you in to Amplify Studio where you can use all the Studio capabilities."
  },
  {
    "objectID": "Getting started-19",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "You are ready to start creating and managing your application's backend in Amplify Studio. Recommended next steps:"
  },
  {
    "objectID": "Getting started-20",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Build a data model"
  },
  {
    "objectID": "Getting started-21",
    "title": "Getting started",
    "description": "Getting started with Amplify Studio",
    "slug": "/console/adminui/start",
    "category": "Amplify Studio",
    "subcategory": "Basics",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Create UI components in Figma"
  },
  {
    "objectID": "Examples-0",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Task App",
    "depth": 2,
    "text": "Note: To use the @auth directive, the API must be configured to use Amazon Cognito user pools."
  },
  {
    "objectID": "Examples-1",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Common Patterns for the API Category",
    "depth": 2,
    "text": "The Amplify CLI exposes the GraphQL Transform libraries to help create APIs with common\npatterns and best practices baked in but it also provides number of escape hatches for\nthose situations where you might need a bit more control. Here are a few common use cases\nyou might find useful."
  },
  {
    "objectID": "Examples-2",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "In multi-tenant scenarios, subscribed clients may not always want to receive every change for a model type. These are useful features for limiting the objects that are returned by a client subscription. It is crucial to remember that subscriptions can only filter by what fields are returned from the mutation query. Keep in mind, these two methods can be used together to create truly robust filtering options."
  },
  {
    "objectID": "Examples-3",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "Consider this simple schema for our examples:"
  },
  {
    "objectID": "Examples-4",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "Filtering by type fields"
  },
  {
    "objectID": "Examples-5",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "This is the simpler method of filtering subscriptions, as it requires one less change to the model than filtering on relations."
  },
  {
    "objectID": "Examples-6",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "Add the subscriptions argument on the @model directive, telling Amplify to not generate subscriptions for your Comment type."
  },
  {
    "objectID": "Examples-7",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "Run amplify push at this point, as running it after adding the Subscription type will throw an error, claiming you cannot have two Subscription definitions in your schema."
  },
  {
    "objectID": "Examples-8",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "After the push, you will need to add the Subscription type to your schema, including whichever scalar Comment fields you wish to use for filtering (content in this case):"
  },
  {
    "objectID": "Examples-9",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "Filtering by related (@connection designated) type"
  },
  {
    "objectID": "Examples-10",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "This is useful when you need to filter by what Todo objects the Comments are connected to. You will need to augment your schema slightly to enable this."
  },
  {
    "objectID": "Examples-11",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "Add the subscriptions argument on the @model directive, telling Amplify to not generate subscriptions for your Comment type. Also, just as importantly, we will be utilizing an auto-generated column from DynamoDB by adding commentTodoId to our Comment model:"
  },
  {
    "objectID": "Examples-12",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "You should run amplify push at this point, as running it after adding the Subscription type will throw an error, claiming you cannot have two Subscription definitions in your schema."
  },
  {
    "objectID": "Examples-13",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "After the push, you will need to add the Subscription type to your schema, including the commentTodoId as an optional argument:"
  },
  {
    "objectID": "Examples-14",
    "title": "Examples",
    "description": "Refer to these examples to learn about various sample application's GraphQL schemas.",
    "slug": "/cli-legacy/graphql-transformer/examples",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Filter Subscriptions by model fields and/or relations",
    "depth": 3,
    "text": "The next time you run amplify push or amplify api gql-compile, your subscriptions will allow an id and/or commentTodoId argument on a Comment subscription. As long as your mutation on the Comment type returns the specified argument field from its query, AppSync filters which subscription events will be pushed to your subscribed client."
  },
  {
    "objectID": "Configurable Parameters-0",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Much of the behavior of the GraphQL Transform logic is configured by passing arguments to the directives in the GraphQL SDL definition. However, certain other things are configured by passing parameters to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition. You can pass values to these parameters by adding them to the parameters.json file in the API directory of your amplify project."
  },
  {
    "objectID": "Configurable Parameters-1",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AppSyncApiName",
    "depth": 2,
    "text": "Override the name of the generated AppSync API"
  },
  {
    "objectID": "Configurable Parameters-2",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "CreateAPIKey",
    "depth": 2,
    "text": "CreateAPIKey takes value of either 1 or 0."
  },
  {
    "objectID": "Configurable Parameters-3",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "CreateAPIKey",
    "depth": 2,
    "text": "It gives you the mechanism to rotate the API Key, in scenarios such as to handle API Key expiration."
  },
  {
    "objectID": "Configurable Parameters-4",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "CreateAPIKey",
    "depth": 2,
    "text": "Follow these two steps when you need to rotate an API Key"
  },
  {
    "objectID": "Configurable Parameters-5",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "CreateAPIKey",
    "depth": 2,
    "text": "Delete the existing API key by setting CreateAPIKey to 0 in the amplify/backend/api/<apiName>/parameters.json file and execute amplify push."
  },
  {
    "objectID": "Configurable Parameters-6",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "CreateAPIKey",
    "depth": 2,
    "text": "Create a new API key by setting CreateAPIKey to 1 in the amplify/backend/api/<apiName>/parameters.json file and execute amplify push."
  },
  {
    "objectID": "Configurable Parameters-7",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "CreateAPIKey",
    "depth": 2,
    "text": "Delete the existing API Key"
  },
  {
    "objectID": "Configurable Parameters-8",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "CreateAPIKey",
    "depth": 2,
    "text": "Create new API Key"
  },
  {
    "objectID": "Configurable Parameters-9",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "APIKeyExpirationEpoch",
    "depth": 2,
    "text": "Resets the API Key to expire 1 week after the next amplify push"
  },
  {
    "objectID": "Configurable Parameters-10",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "APIKeyExpirationEpoch",
    "depth": 2,
    "text": "Do not create an API key"
  },
  {
    "objectID": "Configurable Parameters-11",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "APIKeyExpirationEpoch",
    "depth": 2,
    "text": "Set a custom API key expiration date"
  },
  {
    "objectID": "Configurable Parameters-12",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "APIKeyExpirationEpoch",
    "depth": 2,
    "text": "The value specified is the expiration date in seconds since Epoch"
  },
  {
    "objectID": "Configurable Parameters-13",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "DynamoDBBillingMode",
    "depth": 2,
    "text": "Set the DynamoDB billing mode for the API. One of \"PROVISIONED\" or \"PAY_PER_REQUEST\"."
  },
  {
    "objectID": "Configurable Parameters-14",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "DynamoDBModelTableReadIOPS",
    "depth": 2,
    "text": "Override the default read IOPS provisioned for each @model table"
  },
  {
    "objectID": "Configurable Parameters-15",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "DynamoDBModelTableReadIOPS",
    "depth": 2,
    "text": "Only valid if the \"DynamoDBBillingMode\" is set to \"PROVISIONED\""
  },
  {
    "objectID": "Configurable Parameters-16",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "DynamoDBModelTableWriteIOPS",
    "depth": 2,
    "text": "Override the default write IOPS provisioned for each @model table"
  },
  {
    "objectID": "Configurable Parameters-17",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "DynamoDBModelTableWriteIOPS",
    "depth": 2,
    "text": "Only valid if the \"DynamoDBBillingMode\" is set to \"PROVISIONED\""
  },
  {
    "objectID": "Configurable Parameters-18",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "DynamoDBEnablePointInTimeRecovery",
    "depth": 2,
    "text": "Enable/disable DynamoDB Point-in-time-Recovery for all model tables"
  },
  {
    "objectID": "Configurable Parameters-19",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "DynamoDBEnablePointInTimeRecovery",
    "depth": 2,
    "text": "For more information, see https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
  },
  {
    "objectID": "Configurable Parameters-20",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "ElasticSearchStreamingFunctionName",
    "depth": 2,
    "text": "Override the name of the AWS Lambda searchable streaming function"
  },
  {
    "objectID": "Configurable Parameters-21",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "ElasticSearchInstanceCount",
    "depth": 2,
    "text": "Override the number of instances launched into the OpenSearch domain created by @searchable"
  },
  {
    "objectID": "Configurable Parameters-22",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "ElasticSearchInstanceType",
    "depth": 2,
    "text": "Override the type of instance launched into the OpenSearch domain created by @searchable"
  },
  {
    "objectID": "Configurable Parameters-23",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "ElasticSearchEBSVolumeGB",
    "depth": 2,
    "text": "Override the amount of disk space allocated to each instance in the OpenSearch domain created by @searchable"
  },
  {
    "objectID": "Configurable Parameters-24",
    "title": "Configurable Parameters",
    "description": "Additional configurable parameters for GraphQL Transform can be passed to the CloudFormation template itself. This provides escape hatches without leaking too many implementation details into the SDL definition",
    "slug": "/cli-legacy/graphql-transformer/config-params",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "ElasticSearchEBSVolumeGB",
    "depth": 2,
    "text": "Note: To use the @auth directive, the API must be configured to use Amazon Cognito user pools."
  },
  {
    "objectID": "Overwrite & customize resolvers-0",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overwriting Resolvers",
    "depth": 2,
    "text": "Let's say you have a simple schema.graphql..."
  },
  {
    "objectID": "Overwrite & customize resolvers-1",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Overwriting Resolvers",
    "depth": 2,
    "text": "and you want to change the behavior of request mapping template for the Query.getTodo resolver that will be generated when the project compiles. To do this you would create a file named Query.getTodo.req.vtl in the resolvers directory of your API project. The next time you run amplify push or amplify api gql-compile, your resolver template will be used instead of the auto-generated template. You may similarly create a Query.getTodo.res.vtl file to change the behavior of the resolver's response mapping template."
  },
  {
    "objectID": "Overwrite & customize resolvers-2",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "You can add custom Query, Mutation and Subscription when the generated ones do not cover your use case."
  },
  {
    "objectID": "Overwrite & customize resolvers-3",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "Add the required Query, Mutation or Subscription type to your schema."
  },
  {
    "objectID": "Overwrite & customize resolvers-4",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "Create resolvers for newly created Query, Mutation or Subscription by creating request and response template in <project-root>/amplify/backend/api/<api-name>/resolvers folder. Graphql Transformer follows <TypeName>.<FieldName>.<req/res>.vtl as convention to name the resolvers. So if you're adding a custom query name myCustomQuery the resolvers would be name Query.myCustomQuery.req.vtl and Query.myCustomQuery.res.vtl."
  },
  {
    "objectID": "Overwrite & customize resolvers-5",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "Add resolvers resource by creating a custom stack inside <project-root>/amplify/backend/api/<api-name>/stacks directory of your API."
  },
  {
    "objectID": "Overwrite & customize resolvers-6",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "To add the custom fields, add the following to your schema:"
  },
  {
    "objectID": "Overwrite & customize resolvers-7",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "The GraphQL Transformer by default creates a file called CustomResources.json inside <project-root>/amplify/backend/api/<api-name>/stacks, which can be used to add the custom resolvers for newly added Query, Mutation or Subscription. The custom stack gets the following arguments passed to it, allowing you to get details about API:"
  },
  {
    "objectID": "Overwrite & customize resolvers-8",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "| Parameter                          | Type   | Possible values                    | Description                                                                                                                                                                       |\n| :--------------------------------- | :----- | ---------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| AppSyncApiId                       | String |                                    | The id of the AppSync API associated with this project                                                                                                                            |\n| AppSyncApiName                     | String |                                    | The name of the AppSync API                                                                                                                                                       |\n| env                                | String |                                    | Environment name                                                                                                                                                                  |\n| S3DeploymentBucket                 | String |                                    | The S3 bucket containing all deployment assets for the project                                                                                                                    |\n| S3DeploymentRootKey                | String |                                    | An S3 key relative to the S3DeploymentBucket that points to the root of the deployment directory.                                                                                 |\n| DynamoDBEnableServerSideEncryption | String | true or false                  | Enable server side encryption powered by KMS.                                                                                                                                     |\n| AuthCognitoUserPoolId              | String |                                    | The id of an existing User Pool to connect                                                                                                                                        |\n| DynamoDBModelTableReadIOPS         | Number |                                    | The number of read IOPS the table should support.                                                                                                                                 |\n| DynamoDBModelTableWriteIOPS        | Number |                                    | The number of write IOPS the table should support                                                                                                                                 |\n| DynamoDBBillingMode                | String | PAY_PER_REQUEST or PROVISIONED | Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes                                                                                |\n| DynamoDBEnablePointInTimeRecovery  | String | true or false                  | Whether to enable Point in Time Recovery on the table                                                                                                                             |\n| APIKeyExpirationEpoch              | Number |                                    | he epoch time in seconds when the API Key should expire                                                                                                                           |\n| CreateAPIKey                       | Number | 0 or 1                         | The boolean value to control if an API Key will be created or not. The value of the property is automatically set by the CLI. If the value is set to 0 no API Key will be created |"
  },
  {
    "objectID": "Overwrite & customize resolvers-9",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "Any additional values added Custom Stacks will be exposed as parameter in the root stack, and value can be set by adding the value for it in <project-root>/amplify/backend/api/<api-name>/parameters.json file."
  },
  {
    "objectID": "Overwrite & customize resolvers-10",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "To add a custom resolver, add the following in the resource section of CustomResource.json"
  },
  {
    "objectID": "Overwrite & customize resolvers-11",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "The request and response template should be placed inside <project-root>/amplify/backend/api/<api-name>/resolvers folder. Resolver templates are written in the Apache Velocity Template Language, commonly referred to as VTL. Query.myCustomQuery.req.vtl is a request mapping template, which receives an incoming AppSync request and transforms it into a JSON document that is subsequently passed to the GraphQL resolver. Similarly, Query.myCustomQuery.res.vtl is a response mapping template. These templates receive the GraphQL resolver's response and transform the data before returning it to the user."
  },
  {
    "objectID": "Overwrite & customize resolvers-12",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom Resolvers",
    "depth": 2,
    "text": "Several example VTL files are discussed later in this documentation. For more detailed information on VTL, including how it can be used in the context of GraphQL resolvers, see the official AppSync Resolver Mapping Template Reference."
  },
  {
    "objectID": "Overwrite & customize resolvers-13",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets a DynamoDB table from @model",
    "depth": 3,
    "text": "This is useful if you want to write a more specific query against a DynamoDB table that was created by @model. For example, assume you had this schema with two @model types and a pair of @connection directives."
  },
  {
    "objectID": "Overwrite & customize resolvers-14",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets a DynamoDB table from @model",
    "depth": 3,
    "text": "This schema will generate resolvers for Query.getTodo, Query.listTodos, Query.getComment, and Query.listComments at the top level as well as for Todo.comments, and Comment.todo to implement the @connection. Under the hood, the transform will create a global secondary index on the Comment table in DynamoDB but it will not generate a top level query field that queries the GSI because you can fetch the comments for a given todo object via the Query.getTodo.comments query path. If you want to fetch all comments for a todo object via a top level query field i.e. Query.commentsForTodo then do the following:"
  },
  {
    "objectID": "Overwrite & customize resolvers-15",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets a DynamoDB table from @model",
    "depth": 3,
    "text": "Add the desired field to your schema.graphql."
  },
  {
    "objectID": "Overwrite & customize resolvers-16",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets a DynamoDB table from @model",
    "depth": 3,
    "text": "Add a resolver resource to a stack in the stacks/ directory. The DataSourceName is auto-generated. In most cases, it'll look like {MODEL_NAME}Table. To confirm the data source name, you can verify it from within the AppSync Console (amplify console api) and clicking on the Data Sources tab."
  },
  {
    "objectID": "Overwrite & customize resolvers-17",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets a DynamoDB table from @model",
    "depth": 3,
    "text": "Write the resolver templates."
  },
  {
    "objectID": "Overwrite & customize resolvers-18",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "Velocity is useful as a fast, secure environment to run arbitrary code but when it comes to writing complex business logic you can just as easily call out to an AWS lambda function. Here is how:"
  },
  {
    "objectID": "Overwrite & customize resolvers-19",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "First create a function by running amplify add function. The rest of the example assumes you created a function named \"echofunction\" via the amplify add function command. If you already have a function then you may skip this step."
  },
  {
    "objectID": "Overwrite & customize resolvers-20",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "Add a field to your schema.graphql that will invoke the AWS Lambda function."
  },
  {
    "objectID": "Overwrite & customize resolvers-21",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "Add the function as an AppSync data source in the stack's Resources block."
  },
  {
    "objectID": "Overwrite & customize resolvers-22",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "Create an AWS IAM role that allows AppSync to invoke the lambda function on your behalf to the stack's Resources block."
  },
  {
    "objectID": "Overwrite & customize resolvers-23",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "Create an AppSync resolver in the stack's Resources block."
  },
  {
    "objectID": "Overwrite & customize resolvers-24",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "Create the resolver templates in the project's resolvers directory."
  },
  {
    "objectID": "Overwrite & customize resolvers-25",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "resolvers/Query.echo.req.vtl"
  },
  {
    "objectID": "Overwrite & customize resolvers-26",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "resolvers/Query.echo.res.vtl"
  },
  {
    "objectID": "Overwrite & customize resolvers-27",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom resolver that targets an AWS Lambda function",
    "depth": 3,
    "text": "After running amplify push open the AppSync console with amplify api console and test your API with this simple query:"
  },
  {
    "objectID": "Overwrite & customize resolvers-28",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "To add a geolocation search capabilities to an API add the @searchable directive to an @model type."
  },
  {
    "objectID": "Overwrite & customize resolvers-29",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "The next time you run amplify push, an Amazon OpenSearch domain will be created and configured such that data automatically streams from DynamoDB into OpenSearch. The @searchable directive on the Todo type will generate a Query.searchTodos query field and resolver but it is not uncommon to want more specific search capabilities. You can write a custom search resolver by following these steps:"
  },
  {
    "objectID": "Overwrite & customize resolvers-30",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "Add the relevant location and search fields to the schema."
  },
  {
    "objectID": "Overwrite & customize resolvers-31",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "Create the resolver record in the stack's Resources block."
  },
  {
    "objectID": "Overwrite & customize resolvers-32",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "Write the resolver templates."
  },
  {
    "objectID": "Overwrite & customize resolvers-33",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "Run amplify push"
  },
  {
    "objectID": "Overwrite & customize resolvers-34",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "Amazon OpenSearch domains can take a while to deploy. Take this time to read up on OpenSearch to see what capabilities you are about to unlock."
  },
  {
    "objectID": "Overwrite & customize resolvers-35",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "Getting Started with OpenSearch"
  },
  {
    "objectID": "Overwrite & customize resolvers-36",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "After the update is complete but before creating any objects, update your OpenSearch index mapping."
  },
  {
    "objectID": "Overwrite & customize resolvers-37",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "An index mapping tells OpenSearch how it should treat the data that you are trying to store. By default, if we create an object with field \"location\": { \"lat\": 40, \"lon\": -40 }, OpenSearch will treat that data as an object type when in reality we want it to be treated as a geo_point. You use the mapping APIs to tell OpenSearch how to do this."
  },
  {
    "objectID": "Overwrite & customize resolvers-38",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "Make sure you tell OpenSearch that your location field is a geo_point before creating objects in the index because otherwise you will need delete the index and try again. Go to the Amazon OpenSearch Console and find the OpenSearch domain that contains this environment's GraphQL API ID. Click on it and open the OpenSearch Dashboard link. To get the OpenSearch Dashboard to show up you need to install a browser extension such as AWS Agent and configure it with your AWS profile's public key and secret so the browser can sign your requests to the OpenSearch Dashboard for security reasons. Once you have the OpenSearch Dashboard open, click the \"Dev Tools\" tab on the left and run the commands below using the in browser console."
  },
  {
    "objectID": "Overwrite & customize resolvers-39",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "Use your API to create objects and immediately search them."
  },
  {
    "objectID": "Overwrite & customize resolvers-40",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "After updating the OpenSearch index mapping, open the AWS AppSync console with amplify api console and try out these queries."
  },
  {
    "objectID": "Overwrite & customize resolvers-41",
    "title": "Overwrite & customize resolvers",
    "description": "GraphQL resolvers connect the fields in a type’s schema to a data source. Resolvers are the mechanism by which requests are fulfilled. Learn how to overwrite or add custom resolvers with Amplify.",
    "slug": "/cli-legacy/graphql-transformer/resolvers",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add a custom geolocation search resolver that targets an OpenSearch domain created by @searchable",
    "depth": 3,
    "text": "When you run Mutation.createTodo, the data will automatically be streamed via AWS Lambda into OpenSearch such that it nearly immediately available via Query.nearbyTodos."
  },
  {
    "objectID": "Client code generation-0",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Codegen helps you generate native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements (queries, mutations, and subscriptions) so that you don't have to hand code them."
  },
  {
    "objectID": "Client code generation-1",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Codegen add workflow triggers automatically when an AppSync API is pushed to the cloud. You will be prompted if you want to configure codegen when an AppSync API is created and if you opt-in for codegen, subsequent pushes prompt you if they want to update the generated code after changes get pushed to the cloud."
  },
  {
    "objectID": "Client code generation-2",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When a project is configured to generate code with codegen, it stores all the configuration .graphqlconfig.yml file in the root folder of your project. When generating types, codegen uses GraphQL statements as input. It will generate only the types that are being used in the GraphQL statements."
  },
  {
    "objectID": "Client code generation-3",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Statement depth",
    "depth": 2,
    "text": "In the below schema there are connections between Comment -> Post -> Blog -> Post -> Comments. When generating statements codegen has a default limit of 2 for depth traversal. But if you need to go deeper than 2 levels you can change the maxDepth parameter either when setting up your codegen or by passing  --maxDepth parameter to codegen"
  },
  {
    "objectID": "Client code generation-4",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify add codegen",
    "depth": 3,
    "text": "The amplify add codegen allows you to add AppSync API created using the AWS console. If you have your API is in a different region then that of your current region, the command asks you to choose the region. If you are adding codegen outside of an initialized amplify project, provide your introspection schema named schema.json in the same directory that you make the add codegen call from.\nNote: If you use the --apiId flag to add an externally created AppSync API, such as one created in the AWS console, you will not be able to manage this API from the Amplify CLI with commands such as amplify api update when performing schema updates. You cannot add an external AppSync API when outside of an initialized project."
  },
  {
    "objectID": "Client code generation-5",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify configure codegen",
    "depth": 3,
    "text": "The amplify configure codegen command allows you to update the codegen configuration after it is added to your project. When outside of an initialized project, you can use this to update your project configuration as well as the codegen configuration."
  },
  {
    "objectID": "Client code generation-6",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify codegen statements",
    "depth": 4,
    "text": "The amplify codegen statements command  generates GraphQL statements(queries, mutation and subscription) based on your GraphQL schema. This command downloads introspection schema every time it is run, but it can be forced to use previously downloaded introspection schema by passing --nodownload flag."
  },
  {
    "objectID": "Client code generation-7",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify codegen types",
    "depth": 4,
    "text": "The amplify codegen types [--nodownload] command generates GraphQL types for Flow and typescript and Swift class in an iOS project. This command downloads introspection schema every time it is run, but it can be forced to use previously downloaded introspection schema by passing --nodownload flag."
  },
  {
    "objectID": "Client code generation-8",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify codegen",
    "depth": 4,
    "text": "The amplify codegen [--nodownload] generates GraphQL statements and types. This command downloads introspection schema every time it is run but it can be forced to use previously downloaded introspection schema by passing --nodownload flag. If you are running codegen outside of an initialized amplify project, the introspection schema named schema.json must be in the same directory that you run amplify codegen from. This command will not download the introspection schema when outside of an amplify project - it will only use the introspection schema provided."
  },
  {
    "objectID": "Client code generation-9",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "The design of codegen functionality provides mechanisms to run at different points in your app development lifecycle, including when you create or update an API as well as independently when you want to just update the data fetching requirements of your app but leave your API alone. It additionally allows you to work in a team where the schema is updated or managed by another person. Finally, you can also include the codegen in your build process so that it runs automatically (such as from in Xcode)."
  },
  {
    "objectID": "Client code generation-10",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "Flow 1: Create API then automatically generate code"
  },
  {
    "objectID": "Client code generation-11",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "You’ll see questions as before, but now it will also automatically ask you if you want to generate GraphQL statements and do codegen. It will also respect the ./app/src/main directory for Android projects. After the AppSync deployment finishes the Swift file will be automatically generated (Android you’ll need to kick off a Gradle Build step) and you can begin using in your app immediately."
  },
  {
    "objectID": "Client code generation-12",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "Flow 2: Modify GraphQL schema, push, then automatically generate code"
  },
  {
    "objectID": "Client code generation-13",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "During development, you might wish to update your GraphQL schema and generated code as part of an iterative dev/test cycle. Modify & save your schema in amplify/backend/api/<apiname>/schema.graphql then run:"
  },
  {
    "objectID": "Client code generation-14",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "Each time you will be prompted to update the code in your API and also ask you if you want to run codegen again as well, including regeneration of the GraphQL statements from the new schema."
  },
  {
    "objectID": "Client code generation-15",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "Flow 3: No API changes, just update GraphQL statements & generate code"
  },
  {
    "objectID": "Client code generation-16",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "One of the benefits of GraphQL is the client can define it's data fetching requirements independently of the API. Amplify codegen supports this by allowing you to modify the selection set (e.g. add/remove fields inside the curly braces) for the GraphQL statements and running type generation again. This gives you fine-grained control over the network requests that your application is making. Modify your GraphQL statements (default in the ./graphql folder unless you changed it) then save the files and run:"
  },
  {
    "objectID": "Client code generation-17",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "A new updated Swift file will be created (or run Gradle Build on Android for the same). You can then use the updates in your application code."
  },
  {
    "objectID": "Client code generation-18",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "Flow 4: Shared schema, modified elsewhere (e.g. console or team workflows)"
  },
  {
    "objectID": "Client code generation-19",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "Suppose you are working in a team and the schema is updated either from the AWS AppSync console or on another system. Your types are now out of date because your GraphQL statement was generated off an outdated schema. The easiest way to resolve this is to regenerate your GraphQL statements, update them if necessary, and then generate your types again. Modify the schema in the console or on a separate system, then run:"
  },
  {
    "objectID": "Client code generation-20",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "You should have newly generated GraphQL statements and Swift code that matches the schema updates. If you ran the second command your types will be updated as well. Alternatively, if you run amplify codegen alone it will perform both of these actions."
  },
  {
    "objectID": "Client code generation-21",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "Flow 5: Introspection Schema outside of an initialized project"
  },
  {
    "objectID": "Client code generation-22",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "If you would like to generate statements and types without initializing an amplify project, you can do so by providing your introspection schema named schema.json in your project directory and adding codegen from the same directory. To download your introspection schema from an AppSync api, in the AppSync console go to the schema editor and under \"Export schema\" choose schema.json."
  },
  {
    "objectID": "Client code generation-23",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "Once codegen has been added you can update your introspection schema, then generate statements and types again without re-entering your project information."
  },
  {
    "objectID": "Client code generation-24",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Workflows",
    "depth": 2,
    "text": "You can update your project and codegen configuration if required."
  },
  {
    "objectID": "Client code generation-25",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "iOS usage",
    "depth": 2,
    "text": "This section will walk through the steps needed to take an iOS project written in Swift and add Amplify to it along with a GraphQL API using AWS AppSync. If you are a first time user, we recommend starting with a new Xcode project and a single View Controller."
  },
  {
    "objectID": "Client code generation-26",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "After completing the Amplify Getting Started navigate in your terminal to an Xcode project directory and run the following:"
  },
  {
    "objectID": "Client code generation-27",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "The add api flow above will ask you some questions, like if you already have an annotated GraphQL schema. If this is your first time using the CLI select No and let it guide you through the default project \"Single object with fields (e.g., “Todo” with ID, name, description)\" as it will be used in the code generation examples below. Later on, you can always change it."
  },
  {
    "objectID": "Client code generation-28",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "Since you added an API the amplify push process will automatically prompt you to enter the codegen process and walk through the configuration options. Accept the defaults and it will create a file named API.swift in your root directory (unless you choose to name it differently) as well as a directory called graphql with your documents. You also will have an awsconfiguration.json file that the AppSync client will use for initialization."
  },
  {
    "objectID": "Client code generation-29",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "Next, modify your Podfile with a dependency of the AWS AppSync SDK:"
  },
  {
    "objectID": "Client code generation-30",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "Run pod install from your terminal and open up the *.xcworkspace Xcode project. Add the API.swift and awsconfiguration.json files to your project (File->Add Files to ..->Add) and then build your project ensuring there are no issues."
  },
  {
    "objectID": "Client code generation-31",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Initialize the AppSync client",
    "depth": 3,
    "text": "Inside your application delegate is the best place to initialize the AppSync client. The AWSAppSyncServiceConfig represents the configuration information present in awsconfiguration.json file. By default, the information under the Default section will be used. You will need to create an AWSAppSyncClientConfiguration and AWSAppSyncClient like below:"
  },
  {
    "objectID": "Client code generation-32",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Initialize the AppSync client",
    "depth": 3,
    "text": "Next, in your application code where you wish to use the AppSync client, such in a Todos class which is bound to your View Controller, you need to reference this in the viewDidLoad() lifecycle method:"
  },
  {
    "objectID": "Client code generation-33",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Queries",
    "depth": 3,
    "text": "Now that the backend is configured, you can run a GraphQL query. The syntax is appSyncClient?.fetch(query: <NAME>Query() {(result, error)}) where <NAME> comes from the GraphQL statements that amplify codegen types created. For example, if you have a ListTodos query your code will look like the following:"
  },
  {
    "objectID": "Client code generation-34",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Queries",
    "depth": 3,
    "text": "Optionally, you can set a cache policy on the query like so:"
  },
  {
    "objectID": "Client code generation-35",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Queries",
    "depth": 3,
    "text": "returnCacheDataAndFetch will pull results from the local cache first before retrieving data over the network. This gives a snappy UX as well as offline support."
  },
  {
    "objectID": "Client code generation-36",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Mutations",
    "depth": 3,
    "text": "For adding data now you will need to run a GraphQL mutation. The syntax appSyncClient?.perform(mutation: <NAME>Mutation() {(result, error)}) where <NAME> comes from the GraphQL statements that amplify codegen types created. However, most GraphQL schemas organize mutations with an input type for maintainability, which is what the Amplify CLI does as well. Therefore you'll pass this as a parameter called input as in the example below:"
  },
  {
    "objectID": "Client code generation-37",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Subscriptions",
    "depth": 3,
    "text": "Finally it's time to setup a subscription to realtime data. The syntax appSyncClient?.subscribe(subscription: <NAME>Subscription() {(result, transaction, error)}) where <NAME> comes from the GraphQL statements that amplify codegen types created."
  },
  {
    "objectID": "Client code generation-38",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Subscriptions",
    "depth": 3,
    "text": "Subscriptions can also take input types like mutations, in which case they will be subscribing to particular events based on the input. Learn more about Subscription arguments in AppSync here."
  },
  {
    "objectID": "Client code generation-39",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Complete Sample",
    "depth": 3,
    "text": "AppDelegate.swift"
  },
  {
    "objectID": "Client code generation-40",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Complete Sample",
    "depth": 3,
    "text": "ViewController.swift"
  },
  {
    "objectID": "Client code generation-41",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Android usage",
    "depth": 2,
    "text": "This section will walk through the steps needed to take an Android Studio project written in Java and add Amplify to it along with a GraphQL API using AWS AppSync. If you are a first time user, we recommend starting with a new Android Studio project and a single Activity class."
  },
  {
    "objectID": "Client code generation-42",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "After completing the Amplify Getting Started navigate in your terminal to an Android Studio project directory and run the following:"
  },
  {
    "objectID": "Client code generation-43",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "The add api flow above will ask you some questions, like if you already have an annotated GraphQL schema. If this is your first time using the CLI select No and let it guide you through the default project \"Single object with fields (e.g., “Todo” with ID, name, description)\" as it will be used in the code generation examples below. Later on, you can always change it."
  },
  {
    "objectID": "Client code generation-44",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "Since you added an API the amplify push process will automatically enter the codegen process and prompt you for configuration. Accept the defaults and it will create a file named awsconfiguration.json in the ./app/src/main/res/raw  directory that the AppSync client will use for initialization. To finish off the build process there are Gradle and permission updates needed."
  },
  {
    "objectID": "Client code generation-45",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "First, in the project's build.gradle, add the following dependency in the build script:"
  },
  {
    "objectID": "Client code generation-46",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "Next, in the app's build.gradle add in a plugin of apply plugin: 'com.amazonaws.appsync' and a dependency of implementation 'com.amazonaws:aws-android-sdk-appsync:2.6.+'. For example:"
  },
  {
    "objectID": "Client code generation-47",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "Finally, update your AndroidManifest.xml with updates to <uses-permissions>for network calls and offline state. Also add a <service> entry under <application> for MqttService for subscriptions:"
  },
  {
    "objectID": "Client code generation-48",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup",
    "depth": 3,
    "text": "Build your project ensuring there are no issues."
  },
  {
    "objectID": "Client code generation-49",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Initialize the AppSync client",
    "depth": 3,
    "text": "Inside your application code, such as the onCreate() lifecycle method of your activity class, you can initialize the AppSync client using an instance of AWSConfiguration() in the AWSAppSyncClient builder. This reads configuration information present in the awsconfiguration.json file. By default, the information under the Default section will be used."
  },
  {
    "objectID": "Client code generation-50",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Queries",
    "depth": 3,
    "text": "Now that the backend is configured, you can run a GraphQL query. The syntax of the callback is GraphQLCall.Callback<{NAME>Query.Data> where {NAME} comes from the GraphQL statements that amplify codegen types created. You will invoke this from an instance of the AppSync client with a similar syntax of .query(<NAME>Query.builder().build()). For example, if you have a ListTodos query your code will look like the following:"
  },
  {
    "objectID": "Client code generation-51",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Queries",
    "depth": 3,
    "text": "You can optionally change the cache policy on AppSyncResponseFetchers but we recommend leaving CACHE_AND_NETWORK as it will pull results from the local cache first before retrieving data over the network. This gives a snappy UX as well as offline support."
  },
  {
    "objectID": "Client code generation-52",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Mutations",
    "depth": 3,
    "text": "For adding data now you will need to run a GraphQL mutation. The syntax of the callback is GraphQLCall.Callback<{NAME}Mutation.Data> where {NAME} comes from the GraphQL statements that amplify codegen types created. However, most GraphQL schemas organize mutations with an input type for maintainability, which is what the Amplify CLI does as well. Therefore you'll pass this as a parameter called input created with a second builder. You will invoke this from an instance of the AppSync client with a similar syntax of .mutate({NAME}Mutation.builder().input({Name}Input).build()) like so:"
  },
  {
    "objectID": "Client code generation-53",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Subscriptions",
    "depth": 3,
    "text": "Finally, it's time to set up a subscription to real-time data. The callback is just AppSyncSubscriptionCall.Callback and you invoke it with a client .subscribe() call and pass in a builder with the syntax of {NAME}Subscription.builder() where {NAME} comes from the GraphQL statements that amplify codegen types created. Note that the Amplify GraphQL transformer has a common nomenclature of putting the word On in front of a subscription like the below example:"
  },
  {
    "objectID": "Client code generation-54",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Subscriptions",
    "depth": 3,
    "text": "Subscriptions can also take input types like mutations, in which case they will be subscribing to particular events based on the input. Learn more about Subscription arguments in AppSync here."
  },
  {
    "objectID": "Client code generation-55",
    "title": "Client code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli-legacy/graphql-transformer/codegen",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Sample",
    "depth": 3,
    "text": "MainActivity.java"
  },
  {
    "objectID": "Relational Databases-0",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. The following instruction show how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it."
  },
  {
    "objectID": "Relational Databases-1",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "First, if you do not have an Amplify project with a GraphQL API create one using these simple commands."
  },
  {
    "objectID": "Relational Databases-2",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Go to the AWS RDS console and click \"Create database\"."
  },
  {
    "objectID": "Relational Databases-3",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Select \"Standard Create\" for the database creation method"
  },
  {
    "objectID": "Relational Databases-5",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For Engine Options keep the following options"
  },
  {
    "objectID": "Relational Databases-7",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Select \"Serverless\" in Database Features"
  },
  {
    "objectID": "Relational Databases-9",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In Settings fill in the following information"
  },
  {
    "objectID": "Relational Databases-11",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Select the Capacity Settings as shown below"
  },
  {
    "objectID": "Relational Databases-13",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Expand the \"Additional connectivity configuration\" and enable \"Data API\" and \"Create New\" if you do not have a VPC security group configured"
  },
  {
    "objectID": "Relational Databases-15",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Expand \"Additional Configuration\" and fill in \"Initial Database Name\" as MarketPlace"
  },
  {
    "objectID": "Relational Databases-17",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Click Create Database. Once created, click Query Editor on the side menu to open a connection prompt. To connect, select the cluster and fill in the credentials configured earlier."
  },
  {
    "objectID": "Relational Databases-19",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "After connecting, create a database and some tables."
  },
  {
    "objectID": "Relational Databases-21",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Return to your command line and run amplify api add-graphql-datasource from the root of your amplify project."
  },
  {
    "objectID": "Relational Databases-23",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Push your project to AWS with amplify push."
  },
  {
    "objectID": "Relational Databases-24",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run amplify push to push your project to AWS. You can then open the AppSync console with amplify api console, to try interacting with your RDS database via your GraphQL API."
  },
  {
    "objectID": "Relational Databases-25",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Interact with your SQL database from GraphQL"
  },
  {
    "objectID": "Relational Databases-26",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Your API is now configured to work with your serverless Amazon Aurora MySQL database. Try running a mutation to create a customer from the AppSync Console and then query it from the RDS Console to double check."
  },
  {
    "objectID": "Relational Databases-27",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a customer:"
  },
  {
    "objectID": "Relational Databases-29",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Then open the RDS console and run a simple select statement to see the new customer:"
  },
  {
    "objectID": "Relational Databases-31",
    "title": "Relational Databases",
    "description": "The Amplify CLI currently supports importing serverless Amazon Aurora MySQL 5.6 databases running in the us-east-1 region. Learn how to create an Amazon Aurora Serverless database, import this database as a GraphQL data source and test it.",
    "slug": "/cli-legacy/graphql-transformer/relational",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How does this work?",
    "depth": 3,
    "text": "The add-graphql-datasource will add a custom stack to your project that provides a basic set of functionality for working with an existing data source. You can find the new stack in the stacks/ directory, a set of new resolvers in the resolvers/ directory, and will also find a few additions to your schema.graphql. You may edit details in the custom stack and/or resolver files without worry. You may run add-graphql-datasource again to update your project with changes in the database but be careful as these will overwrite any existing templates in the stacks/ or resolvers/ directories. When using multiple environment with the Amplify CLI, you will be asked to configure the data source once per environment."
  },
  {
    "objectID": "GraphQL transform and Storage-0",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application."
  },
  {
    "objectID": "GraphQL transform and Storage-1",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: Complex objects are not supported by DataStore-enabled GraphQL APIs."
  },
  {
    "objectID": "GraphQL transform and Storage-2",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Basics",
    "depth": 3,
    "text": "At a minimum the steps to add S3 Object support are as follows:"
  },
  {
    "objectID": "GraphQL transform and Storage-3",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Basics",
    "depth": 3,
    "text": "Create a Amazon S3 bucket to hold files via amplify add storage."
  },
  {
    "objectID": "GraphQL transform and Storage-4",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Basics",
    "depth": 3,
    "text": "Create a user pool in Amazon Cognito User Pools via amplify add auth."
  },
  {
    "objectID": "GraphQL transform and Storage-5",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Basics",
    "depth": 3,
    "text": "Create a GraphQL API via amplify add api and add the following type definition:"
  },
  {
    "objectID": "GraphQL transform and Storage-6",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Basics",
    "depth": 3,
    "text": "Reference the S3Object type from some @model type:"
  },
  {
    "objectID": "GraphQL transform and Storage-7",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Basics",
    "depth": 3,
    "text": "The GraphQL Transform handles creating the relevant input types and will store pointers to S3 objects in Amazon DynamoDB. The AppSync SDKs and Amplify library handle uploading the files to S3 transparently."
  },
  {
    "objectID": "GraphQL transform and Storage-8",
    "title": "GraphQL transform and Storage",
    "description": "The GraphQL Transform, Amplify CLI, and Amplify Library make it simple to add complex object support with Amazon S3 to an application.",
    "slug": "/cli-legacy/graphql-transformer/storage",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Basics",
    "depth": 3,
    "text": "Run a mutation with S3 objects from your client app:"
  },
  {
    "objectID": "Data access patterns-0",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In the DynamoDB documentation for modeling relational data in a NoSQL database, there is an in depth example of 17 access patterns from the First Steps for Modeling Relational Data in DynamoDB page."
  },
  {
    "objectID": "Data access patterns-1",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "| | Most common/import access patterns in our organization|\n|---|--------------|\n|1| Look up employee details by employee ID|\n|2| Query employee details by employee name|\n|3| Find an employee's phone number(s)|\n|4| Find a customer's phone number(s)|\n|5| Get orders for a given customer within a given date range|\n|6| Show all open orders within a given date range across all customers|\n|7| See all employees recently hired|\n|8| Find all employees working in a given warehouse|\n|9| Get all items on order for a given product|\n|10| Get current inventories for a given product at all warehouses|\n|11| Get customers by account representative|\n|12| Get orders by account representative and date|\n|13| Get all items on order for a given product|\n|14| Get all employees with a given job title|\n|15| Get inventory by product and warehouse|\n|16| Get total product inventory|\n|17| Get account representatives ranked by order total and sales period|"
  },
  {
    "objectID": "Data access patterns-2",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this example, you will learn how to support these data access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library. This example has the following types:"
  },
  {
    "objectID": "Data access patterns-3",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Warehouse"
  },
  {
    "objectID": "Data access patterns-4",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Product"
  },
  {
    "objectID": "Data access patterns-5",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Inventory"
  },
  {
    "objectID": "Data access patterns-6",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Employee"
  },
  {
    "objectID": "Data access patterns-7",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AccountRepresentative"
  },
  {
    "objectID": "Data access patterns-8",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Customer"
  },
  {
    "objectID": "Data access patterns-9",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The following schema introduces the required keys and connections so that we can support these access patterns:"
  },
  {
    "objectID": "Data access patterns-10",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Now that we have the schema created, let's create the items in the database that we will be operating against:"
  },
  {
    "objectID": "Data access patterns-11",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "1. Look up employee details by employee ID",
    "depth": 2,
    "text": "This can simply be done by querying the employee model with an employee ID, no @key or @connection is needed to make this work."
  },
  {
    "objectID": "Data access patterns-12",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "2. Query employee details by employee name",
    "depth": 2,
    "text": "The @key byName on the Employee type makes this access-pattern feasible because under the covers an index is created and a query is used to match against the name field. We can use this query:"
  },
  {
    "objectID": "Data access patterns-13",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "3. Find an Employee’s phone number",
    "depth": 2,
    "text": "Either one of the previous queries would work to find an employee’s phone number as long as one has their ID or name."
  },
  {
    "objectID": "Data access patterns-14",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "4. Find a customer’s phone number",
    "depth": 2,
    "text": "A similar query to those given above but on the Customer model would give you a customer’s phone number."
  },
  {
    "objectID": "Data access patterns-15",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "5. Get orders for a given customer within a given date range",
    "depth": 2,
    "text": "There is a one-to-many relation that lets all the orders of a customer be queried."
  },
  {
    "objectID": "Data access patterns-16",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "5. Get orders for a given customer within a given date range",
    "depth": 2,
    "text": "This relationship is created by having the @key name byCustomerByDate on the Order model that is queried by the connection on the orders field of the Customer model."
  },
  {
    "objectID": "Data access patterns-17",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "5. Get orders for a given customer within a given date range",
    "depth": 2,
    "text": "A sort key with the date is used. What this means is that the GraphQL resolver can use predicates like Between to efficiently search the date range rather than scanning all records in the database and then filtering them out."
  },
  {
    "objectID": "Data access patterns-18",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "5. Get orders for a given customer within a given date range",
    "depth": 2,
    "text": "The query one would need to get the orders to a customer within a date range would be:"
  },
  {
    "objectID": "Data access patterns-19",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "6. Show all open orders within a given date range across all customers",
    "depth": 2,
    "text": "The @key byCustomerByStatusByDate enables you to run a query that would work for this access pattern."
  },
  {
    "objectID": "Data access patterns-20",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "6. Show all open orders within a given date range across all customers",
    "depth": 2,
    "text": "In this example, a composite sort key (combination of two or more keys) with the status and date is used. What this means is that the unique identifier of a record in the database is created by concatenating these two fields (status and date) together, and then the GraphQL resolver can use predicates like Between or Contains to efficiently search the unique identifier for matches rather than scanning all records in the database and then filtering them out."
  },
  {
    "objectID": "Data access patterns-21",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "7. See all employees hired recently",
    "depth": 2,
    "text": "Having @key(name: \"newHire\", fields: [\"newHire\", \"id\"]) on the Employee model allows one to query by whether an employee has been hired recently."
  },
  {
    "objectID": "Data access patterns-22",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "7. See all employees hired recently",
    "depth": 2,
    "text": "We can also query and have the results returned by start date by using the employeesNewHireByStartDate query:"
  },
  {
    "objectID": "Data access patterns-23",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "8. Find all employees working in a given warehouse",
    "depth": 2,
    "text": "This needs a one to many relationship from warehouses to employees. As can be seen from the @connection in the Warehouse model, this connection uses the byWarehouse key on the Employee model. The relevant query would look like this:"
  },
  {
    "objectID": "Data access patterns-24",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "9. Get all items on order for a given product",
    "depth": 2,
    "text": "This access-pattern would use a one-to-many relation from products to orders. With this query we can get all orders of a given product:"
  },
  {
    "objectID": "Data access patterns-25",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "10. Get current inventories for a product at all warehouses",
    "depth": 2,
    "text": "The query needed to get the inventories of a product in all warehouses would be:"
  },
  {
    "objectID": "Data access patterns-26",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "11. Get customers by account representative",
    "depth": 2,
    "text": "This uses a one-to-many connection between account representatives and customers:"
  },
  {
    "objectID": "Data access patterns-27",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "11. Get customers by account representative",
    "depth": 2,
    "text": "The query needed would look like this:"
  },
  {
    "objectID": "Data access patterns-28",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "12. Get orders by account representative and date",
    "depth": 2,
    "text": "As can be seen in the AccountRepresentative model this connection uses the byRepresentativebyDate field on the Order model to create the connection needed. The query needed would look like this:"
  },
  {
    "objectID": "Data access patterns-29",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "13. Get all items on order for a given product",
    "depth": 2,
    "text": "This is the same as number 9."
  },
  {
    "objectID": "Data access patterns-30",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "14. Get all employees with a given job title",
    "depth": 2,
    "text": "Using the byTitle @key makes this access pattern quite easy."
  },
  {
    "objectID": "Data access patterns-31",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "15. Get inventory by product by warehouse",
    "depth": 2,
    "text": "Here having the inventories be held in a separate model is particularly useful since this model can have its own partition key and sort key such that the inventories themselves can be queried as is needed for this access-pattern."
  },
  {
    "objectID": "Data access patterns-32",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "15. Get inventory by product by warehouse",
    "depth": 2,
    "text": "A query on this model would look like this:"
  },
  {
    "objectID": "Data access patterns-33",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "15. Get inventory by product by warehouse",
    "depth": 2,
    "text": "We can also get all inventory from an individual warehouse by using the itemsByWarehouseID query created by the byWarehouseID key:"
  },
  {
    "objectID": "Data access patterns-34",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "16. Get total product inventory",
    "depth": 2,
    "text": "How this would be done depends on the use case. If one just wants a list of all inventories in all warehouses, one could just run a list inventories on the Inventory model:"
  },
  {
    "objectID": "Data access patterns-35",
    "title": "Data access patterns",
    "description": "Learn how to support these 17 common database access patterns using GraphQL, AWS Amplify, and the GraphQL Transform library",
    "slug": "/cli-legacy/graphql-transformer/dataaccess",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "17. Get sales representatives ranked by order total and sales period",
    "depth": 2,
    "text": "The sales period is either a date range or maybe even a month or week. Therefore we can set the sales period as a string and query using the combination of salesPeriod and orderTotal. We can also set the sortDirection in order to get the return values from largest to smallest:"
  },
  {
    "objectID": "Versioning and conflict resolution-0",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@versioned",
    "depth": 2,
    "text": "The @versioned directive adds object versioning and conflict resolution to a type. Do not use this directive when leveraging DataStore as the conflict detection and resolution features are automatically handled inside AppSync and are incompatible with the @versioned directive."
  },
  {
    "objectID": "Versioning and conflict resolution-1",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@versioned",
    "depth": 2,
    "text": "Note that @versioned is only supported in client code (statement and types) generated via AppSync codegen.\n@versioned is not supported by models generated via amplify codegen models.\nUse Amplify DataStore instead of @versioned to provide offline app data access with built-in conflict-resolution."
  },
  {
    "objectID": "Versioning and conflict resolution-2",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Add @versioned to a type that is also annotate with @model to enable object versioning and conflict detection for a type."
  },
  {
    "objectID": "Versioning and conflict resolution-3",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Creating a Post automatically sets the version to 1"
  },
  {
    "objectID": "Versioning and conflict resolution-4",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Updating a Post requires passing the \"expectedVersion\" which is the object's last saved version"
  },
  {
    "objectID": "Versioning and conflict resolution-5",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Note: When updating an object, the version number will automatically increment."
  },
  {
    "objectID": "Versioning and conflict resolution-6",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Deleting a Post requires passing the \"expectedVersion\" which is the object's last saved version"
  },
  {
    "objectID": "Versioning and conflict resolution-7",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Update and delete operations will fail if the expectedVersion does not match the version\nstored in DynamoDB. You may change the default name of the version field on the type as well as the name\nof the input field via the versionField and versionInput arguments on the @versioned directive."
  },
  {
    "objectID": "Versioning and conflict resolution-8",
    "title": "Versioning and conflict resolution",
    "description": "The @versioned directive adds object versioning and conflict resolution to a type.",
    "slug": "/cli-legacy/graphql-transformer/versioned",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "The @versioned directive manipulates resolver mapping templates and will store a version field in versioned objects."
  },
  {
    "objectID": "Make your data searchable-0",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@searchable",
    "depth": 2,
    "text": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information."
  },
  {
    "objectID": "Make your data searchable-1",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@searchable",
    "depth": 2,
    "text": "Migration warning: You might observe duplicate records on search operations, if you deployed your GraphQL schema using CLI version older than 4.14.1 and have thereafter updated your schema & deployed the changes with a CLI version between 4.14.1 - 4.16.1.\nPlease use this Python script to remove the duplicate records from your OpenSearch cluster. This script indexes data from your DynamoDB Table to your OpenSearch Cluster. View an example of how to call the script with the following parameters here."
  },
  {
    "objectID": "Make your data searchable-2",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@searchable",
    "depth": 2,
    "text": "Billing warning: @searchable incurs an additional cost depending on instance size. For more information refer to the Amazon OpenSearch service pricing."
  },
  {
    "objectID": "Make your data searchable-3",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Given the following schema an index is created for Post, if there are more types with @searchable the directive will create an index for it, and those posts in Amazon DynamoDB are automatically streamed to the post index in Amazon OpenSearch via AWS Lambda and connect a searchQueryField resolver."
  },
  {
    "objectID": "Make your data searchable-4",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You may then create objects in DynamoDB that will be automatically streamed to lambda\nusing the normal createPost mutation."
  },
  {
    "objectID": "Make your data searchable-5",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "And then search for posts using a match query:"
  },
  {
    "objectID": "Make your data searchable-6",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "There are multiple SearchableTypes generated in the schema, based on the datatype of the fields you specify in the Post type."
  },
  {
    "objectID": "Make your data searchable-7",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The filter parameter in the search query has a searchable type field that corresponds to the field listed in the Post type. For example, the title field of the filter object, has the following properties (containing the operators that are applicable to the string type):"
  },
  {
    "objectID": "Make your data searchable-8",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "eq - which uses the OpenSearch keyword type to match for the exact term."
  },
  {
    "objectID": "Make your data searchable-9",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "ne - this is the inverse operation of eq."
  },
  {
    "objectID": "Make your data searchable-10",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "matchPhrase - searches using OpenSearch's Match Phrase Query to filter the documents in the search query."
  },
  {
    "objectID": "Make your data searchable-11",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "matchPhrasePrefix - This uses OpenSearch's Match Phrase Prefix Query to filter the documents in the search query."
  },
  {
    "objectID": "Make your data searchable-12",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "multiMatch - Corresponds to the OpenSearch Multi Match Query."
  },
  {
    "objectID": "Make your data searchable-13",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "exists - Corresponds to the OpenSearch Exists Query."
  },
  {
    "objectID": "Make your data searchable-14",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "wildcard - Corresponds to the OpenSearch Wildcard Query."
  },
  {
    "objectID": "Make your data searchable-15",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "regexp - Corresponds to the OpenSearch Regexp Query."
  },
  {
    "objectID": "Make your data searchable-16",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The sort parameter can be used to specify the order of the search results, can be ascending (asc) or descending (desc), if not specified ascending order is used."
  },
  {
    "objectID": "Make your data searchable-17",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The limit parameter controls the number of search results returned. If not specified the default value is 100."
  },
  {
    "objectID": "Make your data searchable-18",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "For example, you can filter using the wildcard expression to search for posts using the following wildcard query:"
  },
  {
    "objectID": "Make your data searchable-19",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The above query returns all documents whose title begins with S and ends with OpenSearch!."
  },
  {
    "objectID": "Make your data searchable-20",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Moreover you can use the filter parameter to pass a nested and/or/not condition. By default, every operation in the filter properties is AND ed. You can use the or or not properties in the filter parameter of the search query to override this behavior. Each of these operators (and, or, not properties in the filter object) accepts an array of searchable types which are in turn joined by the corresponding operator. For example, consider the following search query:"
  },
  {
    "objectID": "Make your data searchable-21",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Assuming you used the createPost mutation to create new posts with title, createdAt and updatedAt values, the above search query will return you a list of all Posts, whose title starts with S and have createdAt or updatedAt value as 08/20/2018."
  },
  {
    "objectID": "Make your data searchable-22",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Here is a complete list of searchable operations per GraphQL type supported as of today:"
  },
  {
    "objectID": "Make your data searchable-23",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "| GraphQL Type        | Searchable Operation           |\n|-------------:|:-------------|\n| String      | ne, eq, match, matchPhrase, matchPhrasePrefix, multiMatch, exists, wildcard, regexp |\n| Int     | ne, gt, lt, gte, lte, eq, range      |\n| Float | ne, gt, lt, gte, lte, eq, range      |\n| Boolean | eq, ne      |"
  },
  {
    "objectID": "Make your data searchable-24",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Known limitations",
    "depth": 3,
    "text": "@searchable is not compatible with DataStore but you can use it with the API category."
  },
  {
    "objectID": "Make your data searchable-25",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Known limitations",
    "depth": 3,
    "text": "@searchable is not compatible with Amazon ElasticSearch t2.micro instance as it only works with ElasticSearch version 1.5 and 2.3 and Amplify CLI only supports instances with ElasticSearch version >= 6.x."
  },
  {
    "objectID": "Make your data searchable-26",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Known limitations",
    "depth": 3,
    "text": "@searchable is not compatible with the @connection directive"
  },
  {
    "objectID": "Make your data searchable-27",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Known limitations",
    "depth": 3,
    "text": "Support for adding the @searchable directive does not yet provide automatic indexing for any existing data to OpenSearch. View the feature request here."
  },
  {
    "objectID": "Make your data searchable-28",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Known limitations",
    "depth": 3,
    "text": "t2.small OpenSearch instance type is not recommended to be used in a production environment."
  },
  {
    "objectID": "Make your data searchable-29",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure environment OpenSearch instance type",
    "depth": 3,
    "text": "By default Amplify CLI will configure a t2.small instance type. This is great for getting started and prototyping BUT not recommended to be used in the production environment per the OpenSearch best practices.\nYou can configure the OpenSearch instance type per environment as follows:"
  },
  {
    "objectID": "Make your data searchable-30",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure environment OpenSearch instance type",
    "depth": 3,
    "text": "Run amplify env add to create a new environment (e.g. \"prod\")"
  },
  {
    "objectID": "Make your data searchable-31",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure environment OpenSearch instance type",
    "depth": 3,
    "text": "Edit the amplify/team-provider-info.json file and set ElasticSearchInstanceType to the instance type that works for your application"
  },
  {
    "objectID": "Make your data searchable-32",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure environment OpenSearch instance type",
    "depth": 3,
    "text": "Deploy your changes with amplify push"
  },
  {
    "objectID": "Make your data searchable-33",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure environment OpenSearch instance type",
    "depth": 3,
    "text": "Learn more about Amazon OpenSearch Service instance types here."
  },
  {
    "objectID": "Make your data searchable-34",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Backfill your OpenSearch index from your DynamoDB table",
    "depth": 3,
    "text": "The following Python script creates an event stream of your DynamoDB records and sends them to your OpenSearch Index. This will help you backfill your data should you choose to add @searchable to your @model types at a later time."
  },
  {
    "objectID": "Make your data searchable-35",
    "title": "Make your data searchable",
    "description": "The @searchable directive handles streaming the data of an @model object type to the Amazon OpenSearch Service and configures search resolvers that search that information.",
    "slug": "/cli-legacy/graphql-transformer/searchable",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Backfill your OpenSearch index from your DynamoDB table",
    "depth": 3,
    "text": "Example of calling the script:"
  },
  {
    "objectID": "Connect machine learning services-0",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@predictions",
    "depth": 2,
    "text": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly."
  },
  {
    "objectID": "Connect machine learning services-1",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@predictions",
    "depth": 2,
    "text": "Note: Support for adding the @predictions directive uses the s3 storage bucket which is configured via the CLI. At the moment this directive works only with objects located within public/."
  },
  {
    "objectID": "Connect machine learning services-2",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Definition",
    "depth": 3,
    "text": "The supported actions in this directive are included in the definition."
  },
  {
    "objectID": "Connect machine learning services-3",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Given the following schema a query operation is defined which will do the following with the provided image."
  },
  {
    "objectID": "Connect machine learning services-4",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Identify text from the image"
  },
  {
    "objectID": "Connect machine learning services-5",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Translate the text from that image"
  },
  {
    "objectID": "Connect machine learning services-6",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Synthesize speech from the translated text."
  },
  {
    "objectID": "Connect machine learning services-7",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "An example of that query will look like:"
  },
  {
    "objectID": "Connect machine learning services-8",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "A code example of this using the JS Library:"
  },
  {
    "objectID": "Connect machine learning services-9",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "From example schema above, @predictions will create resources to communicate with Amazon Rekognition, Translate and Polly.\nFor each action the following is created:"
  },
  {
    "objectID": "Connect machine learning services-10",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "IAM Policy for each service (e.g. Amazon Rekognition detectText Policy)"
  },
  {
    "objectID": "Connect machine learning services-11",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "An AppSync VTL function"
  },
  {
    "objectID": "Connect machine learning services-12",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "An AppSync DataSource"
  },
  {
    "objectID": "Connect machine learning services-13",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "Finally a resolver is created for speakTranslatedImageText which is a pipeline resolver composed of AppSync functions which are defined by the action list provided in the directive."
  },
  {
    "objectID": "Connect machine learning services-14",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Actions",
    "depth": 3,
    "text": "Each of the actions described in the @predictions definition section can be used individually, as well as in a sequence. Sequence of actions supported today are as follows:"
  },
  {
    "objectID": "Connect machine learning services-15",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Actions",
    "depth": 3,
    "text": "identifyText -> translateText -> convertTextToSpeech"
  },
  {
    "objectID": "Connect machine learning services-16",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Actions",
    "depth": 3,
    "text": "identifyLabels -> translateText -> convertTextToSpeech"
  },
  {
    "objectID": "Connect machine learning services-17",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Actions",
    "depth": 3,
    "text": "translateText -> convertTextToSpeech"
  },
  {
    "objectID": "Connect machine learning services-18",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Action resources",
    "depth": 3,
    "text": "translateText Supported Language Codes"
  },
  {
    "objectID": "Connect machine learning services-19",
    "title": "Connect machine learning services",
    "description": "The @predictions directive allows you to query an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly.",
    "slug": "/cli-legacy/graphql-transformer/predictions",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Action resources",
    "depth": 3,
    "text": "convertTextToSpeech Supported Voice IDs"
  },
  {
    "objectID": "Configure HTTP resolvers-0",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@http",
    "depth": 2,
    "text": "The @http directive allows you to quickly configure HTTP resolvers within your AWS AppSync API."
  },
  {
    "objectID": "Configure HTTP resolvers-1",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The @http directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver. To connect to an endpoint, add the @http directive to a field in your schema.graphql file. The directive allows you to define URL path parameters, and specify a query string and/or specify a request body. For example, given the definition of a post type,"
  },
  {
    "objectID": "Configure HTTP resolvers-2",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Amplify generates the definition below that sends a request to the url when the listPosts query is used."
  },
  {
    "objectID": "Configure HTTP resolvers-3",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Request Headers"
  },
  {
    "objectID": "Configure HTTP resolvers-4",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The @http directive generates resolvers that can handle xml and json responses. If an HTTP method is not defined, GET is used by default. You can specify a list of static headers to be passed with the HTTP requests to your backend in your directive definition."
  },
  {
    "objectID": "Configure HTTP resolvers-5",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Path Parameters"
  },
  {
    "objectID": "Configure HTTP resolvers-6",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can create dynamic paths by specifying parameters in the directive URL by using the special :<parameter> notation. Your set of parameters can then be specified in the params input object of the query. Note that path parameters are not added to the request body or query string. You can define multiple parameters."
  },
  {
    "objectID": "Configure HTTP resolvers-7",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Given the definition"
  },
  {
    "objectID": "Configure HTTP resolvers-8",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Amplify generates"
  },
  {
    "objectID": "Configure HTTP resolvers-9",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can fetch a specific post by enclosing the id in the params input object."
  },
  {
    "objectID": "Configure HTTP resolvers-10",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "which will send"
  },
  {
    "objectID": "Configure HTTP resolvers-11",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Query String"
  },
  {
    "objectID": "Configure HTTP resolvers-12",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can send a query string with your request by specifying variables for your query. The query string is supported with all request methods."
  },
  {
    "objectID": "Configure HTTP resolvers-13",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Given the definition"
  },
  {
    "objectID": "Configure HTTP resolvers-14",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Amplify generates"
  },
  {
    "objectID": "Configure HTTP resolvers-15",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can query for posts using the query input object"
  },
  {
    "objectID": "Configure HTTP resolvers-16",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "which sends the following request:"
  },
  {
    "objectID": "Configure HTTP resolvers-17",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Request Body"
  },
  {
    "objectID": "Configure HTTP resolvers-18",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The @http directive also allows you to specify the body of a request, which is used for POST, PUT, and PATCH requests. To create a new post, you can define the following."
  },
  {
    "objectID": "Configure HTTP resolvers-19",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Amplify generates the addPost query field with the query and body input objects since this type of request also supports a query string. The generated resolver verifies that non-null arguments (e.g.: the title and description) are passed in at least one of the input objects; if not, an error is returned."
  },
  {
    "objectID": "Configure HTTP resolvers-20",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can add a post by using the body input object:"
  },
  {
    "objectID": "Configure HTTP resolvers-21",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "which will send"
  },
  {
    "objectID": "Configure HTTP resolvers-22",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Specifying the environment"
  },
  {
    "objectID": "Configure HTTP resolvers-23",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The @http directive allows you to use ${env} to reference the current Amplify CLI environment."
  },
  {
    "objectID": "Configure HTTP resolvers-24",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "which, in the DEV environment, will send"
  },
  {
    "objectID": "Configure HTTP resolvers-25",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Specifying the region"
  },
  {
    "objectID": "Configure HTTP resolvers-26",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The @http directive allows you to use ${aws_region} to reference the AWS region of your environment."
  },
  {
    "objectID": "Configure HTTP resolvers-27",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "which, in the us-east-1 region, will send"
  },
  {
    "objectID": "Configure HTTP resolvers-28",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Combining the different components"
  },
  {
    "objectID": "Configure HTTP resolvers-29",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can use a combination of parameters, query, body, headers, and environments in your @http directive definition."
  },
  {
    "objectID": "Configure HTTP resolvers-30",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Given the definition"
  },
  {
    "objectID": "Configure HTTP resolvers-31",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "you can update a post with"
  },
  {
    "objectID": "Configure HTTP resolvers-32",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "which, in the DEV environment, will send"
  },
  {
    "objectID": "Configure HTTP resolvers-33",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Advanced cases"
  },
  {
    "objectID": "Configure HTTP resolvers-34",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "In some cases, you may want to send a request based on existing field data. Take a scenario where you have a post and want to fetch comments associated with the post in a single query. Let's use the previous definition of Post and Comment."
  },
  {
    "objectID": "Configure HTTP resolvers-35",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "A post can be fetched at /posts/:id and a post's comments at /posts/:id/comments. You can fetch the comments based on the post id with the following updated definition. $ctx.source is a map that contains the resolution of the parent field (Post) and gives access to id."
  },
  {
    "objectID": "Configure HTTP resolvers-36",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can retrieve the comments of a specific post with the following query and selection set."
  },
  {
    "objectID": "Configure HTTP resolvers-37",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Assuming that getPost retrieves a post with the id POST_ID, the comments field is resolved by sending this request to the endpoint"
  },
  {
    "objectID": "Configure HTTP resolvers-38",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Note that there is no check to ensure that the reference variable (here the post ID) exists. When using this technique, it is recommended to make sure the referenced field is non-null."
  },
  {
    "objectID": "Configure HTTP resolvers-39",
    "title": "Configure HTTP resolvers",
    "description": "The `@http` directive allows you to quickly connect HTTP or HTTPS endpoint to an AppSync API by creating an AWS AppSync HTTP resolver.",
    "slug": "/cli-legacy/graphql-transformer/http",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "The @http transformer will create one HTTP datasource for each identified base URL. For example, if multiple HTTP resolvers are created that interact with the \"https://www.example.com\" endpoint, only a single datasource is created. Each directive generates one resolver. Depending on the definition, the appropriate body, params, and query input types are created. Note that @http transformer does not support calling other AWS services where Signature Version 4 signing process is required."
  },
  {
    "objectID": "Configure Lambda resolvers-0",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@function",
    "depth": 2,
    "text": "The @function directive allows you to quickly & easily configure AWS Lambda resolvers within your AWS AppSync API."
  },
  {
    "objectID": "Configure Lambda resolvers-1",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The @function directive allows you to quickly connect lambda resolvers to an AppSync API. You may deploy the AWS Lambda functions via the Amplify CLI, AWS Lambda console, or any other tool. To connect an AWS Lambda resolver, add the @function directive to a field in your schema.graphql."
  },
  {
    "objectID": "Configure Lambda resolvers-2",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Let's assume you have deployed an echo function with the following contents:"
  },
  {
    "objectID": "Configure Lambda resolvers-3",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "If you deployed your function using the function category"
  },
  {
    "objectID": "Configure Lambda resolvers-4",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The Amplify CLI provides support for maintaining multiple environments out of the box. When you deploy a function via amplify add function, it will automatically add the environment suffix to your Lambda function name. For example if you create a function named echofunction using amplify add function in the dev environment, the deployed function will be named echofunction-dev. The @function directive allows you to use ${env} to reference the current Amplify CLI environment."
  },
  {
    "objectID": "Configure Lambda resolvers-5",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "If you deployed your function without amplify"
  },
  {
    "objectID": "Configure Lambda resolvers-6",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "If you deployed your API without amplify then you must provide the full Lambda function name. If you deployed the same function with the name echofunction then you would have:"
  },
  {
    "objectID": "Configure Lambda resolvers-7",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Example: Return custom data and run custom logic"
  },
  {
    "objectID": "Configure Lambda resolvers-8",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can use the @function directive to write custom business logic in an AWS Lambda function. To get started, use\namplify add function, the AWS Lambda console, or other tool to deploy an AWS Lambda function with the following contents."
  },
  {
    "objectID": "Configure Lambda resolvers-9",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "For example purposes assume the function is named GraphQLResolverFunction:"
  },
  {
    "objectID": "Configure Lambda resolvers-10",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Example: Get the logged in user from Amazon Cognito User Pools"
  },
  {
    "objectID": "Configure Lambda resolvers-11",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "When building applications, it is often useful to fetch information for the current user. You can use the @function directive to quickly add a resolver that uses AppSync identity information to fetch a user from Amazon Cognito User Pools. First make sure you have added Amazon Cognito User Pools enabled via amplify add auth and a GraphQL API via amplify add api to an amplify project. Once you have created the user pool, get the UserPoolId from amplify-meta.json in the backend/ directory of your amplify project. You will provide this value as an environment variable in a moment. Next, using the Amplify function category, AWS console, or some other tool, deploy an AWS Lambda function with the following contents."
  },
  {
    "objectID": "Configure Lambda resolvers-12",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "For example purposes assume the function is named GraphQLResolverFunction:"
  },
  {
    "objectID": "Configure Lambda resolvers-13",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You can connect this function to your AppSync API deployed via Amplify using this schema:"
  },
  {
    "objectID": "Configure Lambda resolvers-14",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "This simple lambda function shows how you can write your own custom logic using a language of your choosing. Try enhancing the example with your own data and logic."
  },
  {
    "objectID": "Configure Lambda resolvers-15",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "When deploying the function, make sure your function has access to the auth resource. You can run the amplify update function command for the CLI to automatically supply an environment variable named AUTH_<RESOURCE_NAME>_USERPOOLID to the function and associate corresponding CRUD policies to the execution role of the function."
  },
  {
    "objectID": "Configure Lambda resolvers-16",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "After deploying our function, you can connect it to AppSync by defining some types and using the @function directive. Add this to your schema, to connect the\nQuery.echo and Query.me resolvers to our new function."
  },
  {
    "objectID": "Configure Lambda resolvers-17",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Next run amplify push and wait as your project finishes deploying. To test that everything is working as expected run amplify api console to open the GraphiQL editor for your API. You are going to need to open the Amazon Cognito User Pools console to create a user if you do not yet have any. Once you have created a user go back to the AppSync console's query page and click \"Login with User Pools\". You can find the ClientId in amplify-meta.json under the key AppClientIDWeb. Paste that value into the modal and login using your username and password. You can now run this query:"
  },
  {
    "objectID": "Configure Lambda resolvers-18",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "which will return user information related to the current user directly from your user pool."
  },
  {
    "objectID": "Configure Lambda resolvers-19",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Structure of the function event",
    "depth": 3,
    "text": "When writing lambda functions that are connected via the @function directive, you can expect the following structure for the AWS Lambda event object."
  },
  {
    "objectID": "Configure Lambda resolvers-20",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Structure of the function event",
    "depth": 3,
    "text": "| Key  | Description  |\n|---|---|\n| typeName  | The name of the parent object type of the field being resolver.  |\n| fieldName  | The name of the field being resolved.  |\n| arguments  | A map containing the arguments passed to the field being resolved.  |\n| identity  | A map containing identity information for the request. Contains a nested key 'claims' that will contains the JWT claims if they exist. |\n| source  | When resolving a nested field in a query, the source contains parent value at runtime. For example when resolving Post.comments, the source will be the Post object.  |\n| request   | The AppSync request object. Contains header information.  |\n| prev | When using pipeline resolvers, this contains the object returned by the previous function. You can return the previous value for auditing use cases. |"
  },
  {
    "objectID": "Configure Lambda resolvers-21",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Structure of the function event",
    "depth": 3,
    "text": "Your function should follow the lambda handler guidelines for your specific language. See the developer guides from the\nAWS Lambda documentation for your chosen language. If you choose to use structured types, your type should serialize\nthe AWS Lambda event object outlined above. For example, if using Golang, you should define a struct with the above fields."
  },
  {
    "objectID": "Configure Lambda resolvers-22",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Calling functions in different regions",
    "depth": 3,
    "text": "By default, you expect the function to be in the same region as the amplify project. If you need to call a function in a different (or static) region, you can provide the region argument."
  },
  {
    "objectID": "Configure Lambda resolvers-23",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Calling functions in different regions",
    "depth": 3,
    "text": "Calling functions in different AWS accounts is not supported via the @function directive but is supported by AWS AppSync."
  },
  {
    "objectID": "Configure Lambda resolvers-24",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Chaining functions",
    "depth": 3,
    "text": "The @function directive supports AWS AppSync pipeline resolvers. That means, you can chain together multiple functions such that they are invoked in series when your field's resolver is invoked. To create a pipeline resolver that calls out to multiple AWS Lambda functions in series, use multiple @function directives on the field."
  },
  {
    "objectID": "Configure Lambda resolvers-25",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Chaining functions",
    "depth": 3,
    "text": "In the example above when you run a mutation that calls the Mutation.doSomeWork field, the worker-function will be invoked first then the audit-function will be invoked with an event that contains the results of the worker-function under the event.prev.result key. The audit-function would need to return event.prev.result if you want the result of worker-function to be returned for the field. Under the hood, Amplify creates an AppSync::FunctionConfiguration for each unique instance of @function in a document and a pipeline resolver containing a pointer to a function for each @function on a given field."
  },
  {
    "objectID": "Configure Lambda resolvers-26",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "The @function directive generates these resources as necessary:"
  },
  {
    "objectID": "Configure Lambda resolvers-27",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "An AWS IAM role that has permission to invoke the function as well as a trust policy with AWS AppSync."
  },
  {
    "objectID": "Configure Lambda resolvers-28",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "An AWS AppSync data source that registers the new role and existing function with your AppSync API."
  },
  {
    "objectID": "Configure Lambda resolvers-29",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "An AWS AppSync pipeline function that prepares the lambda event and invokes the new data source."
  },
  {
    "objectID": "Configure Lambda resolvers-30",
    "title": "Configure Lambda resolvers",
    "description": "Quickly & easily configure AWS Lambda resolvers within your AWS AppSync API.",
    "slug": "/cli-legacy/graphql-transformer/function",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "An AWS AppSync resolver that attaches to the GraphQL field and invokes the new pipeline functions."
  },
  {
    "objectID": "Add relationships between types-0",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@connection",
    "depth": 2,
    "text": "The @connection directive enables you to specify relationships between @model types. Currently, this supports one-to-one, one-to-many, and many-to-one relationships. You may implement many-to-many relationships using two one-to-many connections and a joining @model type. See the usage section for details."
  },
  {
    "objectID": "Add relationships between types-1",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@connection",
    "depth": 2,
    "text": "We also provide a fully working schema with 17 patterns related to relational designs."
  },
  {
    "objectID": "Add relationships between types-2",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Relationships between types are specified by annotating fields on an @model object type with the @connection directive."
  },
  {
    "objectID": "Add relationships between types-3",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The fields argument can be provided and indicates which fields can be queried by to get connected objects. The keyName argument can optionally be used to specify the name of secondary index (an index that was set up using @key) that should be queried from the other type in the relationship."
  },
  {
    "objectID": "Add relationships between types-4",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "When specifying a keyName, the fields argument should be provided to indicate which field(s) will be used to get connected objects. If keyName is not provided, then @connection queries the target table's primary index."
  },
  {
    "objectID": "Add relationships between types-5",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has one",
    "depth": 3,
    "text": "In the simplest case, you can define a one-to-one connection where a project has one team:"
  },
  {
    "objectID": "Add relationships between types-6",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has one",
    "depth": 3,
    "text": "You can also define the field you would like to use for the connection by populating the first argument to the fields array and matching it to a field on the type:"
  },
  {
    "objectID": "Add relationships between types-7",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has one",
    "depth": 3,
    "text": "In this case, the Project type has a teamID field added as an identifier for the team that the project belongs to. @connection can then get the connected Team object by querying the Team table with this teamID."
  },
  {
    "objectID": "Add relationships between types-8",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has one",
    "depth": 3,
    "text": "After it's transformed, you can create projects and query the connected team as follows:"
  },
  {
    "objectID": "Add relationships between types-9",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has one",
    "depth": 3,
    "text": "Note: The Project.team resolver is configured to work with the defined connection. This is done with a query on the Team table where teamID is passed in as an argument."
  },
  {
    "objectID": "Add relationships between types-10",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has one",
    "depth": 3,
    "text": "A Has One @connection can only reference the primary index of a model (ie. it cannot specify a \"keyName\" as described below in the Has Many section)."
  },
  {
    "objectID": "Add relationships between types-11",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has many",
    "depth": 3,
    "text": "The following schema defines a Post that can have many comments:"
  },
  {
    "objectID": "Add relationships between types-12",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has many",
    "depth": 3,
    "text": "Note how a one-to-many connection needs an @key that allows comments to be queried by the postID and the connection uses this key to get all comments whose postID is the id of the post was called on.\nAfter it's transformed, you can create comments and query the connected Post as follows:"
  },
  {
    "objectID": "Add relationships between types-13",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has many",
    "depth": 3,
    "text": "And you can query a Post with its comments as follows:"
  },
  {
    "objectID": "Add relationships between types-14",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs to",
    "depth": 3,
    "text": "You can make a connection bi-directional by adding a many-to-one connection to types that already have a one-to-many connection. In this case you add a connection from Comment to Post since each comment belongs to a post:"
  },
  {
    "objectID": "Add relationships between types-15",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs to",
    "depth": 3,
    "text": "After it's transformed, you can create comments with a post as follows:"
  },
  {
    "objectID": "Add relationships between types-16",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs to",
    "depth": 3,
    "text": "And you can query a Comment with its Post, then all Comments of that Post by navigating the connection:"
  },
  {
    "objectID": "Add relationships between types-17",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Many-to-many connections",
    "depth": 3,
    "text": "You can implement many to many using two 1-M @connections, an @key, and a joining @model. For example:"
  },
  {
    "objectID": "Add relationships between types-18",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Many-to-many connections",
    "depth": 3,
    "text": "This case is a bidirectional many-to-many which is why two @key calls are needed on the PostEditor model.\nYou can first create a Post and a User, and then add a connection between them with by creating a PostEditor object as follows:"
  },
  {
    "objectID": "Add relationships between types-19",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Many-to-many connections",
    "depth": 3,
    "text": "Note that neither the User type nor the Post type have any identifiers of connected objects. The connection info is held entirely inside the PostEditor objects."
  },
  {
    "objectID": "Add relationships between types-20",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Many-to-many connections",
    "depth": 3,
    "text": "You can query a given user with their posts:"
  },
  {
    "objectID": "Add relationships between types-21",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Many-to-many connections",
    "depth": 3,
    "text": "Also you can query a given post with the editors of that post and can list the posts of those editors, all in a single query:"
  },
  {
    "objectID": "Add relationships between types-22",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Many-to-many connections",
    "depth": 3,
    "text": "Amplify Studio does not support custom naming. Changing the auto-generated name will break Amplify Studio."
  },
  {
    "objectID": "Add relationships between types-23",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Alternative definition",
    "depth": 4,
    "text": "The above definition is the recommended way to create relationships between model types in your API. This involves defining index structures using @key and connection resolvers using @connection. There is an older parameterization of @connection that creates indices and connection resolvers that is still functional for backwards compatibility reasons. It is recommended to use @key and the new @connection via the fields argument."
  },
  {
    "objectID": "Add relationships between types-24",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Alternative definition",
    "depth": 4,
    "text": "This parameterization is not compatible with @key. See the parameterization above to use @connection with indexes created by @key."
  },
  {
    "objectID": "Add relationships between types-25",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Limit",
    "depth": 3,
    "text": "The default number of nested objects is 100. You can override this behavior by setting the limit argument. For example:"
  },
  {
    "objectID": "Add relationships between types-26",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "In order to keep connection queries fast and efficient, the GraphQL transform manages global secondary indexes (GSIs) on the generated tables on your behalf when using @connection"
  },
  {
    "objectID": "Add relationships between types-27",
    "title": "Add relationships between types",
    "description": "Define relationships with other types in your schema.",
    "slug": "/cli-legacy/graphql-transformer/connection",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "Note: After you have pushed a @connection directive you should not try to\nchange it. If you try to change it, the DynamoDB\nUpdateTable operation will fail. Should you need to change a @connection, you should add a new\n@connection that implements the new access pattern, update your application\nto use the new @connection, and then delete the old @connection when it's no\nlonger needed."
  },
  {
    "objectID": "Setup authorization rules-0",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@auth",
    "depth": 2,
    "text": "Authorization is required for applications to interact with your GraphQL API. API Keys are best used for public APIs (or parts of your schema which you wish to be public) or prototyping, and you must specify the expiration time before deploying. IAM authorization uses Signature Version 4 to make request with policies attached to Roles. OIDC tokens provided by Amazon Cognito User Pools or 3rd party OpenID Connect providers can also be used for authorization, and simply enabling this provides a simple access control requiring users to authenticate to be granted top level access to API actions. You can set finer grained access controls using @auth on your schema which leverages authorization metadata provided as part of these tokens or set on the database items themselves."
  },
  {
    "objectID": "Setup authorization rules-1",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@auth",
    "depth": 2,
    "text": "@auth object types that are annotated with @auth are protected by a set of authorization rules giving you additional controls than the top level authorization on an API. You may use the @auth directive on object type definitions and field definitions in your project's schema."
  },
  {
    "objectID": "Setup authorization rules-2",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@auth",
    "depth": 2,
    "text": "When using the @auth directive on object type definitions that are also annotated with\n@model, all resolvers that return objects of that type will be protected. When using the\n@auth directive on a field definition, a resolver will be added to the field that authorize access\nbased on attributes found in the parent type."
  },
  {
    "objectID": "Setup authorization rules-3",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Definition",
    "depth": 3,
    "text": "Note: The operations argument was added to replace the 'queries' and 'mutations' arguments. The 'queries' and 'mutations' arguments will continue to work but it is encouraged to move to 'operations'. If both are provided, the 'operations' argument takes precedence over 'queries'."
  },
  {
    "objectID": "Setup authorization rules-4",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "By default, enabling owner authorization allows any signed in user to create records."
  },
  {
    "objectID": "Setup authorization rules-5",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "Owner authorization requires an authentication type of Amazon Cognito User Pools to be enabled in your app."
  },
  {
    "objectID": "Setup authorization rules-6",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "Owner authorization specifies whether a user can access or operate against an object. To do so, each object will get an ownerField field (by default owner will be added to the object if not specified) that stores ownership information and is verified in various ways during resolver execution."
  },
  {
    "objectID": "Setup authorization rules-7",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "You can use the operations argument to specify which operations are enabled as follows:"
  },
  {
    "objectID": "Setup authorization rules-8",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "read: Allow the user to perform queries (get and list operations) against the API."
  },
  {
    "objectID": "Setup authorization rules-9",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "create: Inject the logged in user's identity as the ownerField automatically."
  },
  {
    "objectID": "Setup authorization rules-10",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "update: Add conditional update that checks the stored ownerField is the same as the signed in user."
  },
  {
    "objectID": "Setup authorization rules-11",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "delete: Add conditional update that checks the stored ownerField is the same as the signed in user."
  },
  {
    "objectID": "Setup authorization rules-12",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "You must ensure that the create operations rule is specified explicitly or inferred from defaults to ensure that the owner's identity is stored with the record so it can be verified on subsequent requests."
  },
  {
    "objectID": "Setup authorization rules-13",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "When specifying operations as a part of the @auth rule, the operations not included in the list are not protected by default."
  },
  {
    "objectID": "Setup authorization rules-14",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "Let's take a look at a few examples:"
  },
  {
    "objectID": "Setup authorization rules-15",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "In this schema, only the owner of the object has the authorization to perform read (getTodo and listTodos), update (updateTodo), and delete (deleteTodo) operations on the owner created object. This prevents the object from being updated or deleted by users other than the creator of the object."
  },
  {
    "objectID": "Setup authorization rules-16",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "Here's a table outlining which users are permitted to execute which operations. owner refers to the user who created the object, other refers to all other authenticated users."
  },
  {
    "objectID": "Setup authorization rules-17",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "|       | getTodo | listTodos | createTodo | updateTodo | deleteTodo |\n|:------|:-------:|:---------:|:----------:|:----------:|:----------:|\n| owner |    ✅   |     ✅    |     ✅     |      ✅   |     ✅     |\n| other |    ❌   |     ❌    |     ✅     |      ❌   |     ❌     |"
  },
  {
    "objectID": "Setup authorization rules-18",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "Next, let's say that you wanted to modify the schema to allow only the owner of the object to be able to update or delete, but allow any authenticated user to read the objects."
  },
  {
    "objectID": "Setup authorization rules-19",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "In this schema, only the owner of the object has the authorization to perform update (updateTodo) and delete (deleteTodo) operations on the owner created object, but anyone can read them (getTodo, listTodos). This prevents the object from being updated or deleted by users other than the creator of the object while allowing all authenticated users of the app to read them."
  },
  {
    "objectID": "Setup authorization rules-20",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "Here's a table outlining which users are permitted to execute which operations. owner refers to the user who created the object, other refers to all other authenticated users."
  },
  {
    "objectID": "Setup authorization rules-21",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "|       | getTodo | listTodos | createTodo | updateTodo | deleteTodo |\n|:------|:-------:|:---------:|:----------:|:----------:|:----------:|\n| owner |    ✅   |     ✅    |     ✅     |      ✅   |     ✅     |\n| other |    ✅   |     ✅    |     ✅     |      ❌   |     ❌     |"
  },
  {
    "objectID": "Setup authorization rules-22",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "Next, let's say that you wanted to modify the schema to allow only the owner of the object to be able to delete, but allow anyone to create, read, and update."
  },
  {
    "objectID": "Setup authorization rules-23",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "In this schema, only the owner of the object has the authorization to perform delete operations on the owner created object, but anyone can read or update them. This is because read and update aren't specified as owner-only actions, so all users are able to perform them. Since delete is specified as an owner only action, only the object's creator can delete the object."
  },
  {
    "objectID": "Setup authorization rules-24",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "Here's a table outlining which users are permitted to execute which operations. owner refers to the user who created the object, other refers to all other authenticated users."
  },
  {
    "objectID": "Setup authorization rules-25",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Owner authorization",
    "depth": 3,
    "text": "|       | getTodo | listTodos | createTodo | updateTodo | deleteTodo |\n|:------|:-------:|:---------:|:----------:|:----------:|:----------:|\n| owner |    ✅   |     ✅    |     ✅     |      ✅   |     ✅     |\n| other |    ✅   |     ✅    |     ✅     |      ✅   |     ❌     |"
  },
  {
    "objectID": "Setup authorization rules-26",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Multiple authorization rules",
    "depth": 3,
    "text": "You may also apply multiple ownership rules on a single @model type."
  },
  {
    "objectID": "Setup authorization rules-27",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Multiple authorization rules",
    "depth": 3,
    "text": "For example, imagine you have a type Draft that stores unfinished posts for a blog. You might want to allow the Draft's owner to create, update, delete, and read Draft objects. However, you might also want the Draft's editors to be able to update and read Draft objects."
  },
  {
    "objectID": "Setup authorization rules-28",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Multiple authorization rules",
    "depth": 3,
    "text": "To allow for this use case you could use the following type definition:"
  },
  {
    "objectID": "Setup authorization rules-29",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Ownership with create mutations",
    "depth": 3,
    "text": "The ownership authorization rule will automatically fill ownership fields unless\ntold explicitly not to do so. To show how this works, lets look at how the create mutation would work for the Draft type above:"
  },
  {
    "objectID": "Setup authorization rules-30",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Ownership with create mutations",
    "depth": 3,
    "text": "Let's assume that when I call this mutation I am logged in as someuser@my-domain.com. The result would be:"
  },
  {
    "objectID": "Setup authorization rules-31",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Ownership with create mutations",
    "depth": 3,
    "text": "The Mutation.createDraft resolver is smart enough to match your auth rules to attributes and will fill them in by default."
  },
  {
    "objectID": "Setup authorization rules-32",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Ownership with create mutations",
    "depth": 3,
    "text": "To specify a list of editors, you could run this:"
  },
  {
    "objectID": "Setup authorization rules-33",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Ownership with create mutations",
    "depth": 3,
    "text": "This would return:"
  },
  {
    "objectID": "Setup authorization rules-34",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Ownership with create mutations",
    "depth": 3,
    "text": "You can try to perform a modification to owner but this will throw an Unauthorized exception because you are no longer the owner of the object you are trying to create."
  },
  {
    "objectID": "Setup authorization rules-35",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "Static group authorization allows you to protect @model types by restricting access\nto a known set of groups. For example, you can allow all Admin users to create,\nupdate, delete, get, and list Salary objects."
  },
  {
    "objectID": "Setup authorization rules-36",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "When calling the GraphQL API, if the user credential (as specified by the resolver's $ctx.identity) is not\nenrolled in the Admin group, the operation will fail."
  },
  {
    "objectID": "Setup authorization rules-37",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "To enable advanced authorization use cases, you can layer auth rules to provide specialized functionality.\nTo show how you might do that, let's expand the Draft example you started in the Owner Authorization\nsection above. When you last left off, a Draft object could be updated and read by both its owner\nand any of its editors and could be created and deleted only by its owner. Let's change it so that\nnow any member of the \"Admin\" group can also create, update, delete, and read a Draft object."
  },
  {
    "objectID": "Setup authorization rules-38",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "With dynamic group authorization, each record contains an attribute specifying what Cognito groups should be able to access it. Use the groupsField argument to specify which attribute in the underlying data store holds this group information. To specify that a single group should have access, use a field of type String. To specify that multiple groups should have access, use a field of type [String]."
  },
  {
    "objectID": "Setup authorization rules-39",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "Just as with the other auth rules, you can layer dynamic group rules on top of other rules. Let's again expand the Draft example from the Owner Authorization and Static Group Authorization sections above. When you last left off editors could update and read objects, owners had full access, and members of the admin group had full access to Draft objects. Now you have a new requirement where each record should be able to specify an optional list of groups that can read the draft. This would allow you to share an individual document with an external team, for example."
  },
  {
    "objectID": "Setup authorization rules-40",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "With this setup, you could create an object that can be read by the \"BizDev\" group:"
  },
  {
    "objectID": "Setup authorization rules-41",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "And another draft that can be read by the \"Marketing\" group:"
  },
  {
    "objectID": "Setup authorization rules-42",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "public authorization",
    "depth": 3,
    "text": "The public authorization specifies that everyone will be allowed to access the API, behind the scenes the API will be protected with an API Key. To be able to use public the API must have API Key configured. For local execution, this key resides in the file aws-exports.js for the JavaScript library and amplifyconfiguration.json for Android and iOS under the key aws_appsync_apiKey."
  },
  {
    "objectID": "Setup authorization rules-43",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "public authorization",
    "depth": 3,
    "text": "The @auth directive allows the override of the default provider for a given authorization mode. In the sample above iam is specified as the provider which allows you to use an \"UnAuthenticated Role\" from Cognito Identity Pools for public access instead of an API Key. When used in conjunction with amplify add auth the CLI generates scoped down IAM policies for the \"UnAuthenticated\" role automatically."
  },
  {
    "objectID": "Setup authorization rules-44",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "private authorization",
    "depth": 3,
    "text": "The private authorization specifies that everyone will be allowed to access the API with a valid JWT token from the configured Cognito User Pool. To be able to use private the API must have Cognito User Pool configured."
  },
  {
    "objectID": "Setup authorization rules-45",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "private authorization",
    "depth": 3,
    "text": "The @auth directive allows the override of the default provider for a given authorization mode. In the sample above iam is specified as the provider which allows you to use an \"Authenticated Role\" from Cognito Identity Pools for private access. When used in conjunction with amplify add auth the CLI generates scoped down IAM policies for the \"Authenticated\" role automatically."
  },
  {
    "objectID": "Setup authorization rules-46",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorization using an oidc provider",
    "depth": 3,
    "text": "By using a configured oidc provider for the API, it is possible to authenticate the users against it. In the sample above, oidc is specified as the provider for the owner authorization on the type. The field identityClaim: \"sub\" specifies that the \"sub\" claim from your JWT token is used to provider ownership instead of the default username claim, which is used by the Amazon Cognito JWT."
  },
  {
    "objectID": "Setup authorization rules-47",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining multiple authorization types",
    "depth": 3,
    "text": "Amplify GraphQL APIs have a primary default authentication type and, optionally, additional secondary authentication types. The objects and fields in the GraphQL schema can have rules with different authorization providers assigned based on the authentication types configured in your app."
  },
  {
    "objectID": "Setup authorization rules-48",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining multiple authorization types",
    "depth": 3,
    "text": "One of the most common scenarios for multiple authorization rules is for combining public and private access. For example, blogs typically allow public access for viewing a post but only allow a post's creator to update or delete that post."
  },
  {
    "objectID": "Setup authorization rules-49",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining multiple authorization types",
    "depth": 3,
    "text": "Let's take a look at how you can combine public and private access to achieve this:"
  },
  {
    "objectID": "Setup authorization rules-50",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining multiple authorization types",
    "depth": 3,
    "text": "The above schema assumes a combination of Amazon Cognito User Pools and API key authentication types"
  },
  {
    "objectID": "Setup authorization rules-51",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining multiple authorization types",
    "depth": 3,
    "text": "Let's take a look at another example. Here the Post model is protected by Cognito User Pools by default and the owner can perform any operation on the Post type. You can also call getPosts and listPosts from an AWS Lambda function if it is configured with the appropriate IAM policies in its execution role."
  },
  {
    "objectID": "Setup authorization rules-52",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining multiple authorization types",
    "depth": 3,
    "text": "The above schema assumes a combination of Amazon Cognito User Pools and IAM authentication types"
  },
  {
    "objectID": "Setup authorization rules-53",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Allowed authorization mode vs. provider combinations",
    "depth": 3,
    "text": "The following table shows the allowed combinations of authorization modes and providers."
  },
  {
    "objectID": "Setup authorization rules-54",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Allowed authorization mode vs. provider combinations",
    "depth": 3,
    "text": "|           | owner | groups | public | private |\n|:----------|:-----:|:------:|:------:|:-------:|\n| userPools |✅|✅||✅|\n| oidc |✅|✅|||\n| apiKey |||✅||\n| iam |||✅|✅|"
  },
  {
    "objectID": "Setup authorization rules-55",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Allowed authorization mode vs. provider combinations",
    "depth": 3,
    "text": "Please note that groups is leveraging Cognito User Pools but no provider assignment needed/possible."
  },
  {
    "objectID": "Setup authorization rules-56",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom claims",
    "depth": 3,
    "text": "@auth supports using custom claims if you do not wish to use the default username or cognito:groups claims from your JWT token which are populated by Amazon Cognito. This can be helpful if you are using tokens from a 3rd party OIDC system or if you wish to populate a claim with a list of groups from an external system, such as when using a Pre Token Generation Lambda Trigger which reads from a database. To use custom claims specify identityClaim or groupClaim as appropriate like in the example below:"
  },
  {
    "objectID": "Setup authorization rules-57",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom claims",
    "depth": 3,
    "text": "In this example the object owner will check against a user_id claim. Please note that this claim is not available by default if the token is generated by Cognito. Use sub instead if you are using Cognito generated token. Similarly if the user_groups claim contains a \"Moderator\" string then access will be granted."
  },
  {
    "objectID": "Setup authorization rules-58",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom claims",
    "depth": 3,
    "text": "Note identityField is being deprecated for identityClaim."
  },
  {
    "objectID": "Setup authorization rules-59",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "Prior to version 2.0 of the CLI, @auth rules did not apply to subscriptions. Instead you were required to either turn them off or use Custom Resolvers to manually add authorization checks. In the latest versions @auth protections have been added to subscriptions, however this can introduce different behavior into existing applications: First, owner is now a required argument for Owner-based authorization, as shown below. Second, the selection set will set null on fields when mutations are invoked if per-field @auth is set on that field. Read more here. If you wish to keep the previous behavior set level: public on your model as defined below."
  },
  {
    "objectID": "Setup authorization rules-60",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "When @auth is used subscriptions have a few subtle behavior differences than queries and mutations based on their event based nature. When protecting a model using the owner auth strategy, each subscription request will require that the user is passed as an argument to the subscription request. If the user field is not passed, the subscription connection will fail. In the case where it is passed, the user will only get notified of updates to records for which they are the owner."
  },
  {
    "objectID": "Setup authorization rules-61",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "Subscription filtering uses data passed from mutation to do the filtering. If a mutation does not include owner field in the selection set of a owner based auth, Subscription message won't be fired for that mutation."
  },
  {
    "objectID": "Setup authorization rules-62",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "Alternatively, when the model is protected using the static group auth strategy, the subscription request will only succeed if the user is in an allowed group. Further, the user will only get notifications of updates to records if they are in an allowed group. Note: You don't need to pass the user as an argument in the subscription request, since the resolver will instead check the contents of your JWT token."
  },
  {
    "objectID": "Setup authorization rules-63",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "Dynamic groups have no impact to subscriptions. You will not get notified of any updates to them."
  },
  {
    "objectID": "Setup authorization rules-64",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "For example suppose you have the following schema:"
  },
  {
    "objectID": "Setup authorization rules-65",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "This means that the subscription must look like the following or it will fail:"
  },
  {
    "objectID": "Setup authorization rules-66",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "Note that if your type doesn’t already have an owner field the Transformer will automatically add this for you. Passing in the current user can be done dynamically in your code by using Auth.currentAuthenticatedUser() in JavaScript, AWSMobileClient.default().username in iOS, or AWSMobileClient.getInstance().getUsername() in Android."
  },
  {
    "objectID": "Setup authorization rules-67",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "In the case of groups if you define the following:"
  },
  {
    "objectID": "Setup authorization rules-68",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "Then you don’t need to pass an argument, as the resolver will check the contents of your JWT token at subscription time and ensure you are in the “Admin” group."
  },
  {
    "objectID": "Setup authorization rules-69",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "Finally, if you use both owner and group authorization then the username argument becomes optional. This means the following:"
  },
  {
    "objectID": "Setup authorization rules-70",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "If you don’t pass the user in, but are a member of an allowed group, the subscription will notify you of records added."
  },
  {
    "objectID": "Setup authorization rules-71",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "If you don’t pass the user in, but are NOT a member of an allowed group, the subscription will fail to connect."
  },
  {
    "objectID": "Setup authorization rules-72",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "If you pass the user in who IS the owner but is NOT a member of a group, the subscription will notify you of records added of which you are the owner."
  },
  {
    "objectID": "Setup authorization rules-73",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "If you pass the user in who is NOT the owner and is NOT a member of a group, the subscription will not notify you of anything as there are no records for which you own"
  },
  {
    "objectID": "Setup authorization rules-74",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorizing subscriptions",
    "depth": 3,
    "text": "You may disable authorization checks on subscriptions or completely turn off subscriptions as well by specifying either public or off in @model:"
  },
  {
    "objectID": "Setup authorization rules-75",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "The @auth directive specifies that access to a specific field should be restricted\naccording to its own set of rules. Here are a few situations where this is useful:"
  },
  {
    "objectID": "Setup authorization rules-76",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "Protect access to a field that has different permissions than the parent model"
  },
  {
    "objectID": "Setup authorization rules-77",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "You might want to have a user model where some fields, like username, are a part of the\npublic profile and the ssn field is visible to owners."
  },
  {
    "objectID": "Setup authorization rules-78",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "Protect access to a @connection resolver based on some attribute in the source object"
  },
  {
    "objectID": "Setup authorization rules-79",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "This schema will protect access to Post objects connected to a user based on an attribute\nin the User model. You may turn off top level queries by specifying queries: null in the @model\ndeclaration which restricts access such that queries must go through the @connection resolvers\nto reach the model."
  },
  {
    "objectID": "Setup authorization rules-80",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "Protect mutations such that certain fields can have different access rules than the parent model"
  },
  {
    "objectID": "Setup authorization rules-81",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "When used on field definitions, @auth directives protect all operations by default.\nTo protect read operations, a resolver is added to the protected field that implements authorization logic.\nTo protect mutation operations, logic is added to existing mutations that will be run if the mutation's input\ncontains the protected field. For example, here is a model where owners and admins can read employee\nsalaries but only admins may create or update them."
  },
  {
    "objectID": "Setup authorization rules-82",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "Note: The delete operation, when used in @auth directives on field definitions, translates\nto protecting the update mutation such that the field cannot be set to null unless authorized."
  },
  {
    "objectID": "Setup authorization rules-83",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "Note: When specifying operations as a part of the @auth rule on a field, the operations not included in the operations list are not protected by default. For example, let's say you have the following schema:"
  },
  {
    "objectID": "Setup authorization rules-84",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "In this schema, only the owner of the object has the authorization to perform update operations on the content field. But this does not prevent any other owner (any user other than the creator or owner of the object) to update some other field in the object owned by another user. If you want to prevent update operations on a field, the user would need to explicitly add auth rules to restrict access to that field. One of the ways would be to explicitly specify @auth rules on the fields that you would want to protect like the following:"
  },
  {
    "objectID": "Setup authorization rules-85",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "You can also provide explicit deny rules to your field like the following:"
  },
  {
    "objectID": "Setup authorization rules-86",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "You can also combine top-level @auth rules on the type with field level auth rules. For example, let's consider the following schema:"
  },
  {
    "objectID": "Setup authorization rules-87",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field level authorization",
    "depth": 3,
    "text": "In the above schema users in the Admin group have the authorization to create, read, delete and update (except the content field in the object of another owner) for the type Todo.\nAn owner of an object has the authorization to create Todo types and read all the objects of type Todo. In addition, an owner can perform an update operation on the Todo object only when the content field is present as a part of the input.\nAny other user -- who isn't an owner of an object isn't authorized to update that object."
  },
  {
    "objectID": "Setup authorization rules-88",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-Field with subscriptions",
    "depth": 4,
    "text": "When setting per-field @auth the Transformer will alter the response of mutations for those fields by setting them to null in order to prevent sensitive data from being sent over subscriptions. For example in the schema below:"
  },
  {
    "objectID": "Setup authorization rules-89",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-Field with subscriptions",
    "depth": 4,
    "text": "Subscribers might be a member of the \"Admins\" group and should get notified of the new item, however they should not get the ssn field. If you run the following mutation:"
  },
  {
    "objectID": "Setup authorization rules-90",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-Field with subscriptions",
    "depth": 4,
    "text": "The mutation will run successfully, however ssn will return null in the GraphQL response. This prevents anyone in the \"Admins\" group who is subscribed to updates from receiving the private information. Subscribers would still receive the name and address. The data is still written and this can be verified by running a query."
  },
  {
    "objectID": "Setup authorization rules-91",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "The @auth directive will add authorization snippets to any relevant resolver mapping templates at compile time. Different operations use different methods of authorization."
  },
  {
    "objectID": "Setup authorization rules-92",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "Owner Authorization"
  },
  {
    "objectID": "Setup authorization rules-93",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "The generated resolvers would be protected like so:"
  },
  {
    "objectID": "Setup authorization rules-94",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "Mutation.createX: Verify the requesting user has a valid credential and automatically set the owner attribute to equal $ctx.identity.username."
  },
  {
    "objectID": "Setup authorization rules-95",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "Mutation.updateX: Update the condition expression so that the DynamoDB UpdateItem operation only succeeds if the record's owner attribute equals the caller's $ctx.identity.username."
  },
  {
    "objectID": "Setup authorization rules-96",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "Mutation.deleteX: Update the condition expression so that the DynamoDB DeleteItem operation only succeeds if the record's owner attribute equals the caller's $ctx.identity.username."
  },
  {
    "objectID": "Setup authorization rules-97",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "Query.getX: In the response mapping template verify that the result's owner attribute is the same as the $ctx.identity.username. If it is not return null."
  },
  {
    "objectID": "Setup authorization rules-98",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "Query.listX: In the response mapping template filter the result's items such that only items with an owner attribute that is the same as the $ctx.identity.username are returned."
  },
  {
    "objectID": "Setup authorization rules-99",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 4,
    "text": "@connection resolvers: In the response mapping template filter the result's items such that only items with an owner attribute that is the same as the $ctx.identity.username are returned. This is not enabled when using the queries argument."
  },
  {
    "objectID": "Setup authorization rules-100",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "Static group auth is simpler than the others. The generated resolvers would be protected like so:"
  },
  {
    "objectID": "Setup authorization rules-101",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "Mutation.createX: Verify the requesting user has a valid credential and that $ctx.identity.claims.get(\"cognito:groups\") contains the Admin group. If it does not, fail."
  },
  {
    "objectID": "Setup authorization rules-102",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "Mutation.updateX: Verify the requesting user has a valid credential and that $ctx.identity.claims.get(\"cognito:groups\") contains the Admin group. If it does not, fail."
  },
  {
    "objectID": "Setup authorization rules-103",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "Mutation.deleteX: Verify the requesting user has a valid credential and that $ctx.identity.claims.get(\"cognito:groups\") contains the Admin group. If it does not, fail."
  },
  {
    "objectID": "Setup authorization rules-104",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "Query.getX: Verify the requesting user has a valid credential and that $ctx.identity.claims.get(\"cognito:groups\") contains the Admin group. If it does not, fail."
  },
  {
    "objectID": "Setup authorization rules-105",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "Query.listX: Verify the requesting user has a valid credential and that $ctx.identity.claims.get(\"cognito:groups\") contains the Admin group. If it does not, fail."
  },
  {
    "objectID": "Setup authorization rules-106",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Static group authorization",
    "depth": 3,
    "text": "@connection resolvers: Verify the requesting user has a valid credential and that $ctx.identity.claims.get(\"cognito:groups\") contains the Admin group. If it does not, fail. This is not enabled when using the queries argument."
  },
  {
    "objectID": "Setup authorization rules-107",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "The generated resolvers would be protected like so:"
  },
  {
    "objectID": "Setup authorization rules-108",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "Mutation.createX: Verify the requesting user has a valid credential and that it contains a claim to at least one group passed to the query in the $ctx.args.input.groups argument."
  },
  {
    "objectID": "Setup authorization rules-109",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "Mutation.updateX: Update the condition expression so that the DynamoDB UpdateItem operation only succeeds if the record's groups attribute contains at least one of the caller's claimed groups via $ctx.identity.claims.get(\"cognito:groups\")."
  },
  {
    "objectID": "Setup authorization rules-110",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "Mutation.deleteX: Update the condition expression so that the DynamoDB DeleteItem operation only succeeds if the record's groups attribute contains at least one of the caller's claimed groups via $ctx.identity.claims.get(\"cognito:groups\")"
  },
  {
    "objectID": "Setup authorization rules-111",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "Query.getX: In the response mapping template verify that the result's groups attribute contains at least one of the caller's claimed groups via $ctx.identity.claims.get(\"cognito:groups\")."
  },
  {
    "objectID": "Setup authorization rules-112",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "Query.listX: In the response mapping template filter the result's items such that only items with a groups attribute that contains at least one of the caller's claimed groups via $ctx.identity.claims.get(\"cognito:groups\")."
  },
  {
    "objectID": "Setup authorization rules-113",
    "title": "Setup authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli-legacy/graphql-transformer/auth",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Dynamic group authorization",
    "depth": 3,
    "text": "@connection resolver: In the response mapping template filter the result's items such that only items with a groups attribute that contains at least one of the caller's claimed groups via $ctx.identity.claims.get(\"cognito:groups\"). This is not enabled when using the queries argument."
  },
  {
    "objectID": "Index your data with keys-0",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@key",
    "depth": 2,
    "text": "The @key directive makes it simple to configure custom index structures for @model types."
  },
  {
    "objectID": "Index your data with keys-1",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@key",
    "depth": 2,
    "text": "Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale but making it work for your access patterns requires a bit of forethought. DynamoDB query operations may use at most two attributes to efficiently query data. The first query argument passed to a query (the hash key) must use strict equality and the second attribute (the sort key) may use gt, ge, lt, le, eq, beginsWith, and between. DynamoDB can effectively implement a wide variety of access patterns that are powerful enough for the majority of applications."
  },
  {
    "objectID": "Index your data with keys-2",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@key",
    "depth": 2,
    "text": "When modeling your data during schema design there are common patterns that you may need to leverage. We provide a fully working schema with 17 patterns related to relational designs."
  },
  {
    "objectID": "Index your data with keys-3",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Definition",
    "depth": 2,
    "text": "Argument"
  },
  {
    "objectID": "Index your data with keys-4",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Definition",
    "depth": 2,
    "text": "| Argument  | Description  |\n|---|---|\n| fields  | A list of fields that should comprise the @key, used in conjunction with an @model type. The first field in the list will always be the HASH key. If two fields are provided the second field will be the SORT key. If more than two fields are provided, a single composite SORT key will be created from a combination of fields[1...n]. All generated GraphQL queries & mutations will be updated to work with custom @key directives. |\n| name  | When provided, specifies the name of the secondary index. When omitted, specifies that the @key is defining the primary index. You may have at most one primary key per table and therefore you may have at most one @key that does not specify a name per @model type.  |\n| queryField  | When defining a secondary index (by specifying the name argument), this specifies that a new top level query field that queries the secondary index should be generated with the given name.  |"
  },
  {
    "objectID": "Index your data with keys-5",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How to use @key",
    "depth": 2,
    "text": "For an introduction to the @key directive, let's start by looking at a basic Todo app schema with only an @model directive."
  },
  {
    "objectID": "Index your data with keys-6",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How to use @key",
    "depth": 2,
    "text": "By default, the @model directive will enable the following 2 data access patterns:"
  },
  {
    "objectID": "Index your data with keys-7",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How to use @key",
    "depth": 2,
    "text": "getTodo - Get a Todo by id"
  },
  {
    "objectID": "Index your data with keys-8",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How to use @key",
    "depth": 2,
    "text": "listTodos - Query all Todos"
  },
  {
    "objectID": "Index your data with keys-9",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How to use @key",
    "depth": 2,
    "text": "You will often need additional data access patterns. For example, in a Todo app, you may want to fetch Todos by status. The @key directive would allow you to add this additional data access pattern with a single new line of code:"
  },
  {
    "objectID": "Index your data with keys-10",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How to use @key",
    "depth": 2,
    "text": "Using the new todosByStatus query you can fetch todos by status:"
  },
  {
    "objectID": "Index your data with keys-11",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How to use @key",
    "depth": 2,
    "text": "Next, let's take a closer look at how this works by examining a few more common data access patterns and how to model them."
  },
  {
    "objectID": "Index your data with keys-12",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Designing Data Models using @key",
    "depth": 2,
    "text": "When designing data models using the @key directive, the first step should be to write down your application's expected access patterns. For example, let's say you were building an e-commerce application\nand needed to implement access patterns like:"
  },
  {
    "objectID": "Index your data with keys-13",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Designing Data Models using @key",
    "depth": 2,
    "text": "Get customers by email."
  },
  {
    "objectID": "Index your data with keys-14",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Designing Data Models using @key",
    "depth": 2,
    "text": "Get orders by customer by createdAt."
  },
  {
    "objectID": "Index your data with keys-15",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Designing Data Models using @key",
    "depth": 2,
    "text": "Get items by order by status by createdAt."
  },
  {
    "objectID": "Index your data with keys-16",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Designing Data Models using @key",
    "depth": 2,
    "text": "Get items by status by createdAt."
  },
  {
    "objectID": "Index your data with keys-17",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Designing Data Models using @key",
    "depth": 2,
    "text": "Let's take a look at how you would define custom keys to implement these access patterns in your schema.graphql."
  },
  {
    "objectID": "Index your data with keys-18",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get customers by email",
    "depth": 3,
    "text": "A @key without a name specifies the key for the DynamoDB table's primary index. You may only provide 1 @key without a name per @model type."
  },
  {
    "objectID": "Index your data with keys-19",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get customers by email",
    "depth": 3,
    "text": "The example above shows the simplest case where you are specifying that the table's primary index should have a simple key where the hash key is email. This allows you to get unique customers by their email."
  },
  {
    "objectID": "Index your data with keys-20",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get customers by email",
    "depth": 3,
    "text": "This is great for simple lookup operations, but what if you need to perform slightly more complex queries?"
  },
  {
    "objectID": "Index your data with keys-21",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get orders by customer email by createdAt",
    "depth": 3,
    "text": "This @key above allows you to efficiently query Order objects by both a customerEmail and the createdAt time stamp. The @key above creates a DynamoDB table where the primary index's hash key is customerEmail and the sort key is createdAt. This allows you to write queries like this:"
  },
  {
    "objectID": "Index your data with keys-22",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get orders by customer email by createdAt",
    "depth": 3,
    "text": "The query above shows how you can use compound key structures to implement more powerful query patterns on top of DynamoDB but you are not quite done yet."
  },
  {
    "objectID": "Index your data with keys-23",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get orders by customer email by createdAt",
    "depth": 3,
    "text": "Given that DynamoDB limits you to query by at most two attributes at a time, the @key directive helps by streamlining the process of creating composite sort keys such that you can support querying by more than two attributes at a time. For example, you can implement “Get items by orderId, status, and createdAt” as well as “Get items by status and createdAt” for a single @model with this schema."
  },
  {
    "objectID": "Index your data with keys-24",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get orders by customer email by createdAt",
    "depth": 3,
    "text": "The primary @key with 3 fields performs a bit more magic than the 1 and 2 field variants. The first field orderId will be the HASH key as expected, but the SORT key will be a new composite key named status#createdAt that is made of the status and createdAt fields on the @model. The @key directive creates the table structures and also generates resolvers that inject composite key values for you during queries and mutations."
  },
  {
    "objectID": "Index your data with keys-25",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get orders by customer email by createdAt",
    "depth": 3,
    "text": "Using this schema, you can query the primary index to get IN_TRANSIT items created in 2019 for a given order."
  },
  {
    "objectID": "Index your data with keys-26",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example: Get orders by customer email by createdAt",
    "depth": 3,
    "text": "The query above exposes the statusCreatedAt argument that allows you to configure DynamoDB key condition expressions without worrying about how the composite key is formed under the hood. Using the same schema, you can get all PENDING items created in 2019 by querying the secondary index \"ByStatus\" via the Query.itemsByStatus field."
  },
  {
    "objectID": "Index your data with keys-27",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Evolving APIs with @key",
    "depth": 2,
    "text": "There are a few important things to think about when making changes to APIs using @key. When you need to enable a new access pattern or change an existing access pattern you should follow these steps."
  },
  {
    "objectID": "Index your data with keys-28",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Evolving APIs with @key",
    "depth": 2,
    "text": "Create a new index that enables the new or updated access pattern."
  },
  {
    "objectID": "Index your data with keys-29",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Evolving APIs with @key",
    "depth": 2,
    "text": "If adding an @key with 3 or more fields, you will need to back-fill the new composite sort key for existing data. With a @key(fields: [\"email\", \"status\", \"date\"]), you would need to backfill the status#date field with composite key values made up of each object's status and date fields joined by a #. You do not need to backfill data for @key directives with 1 or 2 fields."
  },
  {
    "objectID": "Index your data with keys-30",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Evolving APIs with @key",
    "depth": 2,
    "text": "Deploy your additive changes and update any downstream applications to use the new access pattern."
  },
  {
    "objectID": "Index your data with keys-31",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Evolving APIs with @key",
    "depth": 2,
    "text": "Once you are certain that you do not need the old index, remove its @key and deploy the API again."
  },
  {
    "objectID": "Index your data with keys-32",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Deploying multiple secondary indices (GSI)",
    "depth": 2,
    "text": "You can make multiple global secondary index (@key with name parameter set) updates on one \"amplify push\". Under the hood, Amplify CLI needs to locally sequence multiple individual deployments to your DynamoDB table because each GSI change requires time to create the new index."
  },
  {
    "objectID": "Index your data with keys-33",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Troubleshooting",
    "depth": 3,
    "text": "If your deployment fails locally when updating multiple GSIs, you'll have the ability to run:"
  },
  {
    "objectID": "Index your data with keys-34",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Troubleshooting",
    "depth": 3,
    "text": "amplify push --iterative-rollback to rollback the last-known-good state"
  },
  {
    "objectID": "Index your data with keys-35",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Troubleshooting",
    "depth": 3,
    "text": "amplify push --force rollback the last-known-good state and try redeploying your changes again using."
  },
  {
    "objectID": "Index your data with keys-36",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Troubleshooting",
    "depth": 3,
    "text": "If you're running into the error above during amplify push, it is likely that you don't have this feature enabled. To enable multiple GSI updates, set the \"enableIterativeGsiUpdates\" feature flag to true in your amplify/cli.json."
  },
  {
    "objectID": "Index your data with keys-37",
    "title": "Index your data with keys",
    "description": "The @key directive makes it simple to configure custom index structures for @model types.",
    "slug": "/cli-legacy/graphql-transformer/key",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining @key with @connection",
    "depth": 2,
    "text": "Secondary indexes created with the @key directive can be used to resolve connections when creating relationships between types. To learn how this works, check out the documentation for @connection."
  },
  {
    "objectID": "Define your model types-0",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "@model",
    "depth": 2,
    "text": "Object types that are annotated with @model are top-level entities in the\ngenerated API. Objects annotated with @model are stored in Amazon DynamoDB and are\ncapable of being protected via @auth, related to other objects via @connection,\nand streamed into Amazon OpenSearch via @searchable. You may also apply the\n@versioned directive to instantly add a version field and conflict detection to a\nmodel type."
  },
  {
    "objectID": "Define your model types-1",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Definition",
    "depth": 3,
    "text": "The following SDL defines the @model directive that allows you to easily define\ntop level object types in your API that are backed by Amazon DynamoDB."
  },
  {
    "objectID": "Define your model types-2",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Define a GraphQL object type and annotate it with the @model directive to store\nobjects of that type in DynamoDB and automatically configure CRUDL queries and\nmutations."
  },
  {
    "objectID": "Define your model types-3",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "You may also override the names of any generated queries, mutations and subscriptions, or remove operations entirely."
  },
  {
    "objectID": "Define your model types-4",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "This would create and configure a single query field post(id: ID!): Post and\nno mutation fields."
  },
  {
    "objectID": "Define your model types-5",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "Model directive automatically adds createdAt and updatedAt timestamps to each entities. The timestamp field names can be changed by passing timestamps attribute to the directive"
  },
  {
    "objectID": "Define your model types-6",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The above schema will generate Post with createdOn and updatedOn fields as shown"
  },
  {
    "objectID": "Define your model types-7",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Usage",
    "depth": 3,
    "text": "The automatically added createdAt and updatedAt fields can't be set in create or update mutation. If these fields need to be controlled as part of the mutation, they should be in the input schema and should have AWSDateTime as their type"
  },
  {
    "objectID": "Define your model types-8",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "A single @model directive configures the following AWS resources:"
  },
  {
    "objectID": "Define your model types-9",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "An Amazon DynamoDB table with PAY_PER_REQUEST billing mode enabled by default."
  },
  {
    "objectID": "Define your model types-10",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "An AWS AppSync DataSource configured to access the table above."
  },
  {
    "objectID": "Define your model types-11",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "An AWS IAM role attached to the DataSource that allows AWS AppSync to call the above table on your behalf."
  },
  {
    "objectID": "Define your model types-12",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "Up to 8 resolvers (create, update, delete, get, list, onCreate, onUpdate, onDelete) but this is configurable via the queries, mutations, and subscriptions arguments on the @model directive."
  },
  {
    "objectID": "Define your model types-13",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "Input objects for create, update, and delete mutations."
  },
  {
    "objectID": "Define your model types-14",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "Filter input objects that allow you to filter objects in list queries and connection fields."
  },
  {
    "objectID": "Define your model types-15",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "For list queries the default number of objects returned is 100. You can override this behavior by setting the limit argument."
  },
  {
    "objectID": "Define your model types-16",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "This input schema document"
  },
  {
    "objectID": "Define your model types-17",
    "title": "Define your model types",
    "description": "Specify the various types that make up your schema.",
    "slug": "/cli-legacy/graphql-transformer/model",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Generates",
    "depth": 3,
    "text": "would generate the following schema parts"
  },
  {
    "objectID": "Directives-0",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities such as custom indexes, authorization rules, function triggers, and more."
  },
  {
    "objectID": "Directives-1",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@model: Defines top level object types in your API that are backed by Amazon DynamoDB"
  },
  {
    "objectID": "Directives-2",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@key: Configures custom index structures for @model types"
  },
  {
    "objectID": "Directives-3",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@auth: Defines authorization rules for your @model types and fields"
  },
  {
    "objectID": "Directives-4",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@connection: Defines 1:1, 1:M, and N:M relationships between @model types"
  },
  {
    "objectID": "Directives-5",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@function: Configures a Lambda function resolvers for a field"
  },
  {
    "objectID": "Directives-6",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@http: Configures an HTTP resolver for a field"
  },
  {
    "objectID": "Directives-7",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@predictions: Queries an orchestration of AI/ML services such as Amazon Rekognition, Amazon Translate, and/or Amazon Polly"
  },
  {
    "objectID": "Directives-8",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@searchable: Makes your data searchable by streaming it to Amazon OpenSearch"
  },
  {
    "objectID": "Directives-9",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Amplify-provided directives",
    "depth": 2,
    "text": "@versioned: Defines the versioning and conflict resolution strategy for an @model type"
  },
  {
    "objectID": "Directives-10",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AWS AppSync-provided directives",
    "depth": 2,
    "text": "The following directives are supported by the AppSync service and can be used within the Amplify GraphQL schemas. These will not be processed by Amplify CLI but passed through to the service as is and will be present in the output schema. For example, Amplify's @auth directive will add these directives under the hood to the output schema."
  },
  {
    "objectID": "Directives-11",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AWS AppSync-provided directives",
    "depth": 2,
    "text": "@aws_api_key"
  },
  {
    "objectID": "Directives-12",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AWS AppSync-provided directives",
    "depth": 2,
    "text": "@aws_iam"
  },
  {
    "objectID": "Directives-13",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AWS AppSync-provided directives",
    "depth": 2,
    "text": "@aws_oidc"
  },
  {
    "objectID": "Directives-14",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AWS AppSync-provided directives",
    "depth": 2,
    "text": "@aws_cognito_user_pools"
  },
  {
    "objectID": "Directives-15",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AWS AppSync-provided directives",
    "depth": 2,
    "text": "@aws_auth"
  },
  {
    "objectID": "Directives-16",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AWS AppSync-provided directives",
    "depth": 2,
    "text": "@aws_subscribe"
  },
  {
    "objectID": "Directives-17",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "AWS AppSync-provided directives",
    "depth": 2,
    "text": "Learn more about these directives in the AWS AppSync Developer Guide."
  },
  {
    "objectID": "Directives-18",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "3rd party directives",
    "depth": 2,
    "text": "@algolia: Add serverless search to your Amplify API with Algolia"
  },
  {
    "objectID": "Directives-19",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "3rd party directives",
    "depth": 2,
    "text": "@ttl: Enable DynamoDB's time-to-live feature to auto-delete old entries in your AWS Amplify API"
  },
  {
    "objectID": "Directives-20",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "3rd party directives",
    "depth": 2,
    "text": "@firehose: Add a simple interceptor to all of your Amplify API mutations and queries"
  },
  {
    "objectID": "Directives-21",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "3rd party directives",
    "depth": 2,
    "text": "@retain: Enable the \"Retain\" deletion policy for your Amplify-generated DynamoDB tables"
  },
  {
    "objectID": "Directives-22",
    "title": "Directives",
    "description": "The Amplify CLI provides GraphQL directives to enhance your schema with additional capabilities, such as custom indexes, authorization rules, function triggers and more.",
    "slug": "/cli-legacy/graphql-transformer/directives",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "3rd party directives",
    "depth": 2,
    "text": "Looking to build your own transformers & directives? Check out the guide on how to author your own transformer & directives."
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The GraphQL Transform provides a simple to use abstraction that helps you quickly create backends for your web and mobile applications on AWS. With the GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library handles converting your SDL definition into a set of fully descriptive AWS CloudFormation templates that implement your data model."
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For example you might create the backend for a blog like this:"
  },
  {
    "objectID": "Overview-2",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The GraphQL Transform simplifies the process of\ndeveloping, deploying, and maintaining GraphQL APIs. With it, you define your API using the\nGraphQL Schema Definition Language (SDL) and can then use automation to transform it into a fully\ndescriptive cloudformation template that implements the spec. The transform also provides a framework\nthrough which you can define your own transformers as @directives for custom workflows."
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "Navigate into the root of a JavaScript, iOS, or Android project and run:"
  },
  {
    "objectID": "Overview-4",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "Follow the wizard to create a new app. After finishing the wizard run:"
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "Select the following options:"
  },
  {
    "objectID": "Overview-6",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "Select GraphQL"
  },
  {
    "objectID": "Overview-7",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "When asked if you have a schema, say No"
  },
  {
    "objectID": "Overview-8",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "Select one of the default samples; you can change this later"
  },
  {
    "objectID": "Overview-9",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "Choose to edit the schema and it will open the new schema.graphql in your\neditor"
  },
  {
    "objectID": "Overview-10",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "You can leave the sample as is or try this schema."
  },
  {
    "objectID": "Overview-11",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a GraphQL API",
    "depth": 2,
    "text": "Once you are happy with your schema, save the file and hit enter in your\nterminal window. if no error messages are thrown this means the transformation\nwas successful and you can deploy your new API."
  },
  {
    "objectID": "Overview-12",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Test the API",
    "depth": 2,
    "text": "Once the API is finished deploying, go to the AWS AppSync console or run amplify mock api to try some of these queries in your new API's query page."
  },
  {
    "objectID": "Overview-13",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "If you want to update your API, open your project's backend/api/~apiname~/schema.graphql file (NOT the one in the backend/api/~apiname~/build folder) and edit it in your favorite code editor. You can compile the backend/api/~apiname~/schema.graphql by running:"
  },
  {
    "objectID": "Overview-14",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "and view the compiled schema output in backend/api/~apiname~/build/schema.graphql."
  },
  {
    "objectID": "Overview-15",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "You can then push updated changes with:"
  },
  {
    "objectID": "Overview-16",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "The following schema updates require replacement of the underlying DynamoDB table:"
  },
  {
    "objectID": "Overview-17",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "Removing or renaming a model"
  },
  {
    "objectID": "Overview-18",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "Modifying the primary key of a model"
  },
  {
    "objectID": "Overview-19",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "Modifying a Local Secondary Index of a model (only applies to projects with secondaryKeyAsGSI turned off)"
  },
  {
    "objectID": "Overview-20",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "When trying to push a schema change with one or more of these updates you will see an error message explaining that you will lose ALL DATA in any table that requires replacement. To confirm you want to continue with the deployment, run:"
  },
  {
    "objectID": "Overview-21",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "In general, this command should only be used during development."
  },
  {
    "objectID": "Overview-22",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "If you are making a breaking change to a production API but you want to retain the data in the affected table(s), you can create a backup before running amplify push --allow-destructive-graphql-schema-updates"
  },
  {
    "objectID": "Overview-23",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Rebuild GraphQL API",
    "depth": 2,
    "text": "Rebuild should NEVER be used in a production environment!"
  },
  {
    "objectID": "Overview-24",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Rebuild GraphQL API",
    "depth": 2,
    "text": "When in development, sometimes test data gets in a bad state or you want to make many changes to your schema all at once. In these cases, you may wish to \"rebuild\" all of the tables backing your schema. To do this, run:"
  },
  {
    "objectID": "Overview-25",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Rebuild GraphQL API",
    "depth": 2,
    "text": "This will recreate ALL of the tables backing models in your schema. ALL DATA in ALL TABLES will be deleted."
  },
  {
    "objectID": "Overview-26",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "API Category Project Structure",
    "depth": 2,
    "text": "At a high level, the transform libraries take a schema defined in the GraphQL Schema Definition Language (SDL) and converts it into a set of AWS CloudFormation templates and other assets that are deployed as part of amplify push. The full set of assets uploaded can be found at amplify/backend/api/YOUR-API-NAME/build."
  },
  {
    "objectID": "Overview-27",
    "title": "Overview",
    "description": "With Amplify CLI and GraphQL Transform, you define your application's data model using the GraphQL Schema Definition Language (SDL) and the library converts your SDL schema into a set of fully descriptive AWS CloudFormation templates that implement your data model.",
    "slug": "/cli-legacy/graphql-transformer/overview",
    "category": "Amplify CLI (Legacy)",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "API Category Project Structure",
    "depth": 2,
    "text": "When creating APIs, you will make changes to the other files and directories in the amplify/backend/api/YOUR-API-NAME/ directory but you should not manually change anything in the build directory. The build directory will be overwritten the next time you run amplify push or amplify api gql-compile. Here is an overview of the API directory:"
  },
  {
    "objectID": "Feature Flags-0",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Feature flags makes it possible to fine tune given functionality in the Amplify CLI."
  },
  {
    "objectID": "Feature Flags-1",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "They are grouped into sections based on the area of the functionality. An area can be a category or some other scope. There are different type of feature flags defined, their lifetime is controlled the lifecycle process."
  },
  {
    "objectID": "Feature Flags-2",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Release",
    "depth": 3,
    "text": "These types of feature flags are used to enable or disable a given functionality in Amplify CLI that is under active development. These feature flags are removed and become unsupported once a feature has been shipped."
  },
  {
    "objectID": "Feature Flags-3",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Feature",
    "depth": 3,
    "text": "During the history of the Amplify CLI there are enhancements that can benefit for new projects but potentially can cause breaking changes in existing deployments. These feature flags are controlled by the lifecycle process to provide time for mitigation and migration. These type of flags are disabled for existing projects and enabled for new ones."
  },
  {
    "objectID": "Feature Flags-4",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Feature",
    "depth": 3,
    "text": "Examples"
  },
  {
    "objectID": "Feature Flags-5",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Feature",
    "depth": 3,
    "text": "Breaking existing projects by generating different code and would require a backend deployment."
  },
  {
    "objectID": "Feature Flags-6",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Feature",
    "depth": 3,
    "text": "The push operation of a changed resource would require a resource recreation that could lead to data loss."
  },
  {
    "objectID": "Feature Flags-7",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Feature",
    "depth": 3,
    "text": "The push operation of a changed resource would require data backfill to make the client application operable."
  },
  {
    "objectID": "Feature Flags-8",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Feature",
    "depth": 3,
    "text": "The generated code for client applications would require a rebuild and republish to be compatible with the newly pushed backend."
  },
  {
    "objectID": "Feature Flags-9",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Experimental",
    "depth": 3,
    "text": "Experimental feature flags are to enable experimentation with given functionality, to provide feedback to the Amplify CLI team. Enabling these feature in production is highly discouraged."
  },
  {
    "objectID": "Feature Flags-10",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Experimental",
    "depth": 3,
    "text": "The outcome of experimental features can be:"
  },
  {
    "objectID": "Feature Flags-11",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Experimental",
    "depth": 3,
    "text": "The feature will make into the product so it will be turned into a Release type feature flag."
  },
  {
    "objectID": "Feature Flags-12",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Experimental",
    "depth": 3,
    "text": "The experimental feature is not making into the product and removed from the codebase together with the code itself."
  },
  {
    "objectID": "Feature Flags-13",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Lifecycle",
    "depth": 2,
    "text": "Each type of feature flags are managed under a lifecycle management process. When a feature flag is added to the Amplify CLI it will be mentioned in the release notes and also this page will be updated with the detailed information. After adding a feature flag this page will contain information about what version a feature flag was added, what is the planned deprecation date - if there is one -, in which version the feature flag was deprecated, in which version the feature flag was removed."
  },
  {
    "objectID": "Feature Flags-14",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Lifecycle",
    "depth": 2,
    "text": "When a feature flag is deprecated it still can be used but when used a warning will be printed on the screen during the execution of Amplify CLI commands."
  },
  {
    "objectID": "Feature Flags-15",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Lifecycle",
    "depth": 2,
    "text": "Before removal a removal date is added to the feature flag, and after a feature flag is removed Amplify CLI will shows an error message about it and the version the feature flag was removed added to the page."
  },
  {
    "objectID": "Feature Flags-16",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Configuration",
    "depth": 2,
    "text": "Configuration of feature flags are primarily done by having an cli.json file in the project's amplify folder. If the file does not exist Amplify CLI creates it during the amplify init command. The emitted values are representing the default values for new projects. This file must be under version control, to make sure that the same features are used locally, in CI/CD environments, between team members. If an environment specific file exists for the currently checked out environment, during amplify env add command the same file will be copied for the newly created environment as well."
  },
  {
    "objectID": "Feature Flags-17",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Configuration",
    "depth": 2,
    "text": "Example configuration file"
  },
  {
    "objectID": "Feature Flags-18",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Configuration",
    "depth": 2,
    "text": "If for some reason different functionality is needed to be enabled for a given Amplify CLI environment a copy can be made of the project level file with the following naming convention: cli.{environment name}.json."
  },
  {
    "objectID": "Feature Flags-19",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Environment variables",
    "depth": 3,
    "text": "Amplify CLI supports the definition and override of feature flags values from environment variables and .env files as well."
  },
  {
    "objectID": "Feature Flags-20",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Environment variables",
    "depth": 3,
    "text": "The environment variables must follow a naming convention, to be picked up by Amplify CLI:"
  },
  {
    "objectID": "Feature Flags-21",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Environment variables",
    "depth": 3,
    "text": "Project level override: AMPLIFYCLI_{SECTION}__{PROPERTY}, for example: AMPLIFYCLI_GRAPHQLTRANSFORMER__TRANSFORMERVERSION"
  },
  {
    "objectID": "Feature Flags-22",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Environment variables",
    "depth": 3,
    "text": "Environment specific override: AMPLIFYCLI_{ENVNAME}_{SECTION}__{PROPERTY}, for example: AMPLIFYCLI_PROD_GRAPHQLTRANSFORMER__TRANSFORMERVERSION"
  },
  {
    "objectID": "Feature Flags-23",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Environment variables",
    "depth": 3,
    "text": "If a .env file is used in the project's root folder, then it is being merged on top of the current process' environment variables, overwriting those."
  },
  {
    "objectID": "Feature Flags-24",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Order of evaluation",
    "depth": 3,
    "text": "Due to the multiple levels of configuration options and overrides, Amplify CLI does a top-to-bottom evaluation as follows:"
  },
  {
    "objectID": "Feature Flags-25",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Order of evaluation",
    "depth": 3,
    "text": "cli.json"
  },
  {
    "objectID": "Feature Flags-26",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Order of evaluation",
    "depth": 3,
    "text": "cli.{environment name}.json"
  },
  {
    "objectID": "Feature Flags-27",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Order of evaluation",
    "depth": 3,
    "text": "Project level environment variables"
  },
  {
    "objectID": "Feature Flags-28",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Order of evaluation",
    "depth": 3,
    "text": "CLI Environment level environment variables"
  },
  {
    "objectID": "Feature Flags-29",
    "title": "Feature Flags",
    "description": "More information about feature flags in Amplify CLI",
    "slug": "/cli/reference/feature-flags",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Feature flags",
    "depth": 2,
    "text": "Note: feature flags are case-insensitive, however are described here in camelCase for readability"
  },
  {
    "objectID": "Diagnose-0",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Non-sensitive configurations of your Amplify backend can be securely shared with Amplify by running the command"
  },
  {
    "objectID": "Diagnose-1",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The CLI collects non-sensitive files from your Amplify backend into a zip file and transmits it to a secure location. Below are the files CLI collects, transmits and stores:"
  },
  {
    "objectID": "Diagnose-2",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "backend-config.json: Includes all the categories that were provided in the project."
  },
  {
    "objectID": "Diagnose-3",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "CloudFormation files: CLI generated CloudFormation files that are used to provide resources."
  },
  {
    "objectID": "Diagnose-4",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "cli.json: The feature flag configuration."
  },
  {
    "objectID": "Diagnose-5",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify.state: Internal metadata on how to invoke the function category."
  },
  {
    "objectID": "Diagnose-6",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "parameters.json and cli-inputs.json."
  },
  {
    "objectID": "Diagnose-7",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "schema.graphql or schema folder that are part of the GraphQL API."
  },
  {
    "objectID": "Diagnose-8",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "override.ts provides any custom extensions to the CloudFormation."
  },
  {
    "objectID": "Diagnose-9",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Function category dependency information stored in package files."
  },
  {
    "objectID": "Diagnose-10",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "After the zip file is transmitted successfully the current project’s unique identifier is printed. The identifier is used to access the zip file for debugging purposes by the support engineer."
  },
  {
    "objectID": "Diagnose-11",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Automatic Report Sharing",
    "depth": 3,
    "text": "To help improve Amplify CLI you can opt in to automatically share your project configurations with Amplify CLI on failures. The is a project level setting and can be toggled per project. The project can opt out by running"
  },
  {
    "objectID": "Diagnose-12",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Automatic Report Sharing",
    "depth": 3,
    "text": "and opt in by"
  },
  {
    "objectID": "Diagnose-13",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Automatic Report Sharing",
    "depth": 3,
    "text": "The CLI collects two extra files including the files below and the files collected using amplify diagnose --send-report"
  },
  {
    "objectID": "Diagnose-14",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Automatic Report Sharing",
    "depth": 3,
    "text": "Error details: Including the stack trace, message and error name."
  },
  {
    "objectID": "Diagnose-15",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Automatic Report Sharing",
    "depth": 3,
    "text": "CloudFormation updates when an amplify push is invoked."
  },
  {
    "objectID": "Diagnose-16",
    "title": "Diagnose",
    "description": "More information about diagnose command in Amplify CLI",
    "slug": "/cli/reference/diagnose",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Security",
    "depth": 2,
    "text": "In transit the zip file is encrypted using a public encrypt and private decrypt scheme. At rest the files are stored with AES 256 bit encryption. The files are retained for 60 days within which the files are marked for deletion. The files are solely used for debugging purposes and are not shared beyond the team."
  },
  {
    "objectID": "Usage Data in Amplify CLI-0",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "At AWS, we develop and launch services based on what we learn from interactions with our customers. We use customer feedback to iterate on our product. Anonymized usage data helps us to better understand our customers’ needs, diagnose issues, and deliver features that improve the customer experience."
  },
  {
    "objectID": "Usage Data in Amplify CLI-1",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI sends anonymized information such as system metadata, usage metrics, and errors. The data is marked for deletion in a year from the point of it being collected. Amplify CLI does not collect personally identifiable information such as email addresses, usernames, keys, ARNs or project information such as names, ARNs, and keys."
  },
  {
    "objectID": "Usage Data in Amplify CLI-2",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Manage usage data collection for your Amplify CLI Instance",
    "depth": 3,
    "text": "Disable usage data collection"
  },
  {
    "objectID": "Usage Data in Amplify CLI-3",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Manage usage data collection for your Amplify CLI Instance",
    "depth": 3,
    "text": "Run the following command to turn off Amplify CLI usage data collection"
  },
  {
    "objectID": "Usage Data in Amplify CLI-4",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Manage usage data collection for your Amplify CLI Instance",
    "depth": 3,
    "text": "Enable usage data collection"
  },
  {
    "objectID": "Usage Data in Amplify CLI-5",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Manage usage data collection for your Amplify CLI Instance",
    "depth": 3,
    "text": "Run the following command to turn on Amplify CLI usage data collection"
  },
  {
    "objectID": "Usage Data in Amplify CLI-6",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Manage usage data collection for your Amplify CLI Instance",
    "depth": 3,
    "text": "*Usage data collection is managed on a machine per installation basis enabling/disabling will change it for all the projects on that instance"
  },
  {
    "objectID": "Usage Data in Amplify CLI-7",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Learn More",
    "depth": 2,
    "text": "The usage data that's collected adheres to the AWS data privacy policies. For more information, see the following:"
  },
  {
    "objectID": "Usage Data in Amplify CLI-8",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Learn More",
    "depth": 2,
    "text": "AWS Service Terms"
  },
  {
    "objectID": "Usage Data in Amplify CLI-9",
    "title": "Usage Data in Amplify CLI",
    "description": "More information about usage data in Amplify CLI",
    "slug": "/cli/reference/usage-data",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Learn More",
    "depth": 2,
    "text": "Data Privacy"
  },
  {
    "objectID": "Files and Folders-0",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Folders",
    "depth": 2,
    "text": "The CLI places the following folder structure in the root directory of the project during amplify init:"
  },
  {
    "objectID": "Files and Folders-1",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/.config",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-2",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/.config",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-3",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/.config",
    "depth": 3,
    "text": "Contains files that store cloud configuration and settings/preferences. Run amplify configure to change the project configuration."
  },
  {
    "objectID": "Files and Folders-4",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/#current-cloud-backend",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-5",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/#current-cloud-backend",
    "depth": 3,
    "text": "Add to version control: NO"
  },
  {
    "objectID": "Files and Folders-6",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/#current-cloud-backend",
    "depth": 3,
    "text": "Contains the current cloud state of the checked out environment's resources. The contents of this folder should never be manually updated. It will be overwritten on operations such as amplify push, amplify pull or amplify env checkout."
  },
  {
    "objectID": "Files and Folders-7",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/backend",
    "depth": 3,
    "text": "Manual edits okay: YES"
  },
  {
    "objectID": "Files and Folders-8",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/backend",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-9",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/backend",
    "depth": 3,
    "text": "Contains the latest local development state of the checked out environment's resources. The contents of this folder can be modified and running amplify push will push changes in this directory to the cloud.\nEach plugin stores contents in its own subfolder within this folder."
  },
  {
    "objectID": "Files and Folders-10",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/mock-data",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-11",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/mock-data",
    "depth": 3,
    "text": "Add to version control: NO"
  },
  {
    "objectID": "Files and Folders-12",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify/mock-data",
    "depth": 3,
    "text": "Only created after running amplify mock api. It contains the SQLite databases that are used to back the local API when mocking. The contents should not be modified but you can delete the folder if you want to wipe your local API state."
  },
  {
    "objectID": "Files and Folders-13",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Core Amplify Files",
    "depth": 2,
    "text": "These files work together to maintain the overall state of the Amplify project such as what resources are configured in the project, dependencies between resources, and when the last push was."
  },
  {
    "objectID": "Files and Folders-14",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "backend-config.json",
    "depth": 3,
    "text": "Manual edits okay: YES"
  },
  {
    "objectID": "Files and Folders-15",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "backend-config.json",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-16",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "backend-config.json",
    "depth": 3,
    "text": "The backend-config.json in the backend directory contains configuration about your project's backend, such as how connects to AWS resources (eg. Cognito for auth or AppSync for an API backend). Typically, this file is updated by the CLI commands like amplify add auth or amplify add api. It can also be extended manually to configure your backend beyond Amplify CLI's features. Both the amplify/backend and amplify/#current-cloud-backend directories contain an backend-config.json file."
  },
  {
    "objectID": "Files and Folders-17",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify-meta.json",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-18",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify-meta.json",
    "depth": 3,
    "text": "Add to version control: NO"
  },
  {
    "objectID": "Files and Folders-19",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify-meta.json",
    "depth": 3,
    "text": "Both the amplify/backend and amplify/#current-cloud-backend directories contain an amplify-meta.json file. The amplify-meta.json in the backend directory serves as the whiteboard for the CLI core and the plugins to log internal information and communicate with each other."
  },
  {
    "objectID": "Files and Folders-20",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify-meta.json",
    "depth": 3,
    "text": "The CLI core provides read and write access to the file for the plugins. Core collects the selected providers' outputs after init and logs them under the \"providers\" object, e.g. the awscloudformation provider outputs the information of the root stack, the deployment S3 bucket, and the authorized/unauthorized IAM roles, and they are logged under the providers.awscloudformation object. Each category plugin logs information under its own name."
  },
  {
    "objectID": "Files and Folders-21",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify-meta.json",
    "depth": 3,
    "text": "Because one category might create multiple services within one project (e.g. the interactions category can create multiple bots), the category metadata generally follows a two-level structure like the following:"
  },
  {
    "objectID": "Files and Folders-22",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify-meta.json",
    "depth": 3,
    "text": "The metadata for each service is first logged into the meta file after the amplify <category> add command is executed, containing some general information that indicates one service of the category has been added locally.\nThen, on the successful execution of the amplify push command, the output object will be added/updated in the service's metadata with information that describes the actual cloud resources that have been created or updated."
  },
  {
    "objectID": "Files and Folders-23",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "aws-exports.js",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-24",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "aws-exports.js",
    "depth": 3,
    "text": "Add to version control: NO"
  },
  {
    "objectID": "Files and Folders-25",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "aws-exports.js",
    "depth": 3,
    "text": "This file is generated only for JavaScript projects.\nIt contains the consolidated outputs from all the categories and is placed under the src directory specified during the init process. It is updated after amplify push."
  },
  {
    "objectID": "Files and Folders-26",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "aws-exports.js",
    "depth": 3,
    "text": "This file is consumed by the Amplify JavaScript library for configuration. It contains information which is non-sensitive and only required for external, unauthenticated actions from clients (such as user registration or sign-in flows in the case of Auth) or for constructing appropriate endpoint URLs after authorization has taken place. Please see the following more detailed explanations:"
  },
  {
    "objectID": "Files and Folders-27",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "aws-exports.js",
    "depth": 3,
    "text": "Cognito security best practices for web app"
  },
  {
    "objectID": "Files and Folders-28",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "aws-exports.js",
    "depth": 3,
    "text": "Security / Best Practice for poolData (UserPoolId, ClientId) in a browser JS app"
  },
  {
    "objectID": "Files and Folders-29",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "aws-exports.js",
    "depth": 3,
    "text": "Are the Cognito User pool id and Client Id sensitive?"
  },
  {
    "objectID": "Files and Folders-30",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplifyconfiguration.json",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-31",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplifyconfiguration.json",
    "depth": 3,
    "text": "Add to version control: NO"
  },
  {
    "objectID": "Files and Folders-32",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplifyconfiguration.json",
    "depth": 3,
    "text": "This file is the same as aws-exports.js but for Android and iOS projects."
  },
  {
    "objectID": "Files and Folders-33",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplifyconfiguration.json",
    "depth": 3,
    "text": "It is consumed by the iOS and Android native SDKs for configuration."
  },
  {
    "objectID": "Files and Folders-34",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": ".gitignore",
    "depth": 3,
    "text": "Manual edits okay: YES"
  },
  {
    "objectID": "Files and Folders-35",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": ".gitignore",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-36",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": ".gitignore",
    "depth": 3,
    "text": "When a new project is initialized from the Amplify CLI, Amplify will append the following to the .gitignore file in the root directory. A .gitignore file will be created if one does not exist."
  },
  {
    "objectID": "Files and Folders-37",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "team-provider-info.json",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-38",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "team-provider-info.json",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-39",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "team-provider-info.json",
    "depth": 3,
    "text": "Used to share project info within your team. Learn more at Share single environment."
  },
  {
    "objectID": "Files and Folders-40",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "cli.json",
    "depth": 3,
    "text": "Manual edits okay: YES"
  },
  {
    "objectID": "Files and Folders-41",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "cli.json",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-42",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "cli.json",
    "depth": 3,
    "text": "Contains feature flag configuration for the project. If this file does not exist, it is created by Amplify CLI during amplify init. Environment specific feature flag overrides can also be defined in cli.<environment name>.json.  If an environment specific file exists for the currently checked out environment, during amplify env add command the same file will be copied for the newly created environment as well. Learn more at Feature flags."
  },
  {
    "objectID": "Files and Folders-43",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "General Category Files",
    "depth": 2,
    "text": "While each category plugin has some unique files, there are also some common files stored across all categories."
  },
  {
    "objectID": "Files and Folders-44",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "cli-inputs.json",
    "depth": 3,
    "text": "Manual edits okay: YES"
  },
  {
    "objectID": "Files and Folders-45",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "cli-inputs.json",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-46",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "cli-inputs.json",
    "depth": 3,
    "text": "Stores the input parameters necessary to generate CloudFormation stacks for the associated resource."
  },
  {
    "objectID": "Files and Folders-47",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "override.ts",
    "depth": 3,
    "text": "Manual edits okay: YES"
  },
  {
    "objectID": "Files and Folders-48",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "override.ts",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-49",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "override.ts",
    "depth": 3,
    "text": "TypeScript file that allows overriding the associated CloudFormation stack for categories that support it. To create this file, run amplify override <category>."
  },
  {
    "objectID": "Files and Folders-50",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "<category>-parameters.json",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-51",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "<category>-parameters.json",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-52",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "<category>-parameters.json",
    "depth": 3,
    "text": "Stores the parameters selected during amplify add <category> so they can be used to populate answers during amplify update <category>. This file does NOT change the underlying category configuration; it is only used to populate answers in the walkthrough."
  },
  {
    "objectID": "Files and Folders-53",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "parameters.json",
    "depth": 3,
    "text": "Manual edits okay: YES"
  },
  {
    "objectID": "Files and Folders-54",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "parameters.json",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-55",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "parameters.json",
    "depth": 3,
    "text": "Contains a JSON object that maps CloudFormation parameter names to values that will be passed to the CloudFormation template for the category. For example, if the CloudFormation template has the parameter:"
  },
  {
    "objectID": "Files and Folders-56",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "parameters.json",
    "depth": 3,
    "text": "And parameters.json contains"
  },
  {
    "objectID": "Files and Folders-57",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "parameters.json",
    "depth": 3,
    "text": "Then the value of \"RoleArn\" when the template is pushed will be \"<role ARN override>\"."
  },
  {
    "objectID": "Files and Folders-58",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify.state",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-59",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify.state",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-60",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "amplify.state",
    "depth": 3,
    "text": "Contains internal metadata about how the CLI should build and invoke the function."
  },
  {
    "objectID": "Files and Folders-61",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "transform.conf.json",
    "depth": 3,
    "text": "Manual edits okay: NO"
  },
  {
    "objectID": "Files and Folders-62",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "transform.conf.json",
    "depth": 3,
    "text": "Add to version control: YES"
  },
  {
    "objectID": "Files and Folders-63",
    "title": "Files and Folders",
    "description": "Learn more about the files and folders Amplify uses to maintain project state.",
    "slug": "/cli/reference/files",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "transform.conf.json",
    "depth": 3,
    "text": "Contains configuration about how to interpret the GraphQL schema and transform it into AppSync resolvers. Run amplify api update to change API category configuration."
  },
  {
    "objectID": "IAM Roles & MFA-0",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can optionally configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared ~/.aws/config file. This is similar to how the AWS CLI functions, including short term credentials. This can be useful when you have multiple developers using one or more AWS accounts, including team workflows where you want to restrict the category updates they might be permitted to make."
  },
  {
    "objectID": "IAM Roles & MFA-1",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When prompted during the execution of amplify init or the amplify configure project command, you will select a configured profile for the role, and the Amplify CLI will handle the logic to retrieve, cache and refresh the temp credentials. If Multi-Factor Authentication (MFA) is enabled, the CLI will prompt you to enter the MFA token code when it needs to retrieve or refresh temporary credentials."
  },
  {
    "objectID": "IAM Roles & MFA-2",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI has its own mechanism of caching temporary credentials, it does NOT use the same cache of the AWS CLI. The temporary credentials are cached at ~/.amplify/awscloudformation/cache.json. You can remove all cached credentials by removing this file.\nIf you only want to remove the cached temp credentials associated with a particular project, execute amplify awscloudformation reset-cache or it's alias amplify aws reset-cache in the project."
  },
  {
    "objectID": "IAM Roles & MFA-3",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Step by step guide to create and assume an IAM role",
    "depth": 2,
    "text": "The following is a step by step guide on how to create an IAM role and make it available for the Amplify CLI."
  },
  {
    "objectID": "IAM Roles & MFA-4",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Step by step guide to create and assume an IAM role",
    "depth": 2,
    "text": "The setup has three parts, we will use an example to demonstrate this capability."
  },
  {
    "objectID": "IAM Roles & MFA-5",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "Step by step guide to create and assume an IAM role",
    "depth": 2,
    "text": "Assume Biz Corp has decided to hire Dev Corp to develop its inventory management web portal, and Dev Corp is using the Amplify CLI to speed up the development process."
  },
  {
    "objectID": "IAM Roles & MFA-6",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Sign in to the AWS Management Console and open the IAM console."
  },
  {
    "objectID": "IAM Roles & MFA-7",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "In the navigation pane of the console, choose Roles and then choose Create role."
  },
  {
    "objectID": "IAM Roles & MFA-8",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Choose the Another AWS account role type."
  },
  {
    "objectID": "IAM Roles & MFA-9",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "For Account ID, type Dev Corp's AWS account ID (the account ID of the entity you want to grant access to your AWS resources)."
  },
  {
    "objectID": "IAM Roles & MFA-10",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Although optional, it is recommended to select Require external ID and enter the external id given to you by Dev Corp. (click here for more details on external IDs)."
  },
  {
    "objectID": "IAM Roles & MFA-11",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "If you want to restrict the role to users who sign in with multi-factor authentication (MFA), select Require MFA(click here for more details on MFA)."
  },
  {
    "objectID": "IAM Roles & MFA-12",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Choose Next: Permissions."
  },
  {
    "objectID": "IAM Roles & MFA-13",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Select permissions policies that you want the developers from Dev Corp to have when the role is assumed.\nNote: You MUST grant the role permissions to perform CloudFormation actions and create associated resources (depending on the categories you use in your project) such as:"
  },
  {
    "objectID": "IAM Roles & MFA-14",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Cognito User and Identity Pools"
  },
  {
    "objectID": "IAM Roles & MFA-15",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "S3 buckets"
  },
  {
    "objectID": "IAM Roles & MFA-16",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "DynamoDB tables"
  },
  {
    "objectID": "IAM Roles & MFA-17",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "AppSync APIs"
  },
  {
    "objectID": "IAM Roles & MFA-18",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "API Gateway APIs"
  },
  {
    "objectID": "IAM Roles & MFA-19",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Pinpoint endpoints"
  },
  {
    "objectID": "IAM Roles & MFA-20",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Cloudfront distributions"
  },
  {
    "objectID": "IAM Roles & MFA-21",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "IAM Roles"
  },
  {
    "objectID": "IAM Roles & MFA-22",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Lambda functions"
  },
  {
    "objectID": "IAM Roles & MFA-23",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Lex bots"
  },
  {
    "objectID": "IAM Roles & MFA-24",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Choose Next: Tagging, attach tags if you want (optional)."
  },
  {
    "objectID": "IAM Roles & MFA-25",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Choose Next: Review, type a name for your role, and optionally add the role description."
  },
  {
    "objectID": "IAM Roles & MFA-26",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Enter the required fields such as the \"Role name\"."
  },
  {
    "objectID": "IAM Roles & MFA-27",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Choose Create role."
  },
  {
    "objectID": "IAM Roles & MFA-28",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "1. Set up the role (Biz Corp)",
    "depth": 2,
    "text": "Give the Role Arn to Dev Corp."
  },
  {
    "objectID": "IAM Roles & MFA-29",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.1 Create a policy that has permission to assume the role created above by Biz corp",
    "depth": 3,
    "text": "Get the Role Arn from Biz Corp."
  },
  {
    "objectID": "IAM Roles & MFA-30",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.1 Create a policy that has permission to assume the role created above by Biz corp",
    "depth": 3,
    "text": "Sign in to the AWS Management Console and open the IAM console. (Assuming Dev corp has a separate AWS account)."
  },
  {
    "objectID": "IAM Roles & MFA-31",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.1 Create a policy that has permission to assume the role created above by Biz corp",
    "depth": 3,
    "text": "In the navigation pane of the console, choose Policies and then choose Create policy."
  },
  {
    "objectID": "IAM Roles & MFA-32",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.1 Create a policy that has permission to assume the role created above by Biz corp",
    "depth": 3,
    "text": "Select the 'JSON' tab and paste the following contents in the pane, replacing <biz_corp_rol_arn> with the value previously noted."
  },
  {
    "objectID": "IAM Roles & MFA-33",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.1 Create a policy that has permission to assume the role created above by Biz corp",
    "depth": 3,
    "text": "Choose Review policy."
  },
  {
    "objectID": "IAM Roles & MFA-34",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.1 Create a policy that has permission to assume the role created above by Biz corp",
    "depth": 3,
    "text": "Type in the policy Name, and optionally add the policy description."
  },
  {
    "objectID": "IAM Roles & MFA-35",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.1 Create a policy that has permission to assume the role created above by Biz corp",
    "depth": 3,
    "text": "Choose Create policy."
  },
  {
    "objectID": "IAM Roles & MFA-36",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Sign in to the AWS Management Console and open the IAM console."
  },
  {
    "objectID": "IAM Roles & MFA-37",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "In the navigation pane of the console, choose Users and then choose Add user."
  },
  {
    "objectID": "IAM Roles & MFA-38",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Type the User name for the new user."
  },
  {
    "objectID": "IAM Roles & MFA-39",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Select Programmatic access for Access type."
  },
  {
    "objectID": "IAM Roles & MFA-40",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Choose Next: Permissions."
  },
  {
    "objectID": "IAM Roles & MFA-41",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "On the Set Permissions Page, select Attach existing policies directly."
  },
  {
    "objectID": "IAM Roles & MFA-42",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Select the policy created in 2.1."
  },
  {
    "objectID": "IAM Roles & MFA-43",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Choose Next: Tagging, attach tags if you wish (optional)."
  },
  {
    "objectID": "IAM Roles & MFA-44",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Choose Next: Review."
  },
  {
    "objectID": "IAM Roles & MFA-45",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Choose Create User."
  },
  {
    "objectID": "IAM Roles & MFA-46",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.2 Attach the policy to the user",
    "depth": 3,
    "text": "Click Download .csv to download a copy of the credentials. You can, optionally, copy paste the Access Key ID and Secret Access Key and store it in a safe location. These credentials would be used in a later section."
  },
  {
    "objectID": "IAM Roles & MFA-47",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "This must be set up if the Biz Corp selected to Require MFA when creating the role. This needs to be set up by Dev Corp users and in their respective AWS account.\nWe are using a virtual MFA device, such as the Google Authenticator app, in this example."
  },
  {
    "objectID": "IAM Roles & MFA-48",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "Sign in to the AWS Management Console and open the IAM console."
  },
  {
    "objectID": "IAM Roles & MFA-49",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "In the navigation pane of the console, choose Users and select the user created above in 2.2."
  },
  {
    "objectID": "IAM Roles & MFA-50",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "Select the Security Credentials tab."
  },
  {
    "objectID": "IAM Roles & MFA-51",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "Next to the Assigned MFA device label, choose the Manage option."
  },
  {
    "objectID": "IAM Roles & MFA-52",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "In the Manage MFA Device wizard, choose Virtual MFA device, and then choose Continue."
  },
  {
    "objectID": "IAM Roles & MFA-53",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "Choose Show QR code if the MFA app supports QR code, and scan the QR code from your virtual device(Google Authenticator app in our case), if not, choose Show secret key and type it into the MFA app."
  },
  {
    "objectID": "IAM Roles & MFA-54",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "In the MFA code 1 box, type the one-time password that currently appears in the virtual MFA device. Wait for the device to generate a new one-time password. Then type the second one-time password into the MFA code 2 box. Then choose Assign MFA."
  },
  {
    "objectID": "IAM Roles & MFA-55",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "2.3 Assign MFA device (Optional)",
    "depth": 3,
    "text": "Copy the MFA device arn next to Assigned MFA device, which will be used in part 3."
  },
  {
    "objectID": "IAM Roles & MFA-56",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "3. Set up the local development environment (Dev Corp)",
    "depth": 2,
    "text": "On the local development system, create the following two files if they do not exist.\n~/.aws/config\n~/.aws/credentials"
  },
  {
    "objectID": "IAM Roles & MFA-57",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "3. Set up the local development environment (Dev Corp)",
    "depth": 2,
    "text": "Insert the following contents into the ~/.aws/config file:"
  },
  {
    "objectID": "IAM Roles & MFA-58",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "3. Set up the local development environment (Dev Corp)",
    "depth": 2,
    "text": "mfa_serial and external_id are optional, leave them out if they are not configured."
  },
  {
    "objectID": "IAM Roles & MFA-59",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "3. Set up the local development environment (Dev Corp)",
    "depth": 2,
    "text": "Insert the following contents into the ~/.aws/credentials file:"
  },
  {
    "objectID": "IAM Roles & MFA-60",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "3. Set up the local development environment (Dev Corp)",
    "depth": 2,
    "text": "Now, when Dev Corp is trying to initialize an Amplify Project, the user can select the bizcorprole profile configured above, and based on the authentication method set up the user would be prompted with corresponding questions such as MFA codes. After this, the user would be able to successfully deploy/manage AWS resources in Biz corps account (based on the access policies set by the Biz corp)."
  },
  {
    "objectID": "IAM Roles & MFA-61",
    "title": "IAM Roles & MFA",
    "description": "Configure the Amplify CLI to assume an IAM role by defining a profile for the role in the shared `~/.aws/config` file.",
    "slug": "/cli/reference/iam-roles-mfa",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": "3. Set up the local development environment (Dev Corp)",
    "depth": 2,
    "text": "You can take a look at AWS IAM and the AWS CLI documentation for more details on IAM role and its usage."
  },
  {
    "objectID": "IAM Policy-0",
    "title": "IAM Policy",
    "description": "The Amplify CLI requires several IAM policies for performing actions across all categories. You can grant or restrict category permissions by including or removing items from the `Action` section as appropriate.",
    "slug": "/cli/reference/iam",
    "category": "Amplify CLI",
    "subcategory": "Reference",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI requires the below IAM policies for performing actions across all categories. You can grant or restrict category permissions by including or removing items from the Action section as appropriate. For example, if you wish to restrict operations on the Auth category you can remove any of the lines starting with cognito."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-0",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI is changing the default owner value in GraphQL APIs in v8.1.0. Previously, the API stored only the username by default. In this next release behind a feature flag, and in an upcoming major CLI release, the GraphQL Transformer will store a user's unique sub and username."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-1",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 2,
    "text": "In the Amplify CLI >= v8.0.3 owner-based @auth rule uses \"username\" as the default identity claim from a JSON Web Token from AWS Cognito and stores it under the owner field in your app's DynamoDB table. This means the owner field of a record will be queried and populated with a user's username. The Amplify CLI GraphQL Transformer is changing the default identityClaim to use a combination of sub - the unique ID (uuid) given by Cognito in your User Pool - and username from the JWT token with a delimiter of ::."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-2",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What are the breaking changes?",
    "depth": 2,
    "text": "The sort key fields for your @primaryKeys can no longer be part of an owner-based authorization's ownerField. This also applies to the auto-generated owner field when you add owner-based authorization @auth(rules: [{ allow: owner }]). Here are two primary examples that don't support this:"
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-3",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What are the breaking changes?",
    "depth": 2,
    "text": "If your table requires this configuration, it is recommended to set the identityClaim to username."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-4",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What are the breaking changes?",
    "depth": 2,
    "text": "Additionally, if you want to continue making queries with the owner field as the secondary query parameter, consider using the @index directive instead. Using the mentioned example, you can set up a query as the following:"
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-5",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What are the breaking changes?",
    "depth": 2,
    "text": "You will be able to query your Todo by user with the following query:"
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-6",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What are the breaking changes?",
    "depth": 2,
    "text": "Learn more about configuring the @index directive here."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-7",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What are the breaking changes?",
    "depth": 2,
    "text": "There are no other breaking changes to your GraphQL API when using the new default identity claim. The resolvers will store these values in your DynamoDB tables in the format of <sub>::<username>, and return username to the client code by default."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-8",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What are the breaking changes?",
    "depth": 2,
    "text": "While the other directives will work as they are currently expected to function (i.e. @searchable, @function), using custom queries to your databases may need to be changed. For example, if you are performing a query with the filter parameter, you will need to change it from using the filter query with just 1 argument to using an or conditional statement like the following:"
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-9",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What are the breaking changes?",
    "depth": 2,
    "text": "Another example of changing your queries is if you are using OpenSearch for a custom query like the one below, you will need your queries to account for the format of the stored owner field with a matching operation (https://docs.amplify.aws/cli/graphql/search-and-result-aggregations/#supported-search-operations). Here's an example of using the match operation:"
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-10",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Automatic changes the CLI will make for new apps",
    "depth": 3,
    "text": "If you are creating a new Amplify app, your app's GraphQL API will be created using the \"sub::username\" identity claim, and no further action is required from you. Your database records will store the uuid and username in the owner field in the format of <sub>::<username>, and the API will return <username>."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-11",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Automatic changes the CLI will make for new apps",
    "depth": 3,
    "text": "If you would like to use username for the identity claim without storing sub, specify in your schema the following:"
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-12",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Manual changes to continue using \"username\" for existing apps",
    "depth": 3,
    "text": "If you have an existing schema that uses owner-based @auth with an implicit identity claim rule on a type or field similar to this:"
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-13",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Manual changes to continue using \"username\" for existing apps",
    "depth": 3,
    "text": "Your GraphQL schema is using the default identity claim \"username\" and the Amplify CLI GraphQL Transformer is using the default value to generate your VTL files. Therefore, your schema is read as:"
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-14",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Manual changes to continue using \"username\" for existing apps",
    "depth": 3,
    "text": "The Amplify CLI is changing the default to \"sub::username\" in v9.0.0, so if your identityClaim is not explicitly defined, the transformers will use \"sub::username\" unless you have set \"username\" to your schema as shown above."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-15",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Manual changes to continue using \"username\" for existing apps",
    "depth": 3,
    "text": "In the initial release, this functionality will be behind a feature flag, useSubUsernameForDefaultIdentityClaim, with false as the default value. Setting the feature flag to true enables the transformers to use the new identity claim; however, it is recommended to explicitly state your identity claim moving forward as this feature flag is only temporary (as shown above)."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-16",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Manual changes to use \"sub::username\" for existing apps",
    "depth": 3,
    "text": "If you wish to migrate your VTL files before the changes in v9.0.0, set your identityClaim to \"sub::username\"."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-17",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Manual changes to use \"sub::username\" for existing apps",
    "depth": 3,
    "text": "Keep in mind that if you have existing owner records in your database and owner-reliant code in your code base, these changes will not migrate your data. The resolvers are backwards compatible, so your API will still be compatible with the former contract that uses username for the owner field. In other words, when using the sub::username identity claim, your resolvers will authorize both username and sub values from the record that match the JWT, but the resolvers will write <sub>::<username> when no owner field input is specified."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-18",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is the timeline?",
    "depth": 2,
    "text": "v8.1.0 of the Amplify CLI is introducing the feature flag, useSubUsernameForDefaultIdentityClaim, that will allow developers to opt into the sub::username default. New Amplify apps created will already be opted into the feature flag, but developers that want to use the new default will have to opt in. For existing Amplify apps, that do not have the feature flag, useSubUsernameForDefaultIdentityClaim will default to false."
  },
  {
    "objectID": "GraphQL Transformer @auth identity claim changes-19",
    "title": "GraphQL Transformer @auth identity claim changes",
    "description": "",
    "slug": "/cli/migration/identity-claim-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is the timeline?",
    "depth": 2,
    "text": "The Amplify CLI team will release v9.0.0, with the feature flag removed, and developers will need to manually set \"username\" to their schemas to maintain their former API contract, or the resolvers will start to store sub::username in their databases."
  },
  {
    "objectID": "Migrate project to another AWS account-0",
    "title": "Migrate project to another AWS account",
    "description": "Amplify CLI can be used to easily re-create resources in a different AWS account.",
    "slug": "/cli/migration/cli-migrate-aws-account",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI can be used to easily re-create resources in a different AWS account."
  },
  {
    "objectID": "Migrate project to another AWS account-1",
    "title": "Migrate project to another AWS account",
    "description": "Amplify CLI can be used to easily re-create resources in a different AWS account.",
    "slug": "/cli/migration/cli-migrate-aws-account",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run the following steps to migrate an existing project to another AWS account."
  },
  {
    "objectID": "Migrate project to another AWS account-2",
    "title": "Migrate project to another AWS account",
    "description": "Amplify CLI can be used to easily re-create resources in a different AWS account.",
    "slug": "/cli/migration/cli-migrate-aws-account",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Clone your repository"
  },
  {
    "objectID": "Migrate project to another AWS account-3",
    "title": "Migrate project to another AWS account",
    "description": "Amplify CLI can be used to easily re-create resources in a different AWS account.",
    "slug": "/cli/migration/cli-migrate-aws-account",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run amplify init"
  },
  {
    "objectID": "Migrate project to another AWS account-4",
    "title": "Migrate project to another AWS account",
    "description": "Amplify CLI can be used to easily re-create resources in a different AWS account.",
    "slug": "/cli/migration/cli-migrate-aws-account",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Select an AWS Profile that will connect to the new account (Do not use an existing environment)"
  },
  {
    "objectID": "Migrate project to another AWS account-5",
    "title": "Migrate project to another AWS account",
    "description": "Amplify CLI can be used to easily re-create resources in a different AWS account.",
    "slug": "/cli/migration/cli-migrate-aws-account",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI updates the amplify/team-provider-info.json file with the new environment name. Run amplify env list to see an additional environment that is connected to the account of the new profile."
  },
  {
    "objectID": "Migrate project to another AWS account-6",
    "title": "Migrate project to another AWS account",
    "description": "Amplify CLI can be used to easily re-create resources in a different AWS account.",
    "slug": "/cli/migration/cli-migrate-aws-account",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If your project includes custom resources, cloning the project to a new environment may not work correctly.\nEnsure that custom resource names are parameterized to guarantee uniqueness when cloning between accounts, regions and Amplify environments"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-0",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 3,
    "text": "Amplify CLI 5.1.2 has updated the codegen process to correctly set the optionality for types in models."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-1",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 3,
    "text": "Schema example"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-2",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 3,
    "text": "In this example, there are four fields with different combinations of optionality:"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-3",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 3,
    "text": "requiredElementRequiredList - the list itself is required. Elements it contains must be non-null. Empty lists can only be represented as an empty array."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-4",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 3,
    "text": "requiredElementOptionalList - the list itself is optional. If present, elements it contains must be non-null. Empty lists could be represented as either an empty array or a null field."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-5",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 3,
    "text": "optionalElementRequiredList - the list itself is required. If present, elements it contains may be null."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-6",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 3,
    "text": "optionalElementOptionalList - the list itself is optional. If present, elements it contains may be null."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-7",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is changing?",
    "depth": 3,
    "text": "The list component in this example is a String type, however, this applies for other types as well such as Int, Bool, and embedded types that you define yourself."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-8",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Why are we introducing this change?",
    "depth": 3,
    "text": "This is to align the optionality of the generated Swift models as closely as possible to the type defined in the schema."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-9",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is impacted?",
    "depth": 3,
    "text": "Developers building an iOS app with Amplify DataStore or Amplify API generates Swift models by running the command amplify codegen models."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-10",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is impacted?",
    "depth": 3,
    "text": "Previous generated Swift code"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-11",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is impacted?",
    "depth": 3,
    "text": "Current code generated Swift code"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-12",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is impacted?",
    "depth": 3,
    "text": "The difference between the current and previous code:"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-13",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is impacted?",
    "depth": 3,
    "text": "requiredElementRequiredList - No changes"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-14",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is impacted?",
    "depth": 3,
    "text": "requiredElementOptionalList - the list was required and is now optional."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-15",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is impacted?",
    "depth": 3,
    "text": "optionalElementRequiredList - the list component was required and is now optional. The list was optional and is now required"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-16",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is impacted?",
    "depth": 3,
    "text": "optionalElementOptionalList - the list component was required and is now optional."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-17",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "When do I have to upgrade?",
    "depth": 3,
    "text": "This is behind a feature flag in Amplify CLI 5.1.2 and will be deprecated by November 1st, 2021. Developers with existing apps should upgrade to the latest CLI, set the feature flag, and update their app code or their schema (see recommendations following) to account for the change in optionality of the types. Developers building a new app will automatically generate code with the latest changes and no action is required."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-18",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Update Amplify CLI to the latest version"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-19",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "The version should be at least 5.1.2"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-20",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "If building an existing app, set the feature flag handleListNullabilityTransparently to true in cli.json at the amplify project root."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-21",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Run amplify codegen models to generate the latest models."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-22",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Open the App and make sure the app compiles with the latest generated models. Depending on your schema, you may be in the following scenarios."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-23",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Scenario 1. Schema: requiredElementOptionalList: [String!]"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-24",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Since the list was required and is now optional, unwrap the optional to retrieve the values."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-25",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Recommendation: Update the type in the schema from [String!] to[String!]! to make the list required if you do not have an app use case for storing a null list. This will remove the need to unwrap the list in code."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-26",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Scenario 2. Schema: optionalElementRequiredList: [String]!"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-27",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Since the list component was required and is now optional, unwrap the optional value to retrieve the value. The list was optional and is now required, remove any unwrapping done for the list."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-28",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Recommendation: Update the type in the schema from [String]! to [String!]! to make the list component required if you do not store null values in the list. This will remove the need to unwrap the list component in code."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-29",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Scenario 3. Schema: optionalElementOptionalList: [String]"
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-30",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Since the list component was required and is now optional, unwrap the optional value to retrieve the value."
  },
  {
    "objectID": "Amplify Codegen Models - List and list components nullability-31",
    "title": "Amplify Codegen Models - List and list components nullability",
    "description": "Generating Amplify models with Amplify CLI 5.1.2",
    "slug": "/cli/migration/list-nullability",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Where do I make these changes?",
    "depth": 3,
    "text": "Recommendation: Update the type in the schema from [String] to [String!]! to make the list and list component required if you do not store null values in the list or a null list. This will remove the need to unwrap the list and the list components."
  },
  {
    "objectID": "CLI Auth Signup Changes-0",
    "title": "CLI Auth Signup Changes",
    "description": "",
    "slug": "/cli/migration/cli-auth-signup-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is affected?",
    "depth": 2,
    "text": "This article is relevant to you if you have an Auth resource created using  amplify add auth  with CLI versions 5.2.0 - 5.6.0."
  },
  {
    "objectID": "CLI Auth Signup Changes-1",
    "title": "CLI Auth Signup Changes",
    "description": "",
    "slug": "/cli/migration/cli-auth-signup-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Who is affected?",
    "depth": 2,
    "text": "If your Auth resource was created with   amplify add auth using Amplify CLI Version 5.1.2 or earlier, or with Amplify CLI version 6.0.0 or later, you are not affected and you can ignore the rest of this article."
  },
  {
    "objectID": "CLI Auth Signup Changes-2",
    "title": "CLI Auth Signup Changes",
    "description": "",
    "slug": "/cli/migration/cli-auth-signup-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "The Original CLI  amplify add auth Behavior (versions prior to 5.2.0)",
    "depth": 3,
    "text": "Prior to CLI version 5.2.0, developers could choose one of these options:"
  },
  {
    "objectID": "CLI Auth Signup Changes-3",
    "title": "CLI Auth Signup Changes",
    "description": "",
    "slug": "/cli/migration/cli-auth-signup-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "The Changed CLI amplify add auth Behavior (CLI versions 5.2.0 - 5.6.0)",
    "depth": 3,
    "text": "In the CLI release 5.2.0 (July 27, 2021), additional functionality was added for developers configuring Auth.\nBeginning in CLI version 5.2.0, developers could choose any of these options"
  },
  {
    "objectID": "CLI Auth Signup Changes-4",
    "title": "CLI Auth Signup Changes",
    "description": "",
    "slug": "/cli/migration/cli-auth-signup-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Back to the Original Behavior (CLI version 6.0.0 and later)",
    "depth": 3,
    "text": "Beginning in CLI v6.0.0, the original behavior is reinstated and developers can once again choose one of these options:"
  },
  {
    "objectID": "CLI Auth Signup Changes-5",
    "title": "CLI Auth Signup Changes",
    "description": "",
    "slug": "/cli/migration/cli-auth-signup-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is the impact of this change",
    "depth": 2,
    "text": "If you configured the Auth Resource with the changed amplify add auth behavior (CLI v5.2 - v5.6) you will need to use the changed  amplify add auth behavior whenever you run amplify add auth in order to get a compatible configuration. You can use the changed amplify add auth behavior in CLI v6.0.0 by enabling the \"auth.forceAliasAttributes\" feature flag."
  },
  {
    "objectID": "CLI Auth Signup Changes-6",
    "title": "CLI Auth Signup Changes",
    "description": "",
    "slug": "/cli/migration/cli-auth-signup-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is the impact of this change",
    "depth": 2,
    "text": "The following code segment demonstrates how Auth.signup() can be used with the Auth resource created with CLI versions 5.2.0 - 5.6.0:"
  },
  {
    "objectID": "CLI Auth Signup Changes-7",
    "title": "CLI Auth Signup Changes",
    "description": "",
    "slug": "/cli/migration/cli-auth-signup-changes",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "What is the impact of this change",
    "depth": 2,
    "text": "The following code segment demonstrates how Auth.signup() can be used with the Auth resource created with CLI versions 6.0 and later (this segment would not work for Auth configured with CLI 5.2.0 - 5.6.0):"
  },
  {
    "objectID": "Lambda layer behavior updates-0",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0. Amplify CLI enables you to configure Lambda layers to pull common code & assets for your Lambda functions into a centralized location."
  },
  {
    "objectID": "Lambda layer behavior updates-1",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In order to take advantage of the newest features and bug fixes, a one-way migration is required for layers created with an older Amplify CLI version. All developers working on a common Amplify project and any CI/CD pipelines should upgrade to the latest version of Amplify CLI."
  },
  {
    "objectID": "Lambda layer behavior updates-2",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "How to initiate layer migration",
    "depth": 2,
    "text": "Any update to an existing Lambda layer triggers a migration for that layer upon amplify push. Once the layers are migrated, the layers CANNOT be used with Amplify CLI below version 5.0.0."
  },
  {
    "objectID": "Lambda layer behavior updates-3",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Changes to layer behavior",
    "depth": 2,
    "text": "Starting with the Amplify CLI version 5.0.0 and above, the following changes are coming to Lambda layers:"
  },
  {
    "objectID": "Lambda layer behavior updates-4",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Changes to layer behavior",
    "depth": 2,
    "text": "Ability to pin a function to always use the latest layer version of a Lambda layer"
  },
  {
    "objectID": "Lambda layer behavior updates-5",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Changes to layer behavior",
    "depth": 2,
    "text": "Layers auto-installs and packages dependencies listed within package.json or Pipfile"
  },
  {
    "objectID": "Lambda layer behavior updates-6",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Changes to layer behavior",
    "depth": 2,
    "text": "Ability to customize layer version descriptions"
  },
  {
    "objectID": "Lambda layer behavior updates-7",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Changes to layer behavior",
    "depth": 2,
    "text": "Ability to delete individual Lambda layer versions"
  },
  {
    "objectID": "Lambda layer behavior updates-8",
    "title": "Lambda layer behavior updates",
    "description": "Amplify has updated the way Lambda layer versions are managed with Amplify CLI version 5.0.0.",
    "slug": "/cli/migration/lambda-layers-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Changes to layer behavior",
    "depth": 2,
    "text": "Bug fix: Layer version updates are now managed globally, preventing multiple team members from creating conflicting layer versions"
  },
  {
    "objectID": "Node Version Update-0",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Node.js 8.10 to Node.js 10.x",
    "depth": 2,
    "text": "According to AWS Lambda Runtime Support Policy, AWS Lambda deprecates Node.js runtime Node.js 8.10 on January 6th, 2020."
  },
  {
    "objectID": "Node Version Update-1",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Node.js 8.10 to Node.js 10.x",
    "depth": 2,
    "text": "The Amplify CLI code base has been updated to reflect this change. Amplify CLI replaces Node.js 8.10 with Node.js 10 in the Lambda functions that it creates for you. If you use Amplify CLI version 4.10.0 and above to create new aws resources, this does not concern you."
  },
  {
    "objectID": "Node Version Update-2",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Node.js 8.10 to Node.js 10.x",
    "depth": 2,
    "text": "However, if you have used previous versions of the Amplify CLI to create AWS resources in the following categories,\nyou will need to manually update your project artifacts to avoid NodeJS runtime upgrade issues with AWS Lambda."
  },
  {
    "objectID": "Node Version Update-3",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Node.js 8.10 to Node.js 10.x",
    "depth": 2,
    "text": "auth"
  },
  {
    "objectID": "Node Version Update-4",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Node.js 8.10 to Node.js 10.x",
    "depth": 2,
    "text": "function"
  },
  {
    "objectID": "Node Version Update-5",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Node.js 8.10 to Node.js 10.x",
    "depth": 2,
    "text": "interactions"
  },
  {
    "objectID": "Node Version Update-6",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Node.js 8.10 to Node.js 10.x",
    "depth": 2,
    "text": "Before you make the following manual changes, please make sure to back up your entire project."
  },
  {
    "objectID": "Node Version Update-7",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "Node.js 8.10 to Node.js 10.x",
    "depth": 2,
    "text": "After you make the following manual changes, run amplify push to update the AWS Lambda functions in the cloud."
  },
  {
    "objectID": "Node Version Update-8",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "auth",
    "depth": 3,
    "text": "Auth category allows you to add/configure Lambda Triggers for cognito, such as PostAuthentication and PostConfirmation using amplify add/update auth command.\nLambda triggers are stored as a part of the functions category under the amplify/function/<prefix><TriggerName>/src directory."
  },
  {
    "objectID": "Node Version Update-9",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "auth",
    "depth": 3,
    "text": "In the index files for the Lambda Triggers, Located in amplify/function/<prefix><TriggerName>/src/index.js"
  },
  {
    "objectID": "Node Version Update-10",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "auth",
    "depth": 3,
    "text": "Replace"
  },
  {
    "objectID": "Node Version Update-11",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "auth",
    "depth": 3,
    "text": "With"
  },
  {
    "objectID": "Node Version Update-12",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "function",
    "depth": 3,
    "text": "If you use NodeJS require to import local modules, relative path is needed to specify the local module's location.\nHowever, we have noticed that you can just use the module name to require them with nodejs8.10 runtime on AWS Lambda Functions.\nBut with the nodejs10.x runtime, it is not allowed anymore. AWS Lambda Function will throw an error complaining that it can not find the module, and you have to provide the relative path instead of just the module name to require a local module.\nSo, if you added resources in the function category, and you did not specify relative path to require local modules, you need to update the code base just like the above section for the auth triggers."
  },
  {
    "objectID": "Node Version Update-13",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "interactions",
    "depth": 3,
    "text": "In the <project-root>/amplify/backend/interactions/<resource-name>/src/index.js file"
  },
  {
    "objectID": "Node Version Update-14",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "interactions",
    "depth": 3,
    "text": "Replace"
  },
  {
    "objectID": "Node Version Update-15",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "interactions",
    "depth": 3,
    "text": "With"
  },
  {
    "objectID": "Node Version Update-16",
    "title": "Node Version Update",
    "description": "Upgrading from NodeJS 8.10 to NodeJS 10.x",
    "slug": "/cli/migration/lambda-node-version-update",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": "runtime string replacement",
    "depth": 3,
    "text": "With the latest version of the Amplify CLI (> 4.7.0), when you execute any amplify command on a project initialized by CLI version prior to 4.7.0, it will prompt for your confirmation to automatically upgrade your NodeJS Lambda runtime versions, from nodejs8.10 to nodejs10.x in all the CloudFormation template files under the amplify/backend folder. If you do not confirm, you will need to manually carry out such replacements. You can go to each category subdirectory, then each resource subdirectory under it, and locate the template file (it could be either .yml or .json file), the template file has template in its name. Then do a global string replacement of nodejs8.10 to nodejs10.x in the file."
  },
  {
    "objectID": "Override feature enablement migration-0",
    "title": "Override feature enablement migration",
    "description": "Upgrading to Amplify CLI version 7 and above with a project created prior requires a migration to enable the new \"override\" capability.",
    "slug": "/cli/migration/override",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI version 7 and above has been updated to give developers the ability to override Amplify-generated IAM, Cognito, and S3 configuration to best meet app requirements. With the new override capability, developers can easily configure their backend with Amplify-provided defaults but still customize fine-grained resource settings."
  },
  {
    "objectID": "Override feature enablement migration-1",
    "title": "Override feature enablement migration",
    "description": "Upgrading to Amplify CLI version 7 and above with a project created prior requires a migration to enable the new \"override\" capability.",
    "slug": "/cli/migration/override",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The new overrides capabilities or any future resource changes modifies the file structures of your Amplify project under the hood. Projects created before Amplify CLI version 7 require a migration. It is recommended to test this migration in a non-production environment first, without any updates to the app:"
  },
  {
    "objectID": "Override feature enablement migration-2",
    "title": "Override feature enablement migration",
    "description": "Upgrading to Amplify CLI version 7 and above with a project created prior requires a migration to enable the new \"override\" capability.",
    "slug": "/cli/migration/override",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify add env test"
  },
  {
    "objectID": "Override feature enablement migration-3",
    "title": "Override feature enablement migration",
    "description": "Upgrading to Amplify CLI version 7 and above with a project created prior requires a migration to enable the new \"override\" capability.",
    "slug": "/cli/migration/override",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify override <api|auth|project|storage> or amplify update <api|auth|project|storage>"
  },
  {
    "objectID": "Override feature enablement migration-4",
    "title": "Override feature enablement migration",
    "description": "Upgrading to Amplify CLI version 7 and above with a project created prior requires a migration to enable the new \"override\" capability.",
    "slug": "/cli/migration/override",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Answer \"y\" to migrate your resources"
  },
  {
    "objectID": "Override feature enablement migration-5",
    "title": "Override feature enablement migration",
    "description": "Upgrading to Amplify CLI version 7 and above with a project created prior requires a migration to enable the new \"override\" capability.",
    "slug": "/cli/migration/override",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify push"
  },
  {
    "objectID": "Override feature enablement migration-6",
    "title": "Override feature enablement migration",
    "description": "Upgrading to Amplify CLI version 7 and above with a project created prior requires a migration to enable the new \"override\" capability.",
    "slug": "/cli/migration/override",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Test your app scenarios now with this test environment"
  },
  {
    "objectID": "Override feature enablement migration-7",
    "title": "Override feature enablement migration",
    "description": "Upgrading to Amplify CLI version 7 and above with a project created prior requires a migration to enable the new \"override\" capability.",
    "slug": "/cli/migration/override",
    "category": "Amplify CLI",
    "subcategory": "Migration & Backwards Compatibility",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Once verified, switch to your original environment amplify env checkout <env-name> and apply the override migration by either running amplify override <category> or amplify update <category>."
  },
  {
    "objectID": "Authoring a new plugin-0",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI provides the command amplify plugin init (with alias amplify plugin new) for the development of plugins. This command first collects requirements, and then creates the skeleton of the plugin package for you to start the development. The newly created plugin is added to your local Amplify CLI plugin platform, so you can conveniently test its functionalities while it is being developed. It can be easily removed from the local plugin platform with the amplify plugin remove command, and added back with the amplify plugin add command."
  },
  {
    "objectID": "Authoring a new plugin-1",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Step 2: Initialize plugin",
    "depth": 3,
    "text": "You will be prompted to enter the plugin name, then select the plugin type, and event subscriptions. The CLI will then create a plugin package for you and add it to the local Amplify CLI plugin platform."
  },
  {
    "objectID": "Authoring a new plugin-2",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Step 3: Test your plugin",
    "depth": 3,
    "text": "The newly created plugin package is already added to the local Amplify CLI, so you can start testing it immediately.\nLet's say you have chosen to use the default plugin name: my-amplify-plugin"
  },
  {
    "objectID": "Authoring a new plugin-3",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Step 3: Test your plugin",
    "depth": 3,
    "text": "You will see that the default help message is printed out.\nAt this point, there are only two sub commands in the plugin package, help and version, with dummy implementations. If you try to execute any other command, it will trigger the Amplify CLI plugin platform to perform a fresh scan, and then after it failed to find the command, it will print out the default help message."
  },
  {
    "objectID": "Authoring a new plugin-4",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Step 3: Test your plugin",
    "depth": 3,
    "text": "From here, you can start to develop the plugin package. See below for the detailed explanation of the package structure."
  },
  {
    "objectID": "Authoring a new plugin-5",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Step 4: Publish to NPM",
    "depth": 3,
    "text": "After the completion of one development cycle and you are ready to release your plugin to the public, you can publish it to the NPM: https://docs.npmjs.com/getting-started/publishing-npm-packages"
  },
  {
    "objectID": "Authoring a new plugin-6",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Step 5: Install and Use",
    "depth": 3,
    "text": "Once your plugin is published to the NPM, other developers can install and use it"
  },
  {
    "objectID": "Authoring a new plugin-7",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Package Structure",
    "depth": 2,
    "text": "Here's the plugin package directory structure"
  },
  {
    "objectID": "Authoring a new plugin-8",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "amplify-plugin.json",
    "depth": 3,
    "text": "The amplify-plugin.json file is the plugin's manifest file, it specifies the plugin's name, type, commands and event handlers. The Amplify CLI uses it to verify and add the plugin package into its plugin platform."
  },
  {
    "objectID": "Authoring a new plugin-9",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "amplify-plugin.json",
    "depth": 3,
    "text": "Here's the contents of the file when it's first generated by the amplify plugin init command for a util plugin."
  },
  {
    "objectID": "Authoring a new plugin-10",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "index.js",
    "depth": 3,
    "text": "The \"main\" file specified in the package.json is the Amplify CLI's entry to invoke the plugin's functionalities specified in the manifest file amplify-plugin.json."
  },
  {
    "objectID": "Authoring a new plugin-11",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "index.js",
    "depth": 3,
    "text": "Here's the contents of the file when it's first generated by the amplify plugin init command for a util plugin."
  },
  {
    "objectID": "Authoring a new plugin-12",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "commands",
    "depth": 3,
    "text": "The commands folder contains files that implement the commands specified in the manifest file amplify-plugin.json."
  },
  {
    "objectID": "Authoring a new plugin-13",
    "title": "Authoring a new plugin",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/authoring",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "event-handlers",
    "depth": 3,
    "text": "The event-handlers folder contains files that implement the eventHandlers specified in the manifest file amplify-plugin.json."
  },
  {
    "objectID": "Architecture-0",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins."
  },
  {
    "objectID": "Architecture-2",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "The Amplify CLI Core maintains a plugins.json file to store the plugin management configuration settings and information of all the installed plugins.  \nThe Amplify CLI plugins each contain an amplify-plugin.json file to manifest themselves as valid plugins.  \nThe Amplify CLI Core provides a set of utility commands under amplify plugin for plugin management and to facilitate the development of plugins."
  },
  {
    "objectID": "Architecture-3",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "The Amplify CLI Core does not dynamically scan for plugins at the beginning of each command execution. Instead, information about the installed plugins are retrieved from the plugins.json file and only the plugins that are needed for the execution of the command will be loaded."
  },
  {
    "objectID": "Architecture-4",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "The plugins.json file is stored at path <os.homedir>/.amplify/plugins.json. Unless you really know what you are doing, you should NOT manually edit this file, otherwise you run the risk of corrupting your local installation of the Amplify CLI."
  },
  {
    "objectID": "Architecture-5",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "The plugins.json file will be created or updated in the following situations:"
  },
  {
    "objectID": "Architecture-6",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "If the plugins.json file is not found when the Amplify CLI Core tries to access it, the Amplify CLI Core will create this file and scan the local environment for plugins, and then store the information in the file."
  },
  {
    "objectID": "Architecture-7",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "If the last scan time was more than one day (configurable) ago, the Amplify CLI Core will scan again and update the information."
  },
  {
    "objectID": "Architecture-8",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "If inaccuracy is detected, e.g. a specified plugin cannot be loaded, the Amplify CLI Core will scan again and update the information."
  },
  {
    "objectID": "Architecture-9",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "After the execution of any of the amplify plugin commands that could change it, e.g. amplify plugin scan, amplify plugin add/remove."
  },
  {
    "objectID": "Architecture-10",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "By default, the CLI core searches for plugins in its parent directory, its local node_modules directory, and the global node_modules directory. Plugins are recognized by the amplify- prefix in the package names."
  },
  {
    "objectID": "Architecture-11",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Overview",
    "depth": 2,
    "text": "Plugins communicate with the CLI core and with each other through the project metadata. The CLI core provides the read and write access to the project metadata for the plugins. The project metadata is stored in file amplify/backend/amplify-meta.json in the user project."
  },
  {
    "objectID": "Architecture-13",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin types",
    "depth": 2,
    "text": "There are four types of plugins"
  },
  {
    "objectID": "Architecture-14",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin types",
    "depth": 2,
    "text": "category"
  },
  {
    "objectID": "Architecture-15",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin types",
    "depth": 2,
    "text": "provider"
  },
  {
    "objectID": "Architecture-16",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin types",
    "depth": 2,
    "text": "frontend"
  },
  {
    "objectID": "Architecture-17",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin types",
    "depth": 2,
    "text": "util"
  },
  {
    "objectID": "Architecture-18",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Category plugin",
    "depth": 3,
    "text": "Amplify maintained category plugins are recognized by the amplify-category- prefix in the package name.\nA category plugin wraps up the logic to create and manage one category of backend resources in the cloud. It defines the \"shape\" of the cloud resources based on user (the developer) input, constructs parameters to CRUD cloud resource, and exports relevant cloud resource information to the project metadata."
  },
  {
    "objectID": "Architecture-19",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Category plugin",
    "depth": 3,
    "text": "Categories are managed by AWS and are a functional use case that a client engineer is building as part of their UX, rather than service implementations."
  },
  {
    "objectID": "Architecture-20",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Provider plugin",
    "depth": 3,
    "text": "Amplify maintained provider plugins are recognized by the amplify-provider- prefix in the package name.\nA provider plugin abstracts the actual cloud resource provider. It wraps up communication details such as access credentials, api invoke, wait logic, and response data parsing. It also exposes simple interface methods for the category plugins to CRUD cloud resource."
  },
  {
    "objectID": "Architecture-21",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "AWS CloudFormation provider",
    "depth": 4,
    "text": "Currently, the only official provider plugin, amplify-provider-awscloudformation, uses the AWS CloudFormation to form and update the backend resources in the AWS for the amplify categories. For more information about  AWS CloudFormation, check its user guide:\nAWS CloudFormation User Guide. The amplify-provider-awscloudformation uses\nnested stacks."
  },
  {
    "objectID": "Architecture-22",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Frontend plugin",
    "depth": 3,
    "text": "Amplify maintained frontend plugins are recognized by the amplify-frontend- prefix in the package name.\nA frontend plugin handles a specific type of frontend projects, such as Javascript, Android or iOS projects. Among other things, it provides the following functionalities:"
  },
  {
    "objectID": "Architecture-23",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Frontend plugin",
    "depth": 3,
    "text": "Formats the cloud resource information and writes it to a file at the right location so it can be recognized and consumed by the frontend project"
  },
  {
    "objectID": "Architecture-24",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Frontend plugin",
    "depth": 3,
    "text": "Builds and serves the frontend application locally with backend hot-wired to the cloud resources"
  },
  {
    "objectID": "Architecture-25",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Frontend plugin",
    "depth": 3,
    "text": "Builds and publishes the application (frontend and backend) to its intended users"
  },
  {
    "objectID": "Architecture-26",
    "title": "Architecture",
    "description": "The Amplify CLI has a pluggable architecture. The CLI core provides the pluggable platform, and most of the CLI category functions are implemented as plugins.",
    "slug": "/cli/plugins/architecture",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "util plugin",
    "depth": 3,
    "text": "Official util plugins are recognized by the amplify- prefix, without a plugin type decoration in the package name, a util purpose plugin does not manage any backend resources in the cloud, but provides certain CLI commands and/or certain functionalities for the CLI core, and other plugins."
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Plugins are explicitly managed in the Amplify CLI pluggable platform. Plugins enable you to add additional commands and functionality to existing Amplify CLI. This section goes through the steps to create, publish, consume a plugin package, explains the folder structure, and key files in the plugin package."
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-analytics"
  },
  {
    "objectID": "Overview-2",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-api"
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-auth"
  },
  {
    "objectID": "Overview-4",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-function"
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-hosting"
  },
  {
    "objectID": "Overview-6",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-interactions"
  },
  {
    "objectID": "Overview-7",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-notifications"
  },
  {
    "objectID": "Overview-8",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-predictions"
  },
  {
    "objectID": "Overview-9",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-storage"
  },
  {
    "objectID": "Overview-10",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-category-xr"
  },
  {
    "objectID": "Overview-11",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-codegen"
  },
  {
    "objectID": "Overview-12",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-frontend-javascript"
  },
  {
    "objectID": "Overview-13",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-frontend-android"
  },
  {
    "objectID": "Overview-14",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-frontend-ios"
  },
  {
    "objectID": "Overview-15",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Official plugins",
    "depth": 2,
    "text": "amplify-provider-awscloudformation"
  },
  {
    "objectID": "Overview-16",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Third-party plugins",
    "depth": 2,
    "text": "amplify-category-video - Make it easy to incorporate video streaming into your mobile and web applications powered by AWS Amplify and AWS Media Services"
  },
  {
    "objectID": "Overview-17",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Third-party plugins",
    "depth": 2,
    "text": "amplify-category-docs - An easy way to view the Amplify Docs from the Amplify CLI"
  },
  {
    "objectID": "Overview-18",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Third-party plugins",
    "depth": 2,
    "text": "amplify-category-data-importer - Automate the process of seeding, importing, and managing data for Amplify projects"
  },
  {
    "objectID": "Overview-19",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Third-party plugins",
    "depth": 2,
    "text": "graphql-ttl-transformer - Enable DynamoDB's time-to-live feature to auto-delete old entries in your AWS Amplify API"
  },
  {
    "objectID": "Overview-20",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Third-party plugins",
    "depth": 2,
    "text": "amplify-graphql-seed-plugin - Seed your local and remote databases with highly customizable mock data using your GraphQL API"
  },
  {
    "objectID": "Overview-21",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin installation",
    "depth": 2,
    "text": "You can add a 3rd party plugin to the Amplify CLI with the following steps:"
  },
  {
    "objectID": "Overview-22",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin installation",
    "depth": 2,
    "text": "If the plugin author named the plugin package according to the naming convention."
  },
  {
    "objectID": "Overview-23",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin installation",
    "depth": 2,
    "text": "Run npm install -g <plugin> and install the plugin to the global node_modules directory."
  },
  {
    "objectID": "Overview-24",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin installation",
    "depth": 2,
    "text": "Run amplify plugin scan so the Amplify CLI plugin platform will pick up the newly added plugin."
  },
  {
    "objectID": "Overview-25",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin installation",
    "depth": 2,
    "text": "If the plugin author did NOT name the plugin package according to the naming convention outlined above."
  },
  {
    "objectID": "Overview-26",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin installation",
    "depth": 2,
    "text": "Run npm install -g <plugin> and install the plugin to the global node_modules directory."
  },
  {
    "objectID": "Overview-27",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin installation",
    "depth": 2,
    "text": "Run amplify plugin add and provide the path to the plugin to explicitly add the plugin package into the Amplify CLI plugin platform."
  },
  {
    "objectID": "Overview-28",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "The following is the suite of the commands under the amplify plugin:"
  },
  {
    "objectID": "Overview-29",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "amplify plugin configure"
  },
  {
    "objectID": "Overview-30",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "amplify plugin scan"
  },
  {
    "objectID": "Overview-31",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "amplify plugin add"
  },
  {
    "objectID": "Overview-32",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "amplify plugin remove"
  },
  {
    "objectID": "Overview-33",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "amplify plugin list"
  },
  {
    "objectID": "Overview-34",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "amplify plugin init"
  },
  {
    "objectID": "Overview-35",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "amplify plugin verify"
  },
  {
    "objectID": "Overview-36",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "Plugin Commands",
    "depth": 2,
    "text": "amplify plugin help"
  },
  {
    "objectID": "Overview-37",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "configure",
    "depth": 3,
    "text": "amplify plugin configure is used to configure the following settings in the plugins.json file:"
  },
  {
    "objectID": "Overview-38",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "configure",
    "depth": 3,
    "text": "plugin-directories : contains the directories that plugin packages are searched for during a plugin scan."
  },
  {
    "objectID": "Overview-39",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "configure",
    "depth": 3,
    "text": "plugin-prefixes: contains the plugin package name prefixes. A package named with such prefix is considered a plugin candidate and checked during a plugin scan. If plugin-prefixes is empty, all packages inside the scanned directories will be checked."
  },
  {
    "objectID": "Overview-40",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "configure",
    "depth": 3,
    "text": "max-scan-interval-in-seconds : the Amplify CLI Core will scan again if the last scan time has passed for longer than max-scan-interval-in-seconds. Setting this value to 0 will result in fresh scan at the beginning of each Amplify CLI command execution. The default value is 1 day."
  },
  {
    "objectID": "Overview-41",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "scan",
    "depth": 3,
    "text": "amplify plugin scan will start a fresh scan for plugins in the local environment. A configurable set of directories specified in plugin-directories, such as the global node_modules, are scanned for plugins.\nExecution of this command will completely update the contents of the plugins field in the plugins.json.\nThe last-scan-time field in the plugins.json is the time stamp of the last plugin scan.\nNote that, other than manually started by this command, a plugin scan can also be triggered by a regular amplify command execution, for example if the Amplify CLI Core noticed something is incorrect, or the last scan time has passed for longer than max-scan-interval-in-seconds(set to be one day by default)."
  },
  {
    "objectID": "Overview-42",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "add",
    "depth": 3,
    "text": "amplify plugin add will prompt you to select a previously removed plugin (see below), or enter the full path of a local package to be added as a plugin into the Amplify CLI. The Amplify CLI Core verifies the existence and validity of the plugin package during execution of the this command. You can use this command to add a plugin that will not be found by the plugin scan process, e.g. if it is not in one of the plugin-directories, or its package name does not have the proper prefix as specified in the plugin-prefixes."
  },
  {
    "objectID": "Overview-43",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "remove",
    "depth": 3,
    "text": "amplify plugin remove will prompt you with the list of all the currently active plugins, and allow you to select the ones that you do not want to be included in the Amplify CLI. The Amplify CLI Core will remove the manifest of those plugins from the plugins field, so they will NOT be counted as active plugins anymore and will NOT be loaded during command executions.\nIf a removed plugin is in one of the directories specified in the plugin-directories, and its package name has the prefix as specified in the plugin-prefixes, it is then inserted in the excluded field of the plugins.json file. This will not be inserted back to the plugins field in the next plugin scan.\nThe actual plugin packages themselves are not removed from your computer, and they can be added back as active plugins by amplify plugin add."
  },
  {
    "objectID": "Overview-44",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "list",
    "depth": 3,
    "text": "amplify plugin list lists all the active plugins, along with other information of the local Amplify CLI plugin platform."
  },
  {
    "objectID": "Overview-45",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "init",
    "depth": 3,
    "text": "The Amplify CLI provides the command amplify plugin init (with alias amplify plugin new) for the development of plugins.\nThis command first collects the requirements from you and then creates the skeleton of the plugin package for you to start the development.\nThe newly created plugin package is added to your local Amplify CLI platform, so you can conveniently test its functionalities while it is being developed.\nIt can be easily removed from the platform with the amplify plugin remove command and added back with the amplify plugin add command."
  },
  {
    "objectID": "Overview-46",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "verify",
    "depth": 3,
    "text": "The Amplify CLI provides the utility command amplify plugin verify to verify that:"
  },
  {
    "objectID": "Overview-47",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "verify",
    "depth": 3,
    "text": "The package implements the required interface methods for plugins."
  },
  {
    "objectID": "Overview-48",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "verify",
    "depth": 3,
    "text": "The commands field contains all the required commands for the type of the plugin.\namplify plugin verify command treats the folder where it is executed as the root directory of the plugin package. The command can be executed manually. Its functionality is also invoked by the amplify plugin scan and amplify plugin add commands."
  },
  {
    "objectID": "Overview-49",
    "title": "Overview",
    "description": "Plugins enable you to add additional commands and functionality to existing Amplify CLI. Learn how to create, publish, consume a plugin package.",
    "slug": "/cli/plugins/plugins",
    "category": "Amplify CLI",
    "subcategory": "Plugins",
    "type": "article",
    "heading": "help",
    "depth": 3,
    "text": "Prints out help information for the commands under amplify plugin."
  },
  {
    "objectID": "Headless mode for CI/CD-0",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Several commands in the Amplify CLI support arguments which could be used in a CI/CD workflow or other non-interactive shell. The CLI will work non-interactively if the required information is provided by an argument."
  },
  {
    "objectID": "Headless mode for CI/CD-1",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Arguments are used mostly for scripting so that the command execution flow is not interrupted by prompts. Examples for this can be found here"
  },
  {
    "objectID": "Headless mode for CI/CD-2",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "--yes flag"
  },
  {
    "objectID": "Headless mode for CI/CD-3",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The --yes flag, or its alias -y, suppresses command line prompts if defaults are available, and uses the defaults in command execution.\nThe following commands take the --yes flag:"
  },
  {
    "objectID": "Headless mode for CI/CD-4",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify init"
  },
  {
    "objectID": "Headless mode for CI/CD-5",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify configure project"
  },
  {
    "objectID": "Headless mode for CI/CD-6",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify push"
  },
  {
    "objectID": "Headless mode for CI/CD-7",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify publish"
  },
  {
    "objectID": "Headless mode for CI/CD-8",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify pull"
  },
  {
    "objectID": "Headless mode for CI/CD-9",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify init parameters",
    "depth": 2,
    "text": "The amplify init command takes these parameters:"
  },
  {
    "objectID": "Headless mode for CI/CD-10",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify init parameters",
    "depth": 2,
    "text": "--amplify"
  },
  {
    "objectID": "Headless mode for CI/CD-11",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify init parameters",
    "depth": 2,
    "text": "--frontend"
  },
  {
    "objectID": "Headless mode for CI/CD-12",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify init parameters",
    "depth": 2,
    "text": "--providers"
  },
  {
    "objectID": "Headless mode for CI/CD-13",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify init parameters",
    "depth": 2,
    "text": "--categories"
  },
  {
    "objectID": "Headless mode for CI/CD-14",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify init parameters",
    "depth": 2,
    "text": "--yes"
  },
  {
    "objectID": "Headless mode for CI/CD-15",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify init parameters",
    "depth": 2,
    "text": "--app"
  },
  {
    "objectID": "Headless mode for CI/CD-16",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "Contains basic information of the project, it has these keys:"
  },
  {
    "objectID": "Headless mode for CI/CD-17",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "projectName: the name of the project under development"
  },
  {
    "objectID": "Headless mode for CI/CD-18",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "appId: the Amplify Service project Id (optional, see below)"
  },
  {
    "objectID": "Headless mode for CI/CD-19",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "envName: the name of your first environment"
  },
  {
    "objectID": "Headless mode for CI/CD-20",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "defaultEditor: your default code editor"
  },
  {
    "objectID": "Headless mode for CI/CD-21",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "The appId parameter is optional and it is used in two use cases."
  },
  {
    "objectID": "Headless mode for CI/CD-22",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "Amplify Service uses it internally when you initialize a project on Amplify web console."
  },
  {
    "objectID": "Headless mode for CI/CD-23",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "For project migrations. For projects initialized by Amplify CLI version prior to 4.0.0, no Amplify Service project is created online to track the backend environment's resources. The latest version of the Amplify CLI will create a new Amplify Service project for them in the post-push check. If you wanted to add the backend environment to an existing Amplify Service project instead of creating a new one, you can run amplify init again, and provide the appId inside the --amplify parameter, or explicitly as amplify init --appId <Amplify-Service-Project-AppId>."
  },
  {
    "objectID": "Headless mode for CI/CD-24",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "Contains information for the CLI's frontend plugin, it has these keys:"
  },
  {
    "objectID": "Headless mode for CI/CD-25",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "frontend: the name of the chosen frontend plugin (without the amplify-frontend- prefix)."
  },
  {
    "objectID": "Headless mode for CI/CD-26",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "framework: the frontend framework used in the project, such as react. Only the javascript frontend handler takes it."
  },
  {
    "objectID": "Headless mode for CI/CD-27",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "config: the configuration settings for the frontend plugin."
  },
  {
    "objectID": "Headless mode for CI/CD-28",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "There are currently three official frontend plugins, and the following are the specifications of their respective config object:"
  },
  {
    "objectID": "Headless mode for CI/CD-29",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "config for javascript"
  },
  {
    "objectID": "Headless mode for CI/CD-30",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "SourceDir:\nThe project's source directory. The CLI will place and update the aws-exports.js file in it, the aws-exports.js file is used to configure the Amplify JS library."
  },
  {
    "objectID": "Headless mode for CI/CD-31",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "DistributionDir:\nThe project's distribution directory, where the build artifacts are stored. The CLI will upload the contents inside this directory to the S3 hosting buckets in the execution of the amplify publish command."
  },
  {
    "objectID": "Headless mode for CI/CD-32",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "BuildCommand:\nThe build command for the project. The CLI invokes the build command before uploading the contents in the distribution directory in the execution of the amplify publish command."
  },
  {
    "objectID": "Headless mode for CI/CD-33",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "StartCommand:\nThe start command for the project, used for local testing. The CLI invokes the start command after it has pushed the latest development of the backend to the cloud in the execution of the amplify run command."
  },
  {
    "objectID": "Headless mode for CI/CD-34",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "config for android"
  },
  {
    "objectID": "Headless mode for CI/CD-35",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "ResDir: The Android project's resource directory, such as app/src/main/res."
  },
  {
    "objectID": "Headless mode for CI/CD-36",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "config for ios"
  },
  {
    "objectID": "Headless mode for CI/CD-37",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "The ios frontend handler does NOT take the config object."
  },
  {
    "objectID": "Headless mode for CI/CD-38",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "Contains configuration settings for provider plugins. The key is the name of the provider plugin (without the amplify-provider- prefix), and the value is its configuration. Provider plugins contained in this object will be initialized, and able to provide functionalities for creation and maintenance of the cloud resources."
  },
  {
    "objectID": "Headless mode for CI/CD-39",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "Currently there is only one official provider plugin: amplify-provider-awscloudformation, its configuration is for the CLI to resolve aws credentials and region, the following are the specifications:"
  },
  {
    "objectID": "Headless mode for CI/CD-40",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "configLevel:\nThe configuration level is either project or general. Unless explicitly set to general, the project level is chosen.\ngeneral level means the CLI will not manage configuration at the project level, it instead relies on the AWS SDK to resolve aws credentials and region. To learn how it works, check the AWS SDK's documents on credentials and region.\nproject level means the configuration is managed at the project level by the CLI, each project gets its own independent configuration. The following attributes are used only when the configuration is at project level"
  },
  {
    "objectID": "Headless mode for CI/CD-41",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "useProfile:\nA boolean indicating whether to use a profile defined in the shared config file (~/.aws/config) and credentials file (~/.aws/credentials). "
  },
  {
    "objectID": "Headless mode for CI/CD-42",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "profileName:\nThe name of the profile if useProfile is set to true."
  },
  {
    "objectID": "Headless mode for CI/CD-43",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "accessKeyId:\nThe aws access key id if useProfile is set to false."
  },
  {
    "objectID": "Headless mode for CI/CD-44",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "secretAccessKey:\nThe aws secret access key if useProfile is set to false."
  },
  {
    "objectID": "Headless mode for CI/CD-45",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "region:\nThe aws region if useProfile is set to false."
  },
  {
    "objectID": "Headless mode for CI/CD-46",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--categories",
    "depth": 3,
    "text": "Contains configuration settings for resources in the given categories. The key is the name of the category and the value is its configuration. There are resource parameters that are not persisted into configuration files and requires prompting for them during a headless CLI operation and to support headless workflows they are required to be passed in for each resource.."
  },
  {
    "objectID": "Headless mode for CI/CD-47",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Imported resources",
    "depth": 4,
    "text": "Currently auth and storage category resources can be imported to an Amplify CLI project."
  },
  {
    "objectID": "Headless mode for CI/CD-48",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "auth category",
    "depth": 4,
    "text": "userPoolId: The Id of the Cognito User Pool that was imported into the project."
  },
  {
    "objectID": "Headless mode for CI/CD-49",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "auth category",
    "depth": 4,
    "text": "webClientId: The Id of the app client configured for the given Cognito User Pool to be used by web applications."
  },
  {
    "objectID": "Headless mode for CI/CD-50",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "auth category",
    "depth": 4,
    "text": "nativeClientId: The Id of the app client configured for the given Cognito User Pool to be used by Native applications."
  },
  {
    "objectID": "Headless mode for CI/CD-51",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "auth category",
    "depth": 4,
    "text": "identityPoolId: In case if an Cognito Identity Pool was also configured for the auth resource this parameter is the Id of that resource. If there is no associated Cognito Identity Pool was configured, this parameter should not be passed in."
  },
  {
    "objectID": "Headless mode for CI/CD-52",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "auth category",
    "depth": 4,
    "text": "Sample auth category configuration:"
  },
  {
    "objectID": "Headless mode for CI/CD-53",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "storage category",
    "depth": 4,
    "text": "Storage category supports the importing of S3 Buckets and DynamoDB tables. They require different parameter sets within the storage category."
  },
  {
    "objectID": "Headless mode for CI/CD-54",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "S3 Buckets",
    "depth": 4,
    "text": "region: The region of the S3 bucket resource. S3 Buckets are global, but the CLI requires to storage of the region as a parameter, so it needs to be passed in. Currently it must be the same region where the Amplify project was created."
  },
  {
    "objectID": "Headless mode for CI/CD-55",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "S3 Buckets",
    "depth": 4,
    "text": "bucketName: The name of the imported S3 bucket."
  },
  {
    "objectID": "Headless mode for CI/CD-56",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "DynamoDB Tables",
    "depth": 4,
    "text": "An Amplify project can have multiple DynamoDB storage resources imported and the parameters must be supplied to each of them."
  },
  {
    "objectID": "Headless mode for CI/CD-57",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "DynamoDB Tables",
    "depth": 4,
    "text": "region: The region of the DynamoDB table resources. Currently it must be the same region where the Amplify project was created."
  },
  {
    "objectID": "Headless mode for CI/CD-58",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "DynamoDB Tables",
    "depth": 4,
    "text": "tables: An object where the key is the Amplify resource name and the value is the name of the DynamoDB table."
  },
  {
    "objectID": "Headless mode for CI/CD-59",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "amplify init --app git@github.com:<github-username>/<repository-name>.git"
  },
  {
    "objectID": "Headless mode for CI/CD-60",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "Installs, initializes, and provisions resources for a sample amplify application from the provided GitHub repository URL. This option must be executed in an empty directory. The sample repository must have an amplify folder, including the following:"
  },
  {
    "objectID": "Headless mode for CI/CD-61",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "project-config.json in .config folder"
  },
  {
    "objectID": "Headless mode for CI/CD-62",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "backend-config.json in backend folder"
  },
  {
    "objectID": "Headless mode for CI/CD-63",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "The necessary cloudformation files in the backend folder"
  },
  {
    "objectID": "Headless mode for CI/CD-64",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "e.g. stacks, schema.graphql for api"
  },
  {
    "objectID": "Headless mode for CI/CD-65",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "e.g. cloudformation template for auth"
  },
  {
    "objectID": "Headless mode for CI/CD-66",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "local files local-env.json and local-aws-info.json are NOT required"
  },
  {
    "objectID": "Headless mode for CI/CD-67",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--app",
    "depth": 3,
    "text": "If the repository contains a yarn.lock and/or package.json file, the sample will be installed with the corresponding package manager and started after resources have been provisioned."
  },
  {
    "objectID": "Headless mode for CI/CD-68",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify configure project parameters",
    "depth": 2,
    "text": "The amplify configure project command allows the user to change the configuration settings that were first set by amplify init, and it takes the same parameters as the amplify init command:"
  },
  {
    "objectID": "Headless mode for CI/CD-69",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify configure project parameters",
    "depth": 2,
    "text": "--amplify"
  },
  {
    "objectID": "Headless mode for CI/CD-70",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify configure project parameters",
    "depth": 2,
    "text": "--frontend"
  },
  {
    "objectID": "Headless mode for CI/CD-71",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify configure project parameters",
    "depth": 2,
    "text": "--providers"
  },
  {
    "objectID": "Headless mode for CI/CD-72",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify configure project parameters",
    "depth": 2,
    "text": "--yes"
  },
  {
    "objectID": "Headless mode for CI/CD-73",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify push/publish parameters",
    "depth": 2,
    "text": "The amplify publish command internally executes amplify push so it takes the same parameters as push command. The amplify push command takes the following parameters"
  },
  {
    "objectID": "Headless mode for CI/CD-74",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify push/publish parameters",
    "depth": 2,
    "text": "--codegen"
  },
  {
    "objectID": "Headless mode for CI/CD-75",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify push/publish parameters",
    "depth": 2,
    "text": "--yes"
  },
  {
    "objectID": "Headless mode for CI/CD-76",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify push/publish parameters",
    "depth": 2,
    "text": "--force"
  },
  {
    "objectID": "Headless mode for CI/CD-77",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify push/publish parameters",
    "depth": 2,
    "text": "--allow-destructive-graphql-schema-updates"
  },
  {
    "objectID": "Headless mode for CI/CD-78",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--codegen",
    "depth": 3,
    "text": "Contains configuration for AppSync codegen, the following are the specifications:"
  },
  {
    "objectID": "Headless mode for CI/CD-79",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--codegen",
    "depth": 3,
    "text": "generateCode: \nA boolean indicating if to generate code for your GraphQL API."
  },
  {
    "objectID": "Headless mode for CI/CD-80",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--codegen",
    "depth": 3,
    "text": "codeLanguage: \nThe targeted language of the generated code, such as javascript."
  },
  {
    "objectID": "Headless mode for CI/CD-81",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--codegen",
    "depth": 3,
    "text": "fileNamePattern:  \nThe file name pattern of GraphQL queries, mutations and subscriptions."
  },
  {
    "objectID": "Headless mode for CI/CD-82",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--codegen",
    "depth": 3,
    "text": "generatedFileName:  \nThe file name for the generated code."
  },
  {
    "objectID": "Headless mode for CI/CD-83",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--codegen",
    "depth": 3,
    "text": "generateDocs:  \nA boolean indicating whether to generate GraphQL statements (queries, mutations and subscription) based on the GraphQL schema types. The generated version will overwrite the current GraphQL queries, mutations and subscriptions."
  },
  {
    "objectID": "Headless mode for CI/CD-84",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--yes",
    "depth": 3,
    "text": "Will skip all interactive prompts by selecting default options."
  },
  {
    "objectID": "Headless mode for CI/CD-85",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--force",
    "depth": 3,
    "text": "Pushes all resources regardless of update status and bypasses all guardrails to push the local state to the cloud. Only use this flag if you have tested the change in a non-production environment and fully understand the implications."
  },
  {
    "objectID": "Headless mode for CI/CD-86",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--force",
    "depth": 3,
    "text": "It includes all of the behavior of --allow-destructive-graphql-schema-updates"
  },
  {
    "objectID": "Headless mode for CI/CD-87",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--allow-destructive-graphql-schema-updates",
    "depth": 3,
    "text": "Pushes schema changes that require removal or replacement of underlying tables. See update schema."
  },
  {
    "objectID": "Headless mode for CI/CD-88",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify pull parameters",
    "depth": 2,
    "text": "The amplify pull command pulls down the latest backend environment to your local development.\nIt is used in two scenarios:"
  },
  {
    "objectID": "Headless mode for CI/CD-89",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify pull parameters",
    "depth": 2,
    "text": "On projects already initialized by the Amplify CLI, it pulls down the latest from the Cloud and updates the contents in the amplify/#current-cloud-backend directory. The command does not take any parameters when used in this scenario."
  },
  {
    "objectID": "Headless mode for CI/CD-90",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify pull parameters",
    "depth": 2,
    "text": "On projects NOT yet initialized by the Amplify CLI, it pulls down a particular backend environment, and \"attaches\" it to the project. It will fully set up the amplify directory for the project.  The backend environment being pulled is specified by appId and envName in the amplify parameter (see below). The command takes the following parameters when used in this scenario."
  },
  {
    "objectID": "Headless mode for CI/CD-91",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify pull parameters",
    "depth": 2,
    "text": "--amplify"
  },
  {
    "objectID": "Headless mode for CI/CD-92",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify pull parameters",
    "depth": 2,
    "text": "--frontend"
  },
  {
    "objectID": "Headless mode for CI/CD-93",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify pull parameters",
    "depth": 2,
    "text": "--providers"
  },
  {
    "objectID": "Headless mode for CI/CD-94",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify pull parameters",
    "depth": 2,
    "text": "--yes"
  },
  {
    "objectID": "Headless mode for CI/CD-95",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "Contains basic information of the project, it has these keys:"
  },
  {
    "objectID": "Headless mode for CI/CD-96",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "projectName: the name of the project under development"
  },
  {
    "objectID": "Headless mode for CI/CD-97",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "appId: the Amplify Service project Id"
  },
  {
    "objectID": "Headless mode for CI/CD-98",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "envName: the name of the backend environment in the above mention Amplify Service that you want to pull down"
  },
  {
    "objectID": "Headless mode for CI/CD-99",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--amplify",
    "depth": 3,
    "text": "defaultEditor: your default code editor"
  },
  {
    "objectID": "Headless mode for CI/CD-100",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "Contains information for the CLI's frontend plugin, it has these keys:"
  },
  {
    "objectID": "Headless mode for CI/CD-101",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "frontend: the name of the chosen frontend plugin (without the amplify-frontend- prefix)."
  },
  {
    "objectID": "Headless mode for CI/CD-102",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "framework: the frontend framework used in the project, such as react. Only the javascript frontend handler takes it."
  },
  {
    "objectID": "Headless mode for CI/CD-103",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "config: the configuration settings for the frontend plugin."
  },
  {
    "objectID": "Headless mode for CI/CD-104",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "There are currently three official frontend plugins, and the following are the specifications of their respective config object:"
  },
  {
    "objectID": "Headless mode for CI/CD-105",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "config for javascript"
  },
  {
    "objectID": "Headless mode for CI/CD-106",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "SourceDir:\nThe project's source directory. The CLI will place and update the aws-exports.js file in it, the aws-exports.js file is used to configure the Amplify JS library."
  },
  {
    "objectID": "Headless mode for CI/CD-107",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "DistributionDir:\nThe project's distribution directory, where the build artifacts are stored. The CLI will upload the contents inside this directory to the S3 hosting buckets in the execution of the amplify publish command."
  },
  {
    "objectID": "Headless mode for CI/CD-108",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "BuildCommand:\nThe build command for the project. The CLI invokes the build command before uploading the contents in the distribution directory in the execution of the amplify publish command."
  },
  {
    "objectID": "Headless mode for CI/CD-109",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "StartCommand:\nThe start command for the project, used for local testing. The CLI invokes the start command after it has pushed the latest development of the backend to the cloud in the execution of the amplify run command."
  },
  {
    "objectID": "Headless mode for CI/CD-110",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "config for android"
  },
  {
    "objectID": "Headless mode for CI/CD-111",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "ResDir: The Android project's resource directory, such as app/src/main/res."
  },
  {
    "objectID": "Headless mode for CI/CD-112",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "config for ios"
  },
  {
    "objectID": "Headless mode for CI/CD-113",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--frontend",
    "depth": 3,
    "text": "The ios frontend handler does NOT take the config object."
  },
  {
    "objectID": "Headless mode for CI/CD-114",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "The pull command is tied to the official provider plugin: amplify-provider-awscloudformation to pull down and attach a backend environment to your frontend project."
  },
  {
    "objectID": "Headless mode for CI/CD-115",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "configLevel:\nThe configuration level is either project or general. Unless explicitly set to general, the project level is chosen.\ngeneral level means the CLI will not manage configuration at the project level, it instead relies on the AWS SDK to resolve aws credentials and region. To learn how it works, check the AWS SDK's documents on credentials and region.\nproject level means the configuration is managed at the project level by the CLI, each project gets its own independent configuration. The following attributes are used only when the configuration is at project level"
  },
  {
    "objectID": "Headless mode for CI/CD-116",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "useProfile:\nA boolean indicating whether to use a profile defined in the shared config file (~/.aws/config) and credentials file (~/.aws/credentials). "
  },
  {
    "objectID": "Headless mode for CI/CD-117",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "profileName:\nThe name of the profile if useProfile is set to true."
  },
  {
    "objectID": "Headless mode for CI/CD-118",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "accessKeyId:\nThe aws access key id if useProfile is set to false."
  },
  {
    "objectID": "Headless mode for CI/CD-119",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "secretAccessKey:\nThe aws secret access key if useProfile is set to false."
  },
  {
    "objectID": "Headless mode for CI/CD-120",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--providers",
    "depth": 3,
    "text": "region:\nThe aws region if useProfile is set to false."
  },
  {
    "objectID": "Headless mode for CI/CD-121",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify delete parameters",
    "depth": 2,
    "text": "The amplify delete command deletes all of the resources tied to the current project in the cloud, and removes all of the local files created by the Amplify CLI from the filesystem. The amplify delete command takes these parameters:"
  },
  {
    "objectID": "Headless mode for CI/CD-122",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "amplify delete parameters",
    "depth": 2,
    "text": "--force"
  },
  {
    "objectID": "Headless mode for CI/CD-123",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "--force",
    "depth": 3,
    "text": "Equivalent to the --yes parameter that other commands support for use in headless environments."
  },
  {
    "objectID": "Headless mode for CI/CD-124",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Headless category payloads",
    "depth": 2,
    "text": "Some categories' headless mode work differently than above in that they expect a JSON payload on stdin rather than reading command parameters. The --headless flag is used to let Amplify CLI know that it should read the JSON payload in a single line from stdin. The input JSON is validated against the expected shape (described below). Once the validation passes, the operation is executed."
  },
  {
    "objectID": "Headless mode for CI/CD-125",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Headless category payloads",
    "depth": 2,
    "text": "Because the CLI reads a single line from stdin, it is necessary to make sure the JSON does not contain any newlines. jq can be used to accomplish this:"
  },
  {
    "objectID": "Headless mode for CI/CD-126",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Headless category payloads",
    "depth": 2,
    "text": "As an alternative to using jq, here's an example Node.js script that adds an API:"
  },
  {
    "objectID": "Headless mode for CI/CD-127",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "The commands that currently support this method of supplying headless parameters are:"
  },
  {
    "objectID": "Headless mode for CI/CD-128",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify add auth --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-129",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify import auth --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-130",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify update auth --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-131",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify add api --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-132",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify update api --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-133",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify add storage --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-134",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify import storage --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-135",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify remove storage --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-136",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported commands",
    "depth": 3,
    "text": "amplify update storage --headless"
  },
  {
    "objectID": "Headless mode for CI/CD-137",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "The structure of the JSON objects supplied on stdin are defined in amplify-headless-interface. This package contains both JSON Schema and TypeScript definitions for:"
  },
  {
    "objectID": "Headless mode for CI/CD-138",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Add Auth Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-139",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Import Auth Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-140",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Update Auth Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-141",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Add API Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-142",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Update API Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-143",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Add Storage Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-144",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Import Storage Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-145",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Remove Storage Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-146",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Payload structure",
    "depth": 3,
    "text": "Update Storage Payload"
  },
  {
    "objectID": "Headless mode for CI/CD-147",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "(Optional) IDE setup for headless development",
    "depth": 3,
    "text": "To get started, install the interface package using npm i amplify-headless-interface. Then, if your editor supports it, configure your editor to know about the schemas in this package."
  },
  {
    "objectID": "Headless mode for CI/CD-148",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "(Optional) IDE setup for headless development",
    "depth": 3,
    "text": "In Visual Studio Code add the following to settings.json under the json.schemas block to associate the specified file extensions with the corresponding schemas:"
  },
  {
    "objectID": "Headless mode for CI/CD-149",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "(Optional) IDE setup for headless development",
    "depth": 3,
    "text": "Create a file such as MyAuthTemplate.addauth.json. Once you start editing, Visual Studio Code will provide auto-completion and suggestions based on the schema."
  },
  {
    "objectID": "Headless mode for CI/CD-150",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "(Optional) IDE setup for headless development",
    "depth": 3,
    "text": "If you prefer not to add this configuration, you can also specify a $schema block your JSON body to tell Visual Studio Code how to validate the JSON. See Visual Studio Code's JSON schemas and settings for more details on this configuration."
  },
  {
    "objectID": "Headless mode for CI/CD-151",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Example: \"amplify add api\" headless configuration",
    "depth": 3,
    "text": "This example showcases how to use headless mode to configure amplify add api."
  },
  {
    "objectID": "Headless mode for CI/CD-152",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Example: \"amplify add api\" headless configuration",
    "depth": 3,
    "text": "Create a file called newHeadlessApi.addapi.json and paste in the following contents:"
  },
  {
    "objectID": "Headless mode for CI/CD-153",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Example: \"amplify add api\" headless configuration",
    "depth": 3,
    "text": "Run cat newHeadlessApi.addapi.json | jq -c | amplify add api --headless to add the API resource."
  },
  {
    "objectID": "Headless mode for CI/CD-154",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Example: \"amplify import auth\" headless configuration",
    "depth": 3,
    "text": "This example showcases how to use headless mode to configure amplify import auth."
  },
  {
    "objectID": "Headless mode for CI/CD-155",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Example: \"amplify import auth\" headless configuration",
    "depth": 3,
    "text": "Create a file called authconfig.importauth.json and paste in the following contents:"
  },
  {
    "objectID": "Headless mode for CI/CD-156",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Example: \"amplify import auth\" headless configuration",
    "depth": 3,
    "text": "Run cat authconfig.importauth.json | jq -c | amplify import auth --headless to import an Cognito resource."
  },
  {
    "objectID": "Headless mode for CI/CD-157",
    "title": "Headless mode for CI/CD",
    "description": "Several commands in the Amplify CLI support arguments which could potentially be used in your CI/CD flows.",
    "slug": "/cli/usage/headless",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Example: \"amplify import auth\" headless configuration",
    "depth": 3,
    "text": "If you don't have jq installed, see https://stedolan.github.io/jq/download."
  },
  {
    "objectID": "Export Amplify project to CDK-0",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Export Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production."
  },
  {
    "objectID": "Export Amplify project to CDK-1",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The command above exports your Amplify projects with CDK-compatible CloudFormation files and assets."
  },
  {
    "objectID": "Export Amplify project to CDK-2",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: notifications category is not supported for export."
  },
  {
    "objectID": "Export Amplify project to CDK-3",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In the exported location you should see a file structure like this:"
  },
  {
    "objectID": "Export Amplify project to CDK-4",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use an exported Amplify backend in AWS Cloud Development Kit (CDK)",
    "depth": 2,
    "text": "amplify export uses the current state of the Amplify backend to build, package, and generate the CloudFormation files and assets to the provided path."
  },
  {
    "objectID": "Export Amplify project to CDK-5",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use an exported Amplify backend in AWS Cloud Development Kit (CDK)",
    "depth": 2,
    "text": "To integrate the Amplify backend into your CDK app, install the AmplifyExportedBackend CDK construct:"
  },
  {
    "objectID": "Export Amplify project to CDK-6",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use an exported Amplify backend in AWS Cloud Development Kit (CDK)",
    "depth": 2,
    "text": "Then, import and initialize a new AmplifyExportedBackend stack:"
  },
  {
    "objectID": "Export Amplify project to CDK-7",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use an exported Amplify backend in AWS Cloud Development Kit (CDK)",
    "depth": 2,
    "text": "Specify the amplifyEnvironment parameter to return the Amplify stack for the corresponding backend environment created through (amplify env add)."
  },
  {
    "objectID": "Export Amplify project to CDK-8",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use an exported Amplify backend in AWS Cloud Development Kit (CDK)",
    "depth": 2,
    "text": "Deploy the CDK app:"
  },
  {
    "objectID": "Export Amplify project to CDK-9",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use an exported Amplify backend in AWS Cloud Development Kit (CDK)",
    "depth": 2,
    "text": "Remember: \"export\" is not an \"eject\" workflow in the sense that \"export\" can iteratively apply Amplify CLI changes as they are ready to ship. Developers can use the Amplify CLI to iterate on their app backend quickly and prior to each new production deployment, run \"amplify export\" to provide an exported Amplify backend for an existing deployment system."
  },
  {
    "objectID": "Export Amplify project to CDK-10",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use CDK for cross-account or cross-region Amplify backend deployments",
    "depth": 2,
    "text": "To deploy an Amplify backend across accounts or regions, you must ensure that the amplifyEnvironment parameter is globally unique across all of AWS. This is due to the underlying resources, such as S3 buckets and IAM roles, need to be globally unique."
  },
  {
    "objectID": "Export Amplify project to CDK-11",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use CDK for cross-account or cross-region Amplify backend deployments",
    "depth": 2,
    "text": "One way to ensure that is to use the AWS Account ID or Region as the Amplify environment identifier:"
  },
  {
    "objectID": "Export Amplify project to CDK-12",
    "title": "Export Amplify project to CDK",
    "description": "Export your Amplify CLI-generated backends as a Cloud Development Kit (CDK) stack and incorporate it into existing CDK deployment pipelines. This capability allows frontend developers to build their app backend quickly and, each time it is ready to ship, hand it over to DevOps teams to deploy to production.",
    "slug": "/cli/usage/export-to-cdk",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Use CDK for cross-account or cross-region Amplify backend deployments",
    "depth": 2,
    "text": "In order to get the region and account ID strings to populate in CDK, you need to provide the env parameter on the parent stack. The amplifyEnvironment can't include a CloudFormation Ref."
  },
  {
    "objectID": "Serverless containers-0",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Serverless containers provide the ability for you to deploy APIs and host websites using AWS Fargate. Customers with existing applications or those who require a lower level of control can bring Docker containers and deploy them into an Amplify project fully integrating with other resources."
  },
  {
    "objectID": "Serverless containers-1",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify libraries can be used with the Auth category giving mobile and web applications secure connectivity and access controls to your Serverless containers. Additionally, existing GraphQL and REST services such as AWS AppSync and Amazon API Gateway can be used in the same project along with Fargate-backed APIs giving flexibility to mix and match for cost optimization and operational needs."
  },
  {
    "objectID": "Serverless containers-2",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note that serverless containers do incur additional costs and operational overhead, as such we recommend using AWS AppSync with the GraphQL Transform as a starting point when building mobile and web apps with Amplify."
  },
  {
    "objectID": "Serverless containers-3",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Billing warning: When you deploy serverless containers with Amplify, it incurs additional costs when resources are not in use for services such as VPC, Fargate, ECR, Cloud Map, CodePipeline, and CodeBuild. For more information refer to VPC pricing, Fargate pricing, ECR Pricing, CodePipeline pricing, CodeBuild pricing, and Cloud Map pricing."
  },
  {
    "objectID": "Serverless containers-4",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Getting Started",
    "depth": 2,
    "text": "Serverless containers are not enabled in your Amplify CLI project by default. To get started you will need to run amplify configure project in order to see the options for deploying to Fargate. To get started initialize your project and enable container-based deployments:"
  },
  {
    "objectID": "Serverless containers-5",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Getting Started",
    "depth": 2,
    "text": "Next add a NoSQL Database table named posts with column called id of type number (N). Make this the partition key."
  },
  {
    "objectID": "Serverless containers-6",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Getting Started",
    "depth": 2,
    "text": "You can select no for all other questions. After this add an API using the REST (or GraphQL) default ExpressJS template and grant it access to this DynamoDB table."
  },
  {
    "objectID": "Serverless containers-7",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Getting Started",
    "depth": 2,
    "text": "Note the environment variables printed to the screen. If you choose a different database table name so that your variables are different from STORAGE_POSTS_NAME then update the TableName variable at the top of amplify/backend/api/<apiname>/src/DynamoDBActions.js appropriately."
  },
  {
    "objectID": "Serverless containers-8",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Getting Started",
    "depth": 2,
    "text": "Finally run amplify push to deploy the backend:"
  },
  {
    "objectID": "Serverless containers-9",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Getting Started",
    "depth": 2,
    "text": "Once this completes your container will be built via an automated pipeline and deployed to Fargate Tasks on an ECS Cluster fronted by an Amazon API Gateway HTTP API using a direct Cloud Map integration to your VPC. If you selected Yes to protect your API with Authentication, an Amazon Cognito User Pool will be created with an Authorizer integration for that API."
  },
  {
    "objectID": "Serverless containers-10",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Deploy a single container",
    "depth": 2,
    "text": "The single Dockerfile scenario allows you to take an application running in a single Container which has been built with a Dockerfile and deploy it to AWS Fargate with the Amplify CLI."
  },
  {
    "objectID": "Serverless containers-11",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Deploy a single container",
    "depth": 2,
    "text": "If you are unfamiliar with using a Dockerfile review the Dockerizing a Node.js web app guide or or add an API with an Amplify-provided template."
  },
  {
    "objectID": "Serverless containers-12",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Deploy a single container",
    "depth": 2,
    "text": "A simple Dockerfile example is below, which would start a NodeJS application (index.js) in a built image by copying all the source files and installing dependencies. This example also shows how could can specify environment variables and use the EXPOSE statement for defining your container's communication port."
  },
  {
    "objectID": "Serverless containers-13",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Deploy a single container",
    "depth": 2,
    "text": "You will need an EXPOSE statement in your Dockerfile to specify a port to communicate with the container. If you do not provide one Amplify will suggest to use port 80."
  },
  {
    "objectID": "Serverless containers-14",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Local development and testing",
    "depth": 3,
    "text": "It is recommended to test your application locally first before deploying with amplify push, otherwise your Fargate Task may fail to start if there are application issues such as missing dependencies. With a Single Dockerfile you can do this by navigating to amplify/backend/api/<name>/src and running docker build -t to build and tag your image followed by docker run to launch your container similar to the below example:"
  },
  {
    "objectID": "Serverless containers-15",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Local development and testing",
    "depth": 3,
    "text": "You can also run your application using standard tooling such as running node index.js or python server.py in Node or Python. Once you are satisfied with the Dockerfile and your application code, run amplify push and the amplify/backend/api/<name>/src directory will be bundled for the build pipeline to run and deploy your image to Fargate. At the end of the deployment the endpoint URL will be printed and client configuration files will be updated."
  },
  {
    "objectID": "Serverless containers-16",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Deploy multiple containers",
    "depth": 2,
    "text": "If you wish to deploy multiple containers into Fargate to define your API, Amplify will parse a Docker Compose file (docker-compose.yml) in your amplify/backend/api/<name>/src directory to define the backend service. If you are unfamiliar with using a Docker Compose review the Docker Compose getting started guide or or add an API with an Amplify-provided template."
  },
  {
    "objectID": "Serverless containers-17",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Deploy multiple containers",
    "depth": 2,
    "text": "A Compose file includes the logical container names, build & images settings, launch commands, ports, and more. An example Docker Compose file is below:"
  },
  {
    "objectID": "Serverless containers-18",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Deploy multiple containers",
    "depth": 2,
    "text": "This docker-compose.yml file would be placed in your amplify/backend/api/<name>/src when using the \"bring your own container\" flow. It defines two containers called express and python which each have a Dockerfile in two sub directories along with the application source files"
  },
  {
    "objectID": "Serverless containers-19",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Local development and testing",
    "depth": 3,
    "text": "As with the single container workflow, it is recommended to test your application locally first before deploying with amplify push, otherwise your Fargate Task may fail to start if there are application issues such as missing dependencies. Navigate to amplify/backend/api/<name>/src and run docker-compose up which will build your images and start them locally."
  },
  {
    "objectID": "Serverless containers-20",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Local development and testing",
    "depth": 3,
    "text": "If your application source changes for any of the images, you can rebuild them by running docker-compose build before running docker-compose up during your test and development cycle."
  },
  {
    "objectID": "Serverless containers-21",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Container networking",
    "depth": 3,
    "text": "Multiple containers are deployed as a single unit in Fargate (e.g. same Task Definition). This opinionated deployment allows ease of networking between containers on the local loopback interface and avoids extra configuration, costs, operations, and debugging."
  },
  {
    "objectID": "Serverless containers-22",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "When container is deployed to Fargate",
    "depth": 4,
    "text": "The loopback interface has an IP of 127.0.0.1 and a hostname of localhost which you can use in one container's application code to communicate with another."
  },
  {
    "objectID": "Serverless containers-23",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "When container is deployed to Fargate",
    "depth": 4,
    "text": "Using the docker-compose.yml example from earlier, you might have the following code in your NodeJS application. It references the port of the Redis container and a host using the loopback adapter with localhost:"
  },
  {
    "objectID": "Serverless containers-24",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "When testing locally using docker-compose up",
    "depth": 4,
    "text": "When performing local development and testing with docker-compose up you will use the logical container name defined in your docker-compose.yaml file."
  },
  {
    "objectID": "Serverless containers-25",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "Amplify will configure your Fargate infrastructure (ECS Service and Task Definition) automatically while allowing you to override specific settings with a Docker Compose file. Older versions of Compose files are supported however not all configuration values will be honored, therefore it is recommended you update to 3.8. Additionally if a value has been deprecated in one version of Compose, Amplify will prefer the newest version (3.8)."
  },
  {
    "objectID": "Serverless containers-26",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "build"
  },
  {
    "objectID": "Serverless containers-27",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "name"
  },
  {
    "objectID": "Serverless containers-28",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "ports"
  },
  {
    "objectID": "Serverless containers-29",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "command"
  },
  {
    "objectID": "Serverless containers-30",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "entrypoint"
  },
  {
    "objectID": "Serverless containers-31",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "env_file"
  },
  {
    "objectID": "Serverless containers-32",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "image"
  },
  {
    "objectID": "Serverless containers-33",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "healthcheck"
  },
  {
    "objectID": "Serverless containers-34",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "working_dir"
  },
  {
    "objectID": "Serverless containers-35",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "user"
  },
  {
    "objectID": "Serverless containers-36",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "secrets"
  },
  {
    "objectID": "Serverless containers-37",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "replicas"
  },
  {
    "objectID": "Serverless containers-38",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "By default Amplify will use a single Availability Zone however if you choose the High Availability option it will spread Fargate Tasks across 3 Availability Zones. The replicas value should be used to increase the number of Fargate tasks running in your Cluster depending on your traffic requirements, however note that more running tasks will accrue more costs."
  },
  {
    "objectID": "Serverless containers-39",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "When you have multiple container entries specifying a port Amplify will prompt you upon running amplify push to select an Entrypoint Container. Since all containers are deployed as a \"unit\" and fronted by an API Gateway HTTP endpoint for client applications to access, Amplify needs to know which container in the Cluster's Service to route requests. The answer to the Entrypoint question will use the first specified ports entry to perform this routing."
  },
  {
    "objectID": "Serverless containers-40",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Supported Configurations",
    "depth": 3,
    "text": "It is recommended that you define container settings early in the development process if possible. While these settings can be updated later, it will cause an in-place replacement of the Fargate service configuration and could lead to your endpoint being unavailable for a few moments while the process completes. For best results minimize configuration changes in your Docker Compose settings and make more frequents updates to your application code in order to take advantage of rolling updates in the build and deploy pipeline."
  },
  {
    "objectID": "Serverless containers-41",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Environment variables and secrets",
    "depth": 3,
    "text": "You can use environment variables in your application code that are specified in your Docker Compose file, but do not specify the hostname when deploying in amplify push. For example the DATABASE_HOST variable below might be specified locally when using docker-compose up with the  environment setting:"
  },
  {
    "objectID": "Serverless containers-42",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Environment variables and secrets",
    "depth": 3,
    "text": "Then your application code can switch between local and cloud deployment automatically and communicate with the db container:"
  },
  {
    "objectID": "Serverless containers-43",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Environment variables and secrets",
    "depth": 3,
    "text": "secrets allow you to pass sensitive data to your containers from AWS Secrets Manager. Amplify will do this for you when you populate the secrets configuration at the root level of your docker-compose.yml. It must be a file name that starts with .secret- and cannot be in the src directory of amplify/backend/api/<name>, but can be anywhere outside of it including a relative path. It is recommended to place your secrets in a amplify/backend/api/<name>/secrets directory. Every .secret- file has only one string value and will referenced by the name you provide in the docker-compose.yml entry."
  },
  {
    "objectID": "Serverless containers-44",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Environment variables and secrets",
    "depth": 3,
    "text": "When you perform an amplify push you will be prompted to store the secrets in the cloud or bypass (which may be the case in team workflows when one person controls secrets). The name of the secret will be available in your application code similar to if you specified other variables via the environment configuration:"
  },
  {
    "objectID": "Serverless containers-45",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Environment variables and secrets",
    "depth": 3,
    "text": "NodeJS example"
  },
  {
    "objectID": "Serverless containers-46",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Environment variables and secrets",
    "depth": 3,
    "text": "Python example"
  },
  {
    "objectID": "Serverless containers-47",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Bring Your Own Container Specification For Your REST API",
    "depth": 2,
    "text": "When creating an API using containers, you have the option to bring in your own Dockerfile(s) and docker-compose.yml. When selecting the Docker image for your REST API, choose Custom and then select when to deploy code and configuration changes to your container."
  },
  {
    "objectID": "Serverless containers-48",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Bring Your Own Container Specification For Your REST API",
    "depth": 2,
    "text": "The CLI will provide you with the next steps to bring your existing Docker specification and source files into your project by populating the src directory."
  },
  {
    "objectID": "Serverless containers-49",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Client Configuration",
    "depth": 2,
    "text": "Serverless containers are fronted by a secure endpoint by which you can interact with them from a mobile or web application. Amplify CLI will attempt to update the project aws-exports.js or amplifyconfiguration.json file with the endpoint, however for GraphQL API types this is not possible and you will need to manually specify it in an Amplify.configure() call within your application code. The endpoint will be printed out to the screen after running an amplify push for you to make these changes, take note of it and follow one of the guides below appropriately."
  },
  {
    "objectID": "Serverless containers-50",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Client Configuration",
    "depth": 2,
    "text": "JavaScript GraphQL configuration"
  },
  {
    "objectID": "Serverless containers-51",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Client Configuration",
    "depth": 2,
    "text": "JavaScript REST configuration"
  },
  {
    "objectID": "Serverless containers-52",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Client Configuration",
    "depth": 2,
    "text": "Android GraphQL configuration"
  },
  {
    "objectID": "Serverless containers-53",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Client Configuration",
    "depth": 2,
    "text": "Android REST configuration"
  },
  {
    "objectID": "Serverless containers-54",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Client Configuration",
    "depth": 2,
    "text": "iOS GraphQL configuration"
  },
  {
    "objectID": "Serverless containers-55",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Client Configuration",
    "depth": 2,
    "text": "iOS REST configuration"
  },
  {
    "objectID": "Serverless containers-56",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Client Configuration",
    "depth": 2,
    "text": "Note that if you have enabled Authorization checks on your endpoints during amplify add api your clients will need to Authenticate against the Cognito User Pool configured and pass tokens. Please see the appropriate platform guide for adding Sign-Up and Sign-In calls to your application."
  },
  {
    "objectID": "Serverless containers-57",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Access existing AWS resource from container",
    "depth": 2,
    "text": "You can grant your Fargate Task access to additional AWS resources and services.  After running amplify add api, the CLI generates a custom-policies.json under the folder amplify/backend/api/<api-name>/custom-policies.json. The file is where you can specify the resources and actions that grant the Fargate task additional AWS resources and services access."
  },
  {
    "objectID": "Serverless containers-58",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Policy File Structure",
    "depth": 3,
    "text": "Action: Specify the actions that are required to be granted to your AWS resource. Wild characters ‘*’ is accepted."
  },
  {
    "objectID": "Serverless containers-59",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Policy File Structure",
    "depth": 3,
    "text": "Resource: Specify resources that the AWS resource needs access. The resource accepts multiple ARNs for a service and wild card character ‘*’ is accepted."
  },
  {
    "objectID": "Serverless containers-60",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Policy File Structure",
    "depth": 3,
    "text": "Note: Specifying resource or action as ‘*’ is not recommended as best practice. This gives the Amplify api resource Administrative privileges which should be avoided."
  },
  {
    "objectID": "Serverless containers-61",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Policy File Structure",
    "depth": 3,
    "text": "If your Amplify resource requires access to multiple AWS services and resources, create another block to grant access to these additional services and resources."
  },
  {
    "objectID": "Serverless containers-62",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Policy File Structure",
    "depth": 3,
    "text": "Optionally, the Effect field can be specified to use ‘Allow’ or ‘Deny’. If not specified, the field defaults to ‘Allow’."
  },
  {
    "objectID": "Serverless containers-63",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Policy File Structure",
    "depth": 3,
    "text": "On running amplify push command, the IAM policies specified in the custom-policies.json file will be appended to the existing IAM policy list tied to the Fargate Task's execution role."
  },
  {
    "objectID": "Serverless containers-64",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Multi-Environment Workflow",
    "depth": 3,
    "text": "To specify AWS ARN resources across environments, an optional ‘$’ parameter can be used within the resource string. The ‘$’ parameter in the AWS ARN resource will get populated with the current Amplify environment name at deployment."
  },
  {
    "objectID": "Serverless containers-65",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Hosting",
    "depth": 2,
    "text": "When using containers in the amplify add hosting workflow the setup will be largely the same, including the ability to define your backend with a single Dockerfile or Docker Compose file yaml. However the ECS cluster will be fronted by an Application Load Balancer (ALB) and CloudFront distribution, and you will be required to provide a domain name which you own. This can either be a domain which you have purchased on a 3rd party registrar or with Route53. The domain will be used with Amazon Certificate Manager to configure SSL between ALB and Cognito User Pools to perform authorization to your website hosted on Fargate containers."
  },
  {
    "objectID": "Serverless containers-66",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Hosting",
    "depth": 2,
    "text": "Hosting with Fargate in Amplify is only available in US-East-1 at this time"
  },
  {
    "objectID": "Serverless containers-67",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Hosting",
    "depth": 2,
    "text": "If you are using a non-Route53 registrar, you will need two additional steps:"
  },
  {
    "objectID": "Serverless containers-68",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Hosting",
    "depth": 2,
    "text": "Approve the certificate request. This will come via email to your registered address. If you do not see it you may need to resend the email."
  },
  {
    "objectID": "Serverless containers-69",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Hosting",
    "depth": 2,
    "text": "Add a CNAME (A Record) on your to your DNS for the CloudFront distribution and Application Load Balancer. These will be printed out to the screen after amplify push succeeds."
  },
  {
    "objectID": "Serverless containers-70",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Hosting",
    "depth": 2,
    "text": "For Route53 registered domains these steps are not needed and Amplify will register everything automatically. You can learn more about registering a domain name in the Route53 documentation."
  },
  {
    "objectID": "Serverless containers-71",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Hosting",
    "depth": 2,
    "text": "You can additionally restrict access to your hosted site using Amazon Cognito User Pools. The ALB will authorize requests by using the OAuth endpoint of the Cognito Hosted UI with an SSL-enabled HTTP listener. To do this run amplify add auth first and select Default configuration with Social Provider (Federation) to enable the Hosted UI (you don't need to select any of the 3rd party social providers if it's not needed in your application). After this select Yes when prompted Do you want to automatically protect your web app using Amazon Cognito Hosted UI in the amplify add hosting flow. Alternatively, you can first add hosting and later add auth to your project by running amplify configure hosting after this is completed."
  },
  {
    "objectID": "Serverless containers-72",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build Pipeline",
    "depth": 2,
    "text": "Amplify creates APIs as an ECS Service to ensure that your application is monitored and tasks are in a healthy and active state, automatically recovering if an instance fails. When you make changes to your source code, the build and deployment pipeline will take your source code and Dockerfile/Docker Compose configuration as inputs. One or more containers will be built in AWS CodeBuild using your source code and pushed to ECR with a build hash as a tag, allowing you to roll back deployments if something unexpected happens in your application code. After the build is complete, the pipeline will perform a rolling deployment to launch Fargate Tasks automatically. Only when all new versions of the image are in a healthy & running state will the old tasks be stopped. Finally the build artifacts in S3 (in the fully managed scenario) and ECR images are set with a lifecycle policy retention of 7 days for cost optimization."
  },
  {
    "objectID": "Serverless containers-73",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Fully Managed",
    "depth": 4,
    "text": "The fully managed workflow does not require you to have a source control repository or even Docker installed on your local workstation in order to build and deploy a container to Fargate. Amplify will package the contents of amplify/backend/api/<name>/src and place it onto an S3 deployment bucket. This will trigger a Code Pipeline process which builds your container(s), stores the results in ECR, and deploys them to Fargate."
  },
  {
    "objectID": "Serverless containers-75",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Fully Managed",
    "depth": 4,
    "text": "For single containers only one ECR entry and deployment will take place. When using a Dockerfile, a build and push to ECR will take place for each container that has a corresponding build entry. For containers that only have an image entry no ECR push will take place and this image will be launched directly into the Fargate Task. As you make changes to your source code in amplify/backend/api/<name>/src, Amplify will detect any changes when you run amplify push, package the new files together and place them on S3. This will start another run of the build and deploy pipeline automatically updating your Fargate Service."
  },
  {
    "objectID": "Serverless containers-76",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GitHub Source",
    "depth": 4,
    "text": "If you are using GitHub as your source repository for an Amplify project, you can use this to invoke the pipeline instead of having Amplify package and upload source to S3. In this use case you will need to provide a GitHub personal access token which will be stored in Secrets Manager as well as the full URL to your repository folder (or the branch). For instance if you push an Amplify project to GitHub called MyFargateProject you would use https://github.com/username/MyFargateProject/tree/main/amplify/backend/api/APINAME/src. repo and admin:repo_hook scopes will be needed. Please see the Code Pipeline documentation for more details."
  },
  {
    "objectID": "Serverless containers-77",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GitHub Source",
    "depth": 4,
    "text": "Code Pipeline will use this for accessing the GitHub repo of your choosing and invoke the build and deploy to your Fargate Service, just as with the Fully Managed flow. Your repository must have the same structure as you would have had locally in amplify/backend/api/APINAME/src, that is to say:"
  },
  {
    "objectID": "Serverless containers-78",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GitHub Source",
    "depth": 4,
    "text": "Single container needs to have a Dockerfile and all other required files (package.json, etc.)"
  },
  {
    "objectID": "Serverless containers-79",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GitHub Source",
    "depth": 4,
    "text": "Multiple containers needs to have a docker-compose.yml and related file structure"
  },
  {
    "objectID": "Serverless containers-80",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GitHub Source",
    "depth": 4,
    "text": "Code Pipeline will create a webhook on the GitHub repository which will trigger an invocation of the build and deployment pipeline to Fargate."
  },
  {
    "objectID": "Serverless containers-81",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Self-managed builds",
    "depth": 4,
    "text": "You can always interact directly with the resources in your account to build containers locally and deploy them to ECR. This is an advanced option that we do not recommend for customers getting started. As you will need to run manual docker commands for building, tagging, and pushing your images to ECR. You will also need to restart the tasks manually on your ECS Service. Please see the ECR documentation for more information."
  },
  {
    "objectID": "Serverless containers-82",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Troubleshooting",
    "depth": 3,
    "text": "Note that a container deployment could fail or be problematic in a few different ways ranging from a build issue to bugs in your application code not seen until production. There are different checkpoints along the way to help prevent application issues as well as methods to revert changes which are outlined below. To access the AWS Console with details of your container status, logging, or build pipeline at any time run amplify console api and select your deployed API."
  },
  {
    "objectID": "Serverless containers-83",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "When your code is submitted to the pipeline either via amplify push or check-in to GitHub, it will be packaged and submitted to a CodeBuild job. If this build phase fails your the rest of the pipeline stops and your code will not even attempt to launch on Fargate until the build errors have been resolved. The job will perform the following:"
  },
  {
    "objectID": "Serverless containers-84",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "Login to ECR"
  },
  {
    "objectID": "Serverless containers-85",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "Create a commit hash"
  },
  {
    "objectID": "Serverless containers-86",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "Build each container (e.g. docker build)"
  },
  {
    "objectID": "Serverless containers-87",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "Tag each container (e.g. docker tag)"
  },
  {
    "objectID": "Serverless containers-88",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "Push each container to ECR (docker push with commit hash)"
  },
  {
    "objectID": "Serverless containers-89",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "Write the build artifact (imagedefinitions.json) to S3"
  },
  {
    "objectID": "Serverless containers-90",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "If you see a failure in the Code Pipeline console at this step, you can view the details of the build (even clicking \"Tail Logs\" while the pipeline is running) to see what error occurred. It's possible you have a misconfiguration in your Dockerfile or even a network failure pulling an image from a 3rd party repository. To help avoid this issue you can always run docker build or docker-compose up locally before submitting a build and validating the application runs."
  },
  {
    "objectID": "Serverless containers-91",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Build failure",
    "depth": 3,
    "text": "Note that on your first deployment a queueing process will take a bit longer to setup your project networking stack and run initial builds in Code Pipeline. During this time if your build fails for any reason (even external image throttling or Dockerfile config) the process will roll back. If you wish to debug this during initial rollout the Amplify CLI will print out the URL of the pipeline when amplify push starts to process the stack for you to view the build phase actively."
  },
  {
    "objectID": "Serverless containers-92",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Container launch failure",
    "depth": 3,
    "text": "If your build pipeline completes and rolling deployment to your ECS cluster begins, but you notice that the process is not completing, it may be due to an application issue or container configuration problem in the Dockerfile. For example if you had a NodeJS or Python application that crashed upon startup (such as a file/module not found) the task may shut down. Since ECS is trying to keep the service alive it will retry starting the task several times to see if the problem will self correct. If you know what the problem is and want to stop this retry process early so that you can try another push, simply open the Cluster and click on the Service in the ECS console. Update the service and set the desired count for running tasks to 0 (zero) and update the cluster. Then fix the problem and perform another amplify push to try a deployment again."
  },
  {
    "objectID": "Serverless containers-93",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Container launch failure",
    "depth": 3,
    "text": "Common issues are the application level crashes mentioned above, as well as incorrect Dockerfile/Docker-Compose commands such as those specified in entrypoint, command, or RUN. It's also possible that a specified healthcheck is continually failing. To troubleshoot this further you can click on the Cluster then Service in the ECS console followed by Tasks to see the Stopped containers. If you expand them there may be a top level error message giving information such as permissions or resource issues. Amplify also sets up logging by default and on this screen you will also find \"Log Configuration\" to view the logs in CloudWatch when you expand each container entry."
  },
  {
    "objectID": "Serverless containers-94",
    "title": "Serverless containers",
    "description": "Deploy containers to AWS. Serverless containers leverage AWS Fargate when building REST or GraphQL APIs in your account. containers can be deployed via a single Dockerfile definition or by using a Docker Compose file, with a build and deployment pipeline created inside your AWS account.",
    "slug": "/cli/usage/containers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Application code bug",
    "depth": 3,
    "text": "Finally you may have an issue in your application code. This would be seen either in the CloudWatch logs outlined above or through functional testing. You can log to CloudWatch via standard language logging (e.g. console.log() in NodeJS). The simple and most straight forward way to make a fix is roll forward deployments, such as fixing the code and performing another amplify push. Sometimes this is not possible and you need to revert a change to an older image. Amplify automatically creates a commit hash for each successful build before storing the record in ECR, with the most recent build having an additional latest tag applied. Older revisions are kept in ECR for 7 days before being cleaned up in order to avoid extra storage costs. If you need to revert to an older version you can note the commit hash and re-tag it along with the latest tag, then stop the tasks in your Cluster Service. ECS will automatically pull your newly tagged revision from ECR and deploy that version."
  },
  {
    "objectID": "Mocking and testing-0",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "It is highly recommended that you complete the Getting Started section of Amplify setup before using local mocking."
  },
  {
    "objectID": "Mocking and testing-1",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "🚀 Get Started"
  },
  {
    "objectID": "Mocking and testing-2",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In order to quickly test and debug without pushing all changes in your project to the cloud, Amplify supports Local Mocking and Testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda). This includes using directives from the GraphQL Transformer, editing & debug resolvers, hot reloading, JWT mocking of authorization checks, and even performing S3 operations such as uploading and downloading content."
  },
  {
    "objectID": "Mocking and testing-3",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Java is required on your development workstation to use Local Mocking in Amplify"
  },
  {
    "objectID": "Mocking and testing-4",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "NOTE: Currently, on Apple Silicon Macs, Amplify sometimes fails to start mocks when using certain JDK versions built for ARM processors."
  },
  {
    "objectID": "Mocking and testing-5",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you encounter this issue, please try using the official openJDK 16.0.1 from the Java website: JDK Download"
  },
  {
    "objectID": "Mocking and testing-6",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Blog walk-through with sample app."
  },
  {
    "objectID": "Mocking and testing-7",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "After running amplify init you can immediately add a GraphQL API and begin mocking without first pushing to the cloud. REST APIs are not yet supported. For example:"
  },
  {
    "objectID": "Mocking and testing-8",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "When you run amplify mock api the codegen process will run and create any required GraphQL assets such as queries, mutations, and subscriptions as well as TypeScript or Swift classes for your app. Android requires a build step for Gradle to create required classes after the codegen process completes, as well as an extra configuration in your AndroidManifest.xml."
  },
  {
    "objectID": "Mocking and testing-9",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "If you do not wish to test your app locally, you can still use the local GraphQL console as well as edit, debug, and test your VTL resolvers locally against the mock endpoint."
  },
  {
    "objectID": "Mocking and testing-10",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "When adding a schema use an API Key at first to ensure everything works, though you can authenticate against a Cognito User Pool and the local testing server will honor the JWT tokens. You can also mock the JWT tokens in the local console (outlined below), however in that case you will need to do an amplify push first to create the User Pool."
  },
  {
    "objectID": "Mocking and testing-11",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "When defining a schema you can use directives from the GraphQL Transformer in local testing as well as local code generation from the schema for types. The following directives are currently supported in local testing:"
  },
  {
    "objectID": "Mocking and testing-12",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "@auth"
  },
  {
    "objectID": "Mocking and testing-13",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "@primaryKey, @index"
  },
  {
    "objectID": "Mocking and testing-14",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "@hasOne, @hasMany, @belongsTo, @manyToMany"
  },
  {
    "objectID": "Mocking and testing-15",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "@function"
  },
  {
    "objectID": "Mocking and testing-16",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "If you have DynamoDB Lambda triggers set up on @model types in your GraphQL schema, by following steps listed here,\nthen you can test those Lambda triggers locally via amplify mock or amplify mock api."
  },
  {
    "objectID": "Mocking and testing-17",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "The connected Lambda triggers are automatically invoked locally if you perform a CRUD operation on the @model type using either the local DynamoDB endpoint (http://localhost:62224) or\nthe local AppSync console (should be http://localhost:20002). The structure of the event that is sent to the lambda trigger can be found here."
  },
  {
    "objectID": "Mocking and testing-18",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "The environment variables that are listed below in Function mock environment variables, are available for each invocation of the Lambda trigger."
  },
  {
    "objectID": "Mocking and testing-19",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "In addition, you can use a .env file within the function directory (ie. <project root>/amplify/backend/function/<function name>/.env) to override any environment variables for local mocking."
  },
  {
    "objectID": "Mocking and testing-20",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "Note: IAM authorization rules in Mock get are treated as Auth role if the request is signed with AccessKey ASIAVJKIAM-AuthRole. Otherwise the request is treated as made by an unAuth user."
  },
  {
    "objectID": "Mocking and testing-21",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "API mocking setup",
    "depth": 2,
    "text": "Note: that @searchable is not supported at this time."
  },
  {
    "objectID": "Mocking and testing-22",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Storage mocking setup",
    "depth": 2,
    "text": "For S3 storage mocking, after running amplify init you must first run through amplify add auth, either explicitly or implicitly if adding storage first, and then run an amplify push. This is because mocking storage in client libraries requires credentials for initial setup. Note however that S3 authorization rules, such as those placed on a bucket policy, are not checked by local mocking at this time."
  },
  {
    "objectID": "Mocking and testing-23",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Storage mocking setup",
    "depth": 2,
    "text": "Once you have done an initial push you can run the mock server and hit the local endpoint:"
  },
  {
    "objectID": "Mocking and testing-24",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Storage mocking setup",
    "depth": 2,
    "text": "To use an iOS application with the local S3 endpoint you will need to modify your Info.plist file. To use an Android application with the local S3 endpoint you will need an extra configuration in your AndroidManifest.xml."
  },
  {
    "objectID": "Mocking and testing-25",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Storage mocking setup",
    "depth": 2,
    "text": "For DynamoDB storage, setup is automatically done when creating a GraphQL API with no action is needed on your part. Resources for the mocked data, such as the DynamoDB Local database or objects uploaded using the local S3 endpoint, inside your project under amplify/mock-data."
  },
  {
    "objectID": "Mocking and testing-26",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mocking setup",
    "depth": 2,
    "text": "After adding a function to your project with amplify add function you can test it using amplify mock function."
  },
  {
    "objectID": "Mocking and testing-27",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mocking setup",
    "depth": 2,
    "text": "amplify mock function supports the following arguments:"
  },
  {
    "objectID": "Mocking and testing-28",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mocking setup",
    "depth": 2,
    "text": "<function name> - The name of the function to mock. Must immediately follow amplify mock function, eg. amplify mock function myFunctionName"
  },
  {
    "objectID": "Mocking and testing-29",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mocking setup",
    "depth": 2,
    "text": "--event \"<path to event JSON file>\" - Use the specified JSON file as the event to pass to the Lambda handler"
  },
  {
    "objectID": "Mocking and testing-30",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mocking setup",
    "depth": 2,
    "text": "--timeout <number of seconds> - Override the default 10 second function response timeout with a custom timeout value"
  },
  {
    "objectID": "Mocking and testing-31",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mocking with GraphQL",
    "depth": 3,
    "text": "A GraphQL Lambda resolver connected to your schema using @function can be mocked using amplify mock api.\nFor example, if you have a function named quoteOfTheDay and a schema like:"
  },
  {
    "objectID": "Mocking and testing-32",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mocking with GraphQL",
    "depth": 3,
    "text": "Then when running amplify mock api, the local GraphQL endpoint will invoke this function locally when running a GraphQL query such as:"
  },
  {
    "objectID": "Mocking and testing-33",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "amplify mock functionpopulates environment variables that mimic what will be present when deployed in the cloud. Amplify parses the function's CloudFormation template and attempts to resolve any environment variables specified there (also review function mock limitations)."
  },
  {
    "objectID": "Mocking and testing-34",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "CloudFormation parameters will be resolved by:"
  },
  {
    "objectID": "Mocking and testing-35",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "Resolving values specified in the parameters.json file for the function"
  },
  {
    "objectID": "Mocking and testing-36",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "Resolving values specified in team-provider-info.json within the <env>.categories.function.<function name> block, where <env> is the currently checked out environment and <function name> is the function being mocked"
  },
  {
    "objectID": "Mocking and testing-37",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "AWS::Region, AWS::AccountID, AWS::StackName, and AWS::StackId are resolved by parsing the awscloudformation configuration of the current environment in team-provider-info.json"
  },
  {
    "objectID": "Mocking and testing-38",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "Parameters constructed from dependencies on other resources in the project are resolved by parsing amplify-meta.json. Additionally, if a mock API is currently running and the function depends on the API, the local API URL will replace the cloud URL"
  },
  {
    "objectID": "Mocking and testing-39",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "The mock environment will also populate lambda runtime environment variables in the following way:"
  },
  {
    "objectID": "Mocking and testing-40",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN will be populated using the AWS credentials that the Amplify project is currently configured to use"
  },
  {
    "objectID": "Mocking and testing-41",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "_HANDLER, AWS_REGION, AWS_LAMBDA_FUNCTION_NAME, LAMBDA_TASK_ROOT, and LAMBDA_RUNTIME_DIR will be set based on the function being mocked"
  },
  {
    "objectID": "Mocking and testing-42",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "Static defaults will be specified for all other runtime environment variables. The full list of static defaults can be found here"
  },
  {
    "objectID": "Mocking and testing-43",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock environment variables",
    "depth": 3,
    "text": "You can also override any mock environment variables in a .env file within the function directory (ie. <project root>/amplify/backend/function/<function name>/.env)."
  },
  {
    "objectID": "Mocking and testing-44",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "Connect a mock function that operates on a table generated by @model to the mock table when running amplify mock api by:"
  },
  {
    "objectID": "Mocking and testing-45",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "Create a .env file in the function directory with the following:"
  },
  {
    "objectID": "Mocking and testing-46",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "Replace <api name> with the name of your API and <model> with the name of your model. The environment variable name should be all capitalized. For example, if you have an API named \"FlightStats\" and a model defined as type Airplane @model {...}, then then last line of the .env file should be:"
  },
  {
    "objectID": "Mocking and testing-47",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "Configure the DynamoDB client in your function as follows:"
  },
  {
    "objectID": "Mocking and testing-48",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "Run amplify mock api to activate the local DynamoDB endpoint"
  },
  {
    "objectID": "Mocking and testing-49",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "Run amplify mock function which will now connect to the mock DynamoDB table"
  },
  {
    "objectID": "Mocking and testing-50",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "When running in the cloud, these environment variables will have valid values except DDB_ENDPOINT which will be undefined. In this case the DynamoDB client will use the default endpoint."
  },
  {
    "objectID": "Mocking and testing-51",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "When running locally, these environment variables will be populated using the local .env file which specifies the fake values required to connect to the local database."
  },
  {
    "objectID": "Mocking and testing-52",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "Note: While connected to the mock database, calls to other AWS resources within the mock function will not work because the AWS credential environment variables have been overwritten with fake credentials. To call a mock table as well as other AWS services, add logic to switch between the fake credentials and the real ones in the DynamoDB client configuration. In this case, you could configure your .env file with:"
  },
  {
    "objectID": "Mocking and testing-53",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Connecting to a mock @model table",
    "depth": 3,
    "text": "And configure the DynamoDB client with:"
  },
  {
    "objectID": "Mocking and testing-54",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock limitations",
    "depth": 3,
    "text": "amplify mock function does not attempt to fully simulate the Lambda runtime environment. There may be some cases where the behavior of your function when mocking differs from executing in the cloud."
  },
  {
    "objectID": "Mocking and testing-55",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Function mock limitations",
    "depth": 3,
    "text": "For example, mock runs on your local OS and does not attempt to emulate Amazon Linux which executes your function in the cloud. Testing with amplify mock function should be used to get quick feedback on the correctness of your function but should not be used as a substitute for testing in a cloud development environment."
  },
  {
    "objectID": "Mocking and testing-56",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Config files",
    "depth": 2,
    "text": "When performing operations against the local mock endpoint, the Amplify CLI will automatically update your aws-exports.js and awsconfiguration.json with the local endpoints, fake values where necessary (e.g. fake API key), and disable SSL with an explicit value (DangerouslyConnectToHTTPEndpointForTesting) to indicate the functionality is only for local mocking and testing. This happens automatically when you run amplify mock and the server is running. Once you stop the mock server the config files are updated with the correct cloud endpoints for your project and DangerouslyConnectToHTTPEndpointForTesting is removed from the config file."
  },
  {
    "objectID": "Mocking and testing-57",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "iOS config",
    "depth": 2,
    "text": "When running against the local mock S3 server with iOS you must update your Info.plist to not require SSL when on a local network. To enable this set NSAllowsLocalNetworking to YES under NSAppTransportSecurity. This will scope the security exception to only run on localhost domains as outlined in Apple Developer documentation for NSAllowsLocalNetworking."
  },
  {
    "objectID": "Mocking and testing-58",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Android config",
    "depth": 2,
    "text": "When running against the local mock server with Android it is recommended to use additional Build Variants, such as a Debug and Release, to enable cleartext traffic only if the app is running on your local network. This will help ensure that you do not allow unsecured HTTP traffic in your Release Build Variant."
  },
  {
    "objectID": "Mocking and testing-59",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Android config",
    "depth": 2,
    "text": "For example, in your Android Studio project create /src/debug/AndroidManifest.xml and in this file create a network configuration file reference android:networkSecurityConfig=\"@xml/network_security_config\":"
  },
  {
    "objectID": "Mocking and testing-60",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Android config",
    "depth": 2,
    "text": "Then create the network configuration file /src/debug/res/xml/network_security_config.xml and restrict to only run on your localhost IP range:"
  },
  {
    "objectID": "Mocking and testing-61",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Android config",
    "depth": 2,
    "text": "Then use a Build Variant and run the Debug build and only test this setting with your local mock server. To learn more about this please see the official Android documentation."
  },
  {
    "objectID": "Mocking and testing-62",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Android config",
    "depth": 2,
    "text": "Alternatively, if you are running a non-production application and do not want to use multiple Build Variants, you can set android:usesClearTextTraffic=\"true\" in your AndroidManifest.xml as in the code snippet below. This is not a recommended practice. Ensure you remove this once mocking is complete."
  },
  {
    "objectID": "Mocking and testing-63",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GraphQL Local Console",
    "depth": 2,
    "text": "To start testing, before starting your JavaScript/Android/iOS application run the following command:"
  },
  {
    "objectID": "Mocking and testing-64",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GraphQL Local Console",
    "depth": 2,
    "text": "Alternatively, you can run amplify mock api to only mock the API category. When prompted, ensure you select YES to automatically generate queries, mutations, and subscriptions if you are building a client application."
  },
  {
    "objectID": "Mocking and testing-65",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GraphQL Local Console",
    "depth": 2,
    "text": "Once the server starts it will print a URL. Open this URL in your browser (it should be http://localhost:20002) and the OneGraph GraphQL console will open up in your browser. You can use the explorer on the left to build out a query/mutation or manually type your statements in the main window. Amplify mocking will use DynamoDB Local to persist the records on your system. If you wish, you can view these in Visual Studio code with SQLite Explorer. Follow the instructions in that repo for connecting to local databases."
  },
  {
    "objectID": "Mocking and testing-66",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GraphQL Local Console",
    "depth": 2,
    "text": "When your API is configured to use Cognito User Pools, the local console provides a way to change Username, Groups, and email of the bundled JWT token. These values are used by GraphQL transformers Auth directive. Edit them by clicking Auth and saving your changes, then run operations in the console to test your rules."
  },
  {
    "objectID": "Mocking and testing-67",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GraphQL Resolver Debugging",
    "depth": 2,
    "text": "You can edit VTL templates locally to see if they contain errors, including the line numbers causing problems, before pushing to AppSync. With the local API running navigate to amplify/backend/api/APINAME/resolvers where APINAME is the logical name that you used when running $amplify add api. You will see a list of resolver templates that the Transformer generated. Modify any of them and save, and they will be immediately loaded into the locally running API service with a message Mapping template change detected. Reloading.. If there is an error you will see something such as the following:"
  },
  {
    "objectID": "Mocking and testing-68",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "GraphQL Resolver Debugging",
    "depth": 2,
    "text": "If you stop the server locally, for instance to push your changes to the cloud, all of the templates in the ../APINAME/resolvers directory will be removed except for any that you modified. When you subsequently push to the cloud these local changes will be merged with your AppSync API."
  },
  {
    "objectID": "Mocking and testing-69",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Modify schema and test again",
    "depth": 3,
    "text": "As you are developing your app, you can always modify the GraphQL schema which lives in amplify/backend/api/APINAME/schema.graphql. You can modify any types using any of the supported directives and save this file, while the local server is still running. The changes will be detected and if your schema is valid they will be hot reloaded into the local API. If there is an error in the schema an error will be printed to the terminal like so:"
  },
  {
    "objectID": "Mocking and testing-70",
    "title": "Mocking and testing",
    "description": "Learn how to quickly test and debug without pushing all changes in your Amplify project to the cloud. Use local mocking and testing for certain categories including API (AWS AppSync), Storage (Amazon DynamoDB and Amazon S3), and Functions (AWS Lambda).",
    "slug": "/cli/usage/mock",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Modify schema and test again",
    "depth": 3,
    "text": "Amplify libraries when configured for these categories can use the local mocked endpoints for testing your application. When a mock endpoint is running the CLI will update your aws-exports.js or awsconfiguration.json to use the mock server and once stopped they will be updated to use the cloud endpoint once you have run an amplify push."
  },
  {
    "objectID": "Lambda Triggers-0",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Amplify ships common trigger templates which you can enable and modify (if necessary) through a few simple questions."
  },
  {
    "objectID": "Lambda Triggers-1",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Cognito Lambda Triggers",
    "depth": 2,
    "text": "Certain AWS Services can invoke Lambda functions in response to lifecycle events. The Amplify CLI provides trigger templates for common use cases."
  },
  {
    "objectID": "Lambda Triggers-2",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Cognito Lambda Triggers",
    "depth": 2,
    "text": "If you wish to modify the functionality of these templates, you are able to do so locally before pushing them.  After selecting the templates via the CLI, your local copy of the templates are located in amplify/backend/function/<function-name>/src."
  },
  {
    "objectID": "Lambda Triggers-3",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Cognito Lambda Triggers",
    "depth": 2,
    "text": "Amazon Cognito allows you to set up one Lambda trigger per event.  In order to create additional flexibility when configuring Cognito triggers via the CLI, the CLI will create an index file which loops through JavaScript modules.  Each template that you configure is its own JavaScript module. This allows you to attach multiple use cases and logical flows to a single lifecycle event."
  },
  {
    "objectID": "Lambda Triggers-4",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Cognito Lambda Triggers",
    "depth": 2,
    "text": "You have the opportunity to edit both the index file as well as each module. For example, when creating a email deny list PreSignUp trigger, you will be asked"
  },
  {
    "objectID": "Lambda Triggers-5",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Cognito Lambda Triggers",
    "depth": 2,
    "text": "Selecting 'yes' will open the index file in your editor."
  },
  {
    "objectID": "Lambda Triggers-6",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Cognito Lambda Triggers",
    "depth": 2,
    "text": "You will then be asked if you want to edit the individual JavaScript module for the email deny list functionality:"
  },
  {
    "objectID": "Lambda Triggers-7",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Set up Lambda triggers",
    "depth": 3,
    "text": "There are two ways to setup Lambda Triggers for your Cognito User Pool."
  },
  {
    "objectID": "Lambda Triggers-8",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Set up Lambda triggers",
    "depth": 3,
    "text": "In the default Auth CLI workflow, you will be presented with a list of Lambda Trigger templates if you opt to configure advanced settings:"
  },
  {
    "objectID": "Lambda Triggers-9",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Set up Lambda triggers",
    "depth": 3,
    "text": "In the manual Auth CLI workflow, you will be given the chance to select the options above, but will also be able to manually configure Lambda Trigger templates:"
  },
  {
    "objectID": "Lambda Triggers-10",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Set up Lambda triggers",
    "depth": 3,
    "text": "If your manually-configured Lambda Triggers require enhanced permissions, you can run amplify function update after they have been initially configured."
  },
  {
    "objectID": "Lambda Triggers-11",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Auth Templates",
    "depth": 3,
    "text": "The CLI Auth workflow provides the following Lambda trigger templates:"
  },
  {
    "objectID": "Lambda Triggers-12",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Auth Challenge with Google reCaptcha",
    "depth": 3,
    "text": "Captchas allow front end applications to guard against bots or other unwanted page interactions by presenting a challenge that is designed to require human intervention. The Google reCaptcha service is a popular implementation of captcha."
  },
  {
    "objectID": "Lambda Triggers-13",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Auth Challenge with Google reCaptcha",
    "depth": 3,
    "text": "This template will configure three triggers: CreateAuthChallenge, DefineAuthChallenge, and VerifyAuthChallengeResponse."
  },
  {
    "objectID": "Lambda Triggers-14",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Custom Auth Challenge with Google reCaptcha",
    "depth": 3,
    "text": "The first two will essentially allow the standard username/password flow to execute unimpeded, while VerifyAuthChallengeResponse will run when the Auth.sendCustomChallenge function is called with the data that is returned when the user interacts with the Google reCaptcha component.  The VerifyAuthChallengeResponse Lambda function will subsequently execute a POST request to Google, and will pass the success or failure of the reCaptcha interaction back to Cognito."
  },
  {
    "objectID": "Lambda Triggers-15",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "React Sample",
    "depth": 4,
    "text": "The following code sample demonstrates how to create a custom ConfirmSignIn component in React using the react-google-recaptcha npm package."
  },
  {
    "objectID": "Lambda Triggers-16",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "The following code sample demonstrates how to create a custom ConfirmSignIn component in Angular using the ng-recaptcha npm package."
  },
  {
    "objectID": "Lambda Triggers-17",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "Be sure to follow all instructions for setting up an Angular application with aws-amplify-angular, and configure your Amplify instance to use the CUSTOM_AUTH flow."
  },
  {
    "objectID": "Lambda Triggers-18",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "app.module.ts:"
  },
  {
    "objectID": "Lambda Triggers-19",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "app.component.ts:"
  },
  {
    "objectID": "Lambda Triggers-20",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "app.component.html"
  },
  {
    "objectID": "Lambda Triggers-21",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Vue Sample",
    "depth": 4,
    "text": "The following code sample demonstrates how to create a custom ConfirmSignIn component in Vue using the vue-recaptcha npm package."
  },
  {
    "objectID": "Lambda Triggers-22",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Vue Sample",
    "depth": 4,
    "text": "App.vue"
  },
  {
    "objectID": "Lambda Triggers-23",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Vue Sample",
    "depth": 4,
    "text": "main.js"
  },
  {
    "objectID": "Lambda Triggers-24",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Vue Sample",
    "depth": 4,
    "text": "Finally, in public/index.html add the following script:"
  },
  {
    "objectID": "Lambda Triggers-25",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Basic Scaffolding for a Custom Auth Challenge",
    "depth": 3,
    "text": "This template will configure three triggers: CreateAuthChallenge, DefineAuthChallenge, and VerifyAuthChallengeResponse."
  },
  {
    "objectID": "Lambda Triggers-26",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Basic Scaffolding for a Custom Auth Challenge",
    "depth": 3,
    "text": "It will not, however, provide a fully-formed custom authentication flow. Instead, it will create a 'hello world' custom auth flow skeleton that you can manually edit. The intent of this template is to give you a starting place for building out your own custom auth flow."
  },
  {
    "objectID": "Lambda Triggers-27",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Email Verification Link with Redirect",
    "depth": 3,
    "text": "Cognito allows you to configure your User Pool to send an email to your users when they attempt to register an account. You can configure this email to contain a link to Cognito's Hosted UI where the user's account will be marked as confirmed."
  },
  {
    "objectID": "Lambda Triggers-28",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Email Verification Link with Redirect",
    "depth": 3,
    "text": "This trigger template allows you to define an email message with a link to a static S3 bucket that you control, where the user's account will be confirmed and they can then be redirected to a URL of your choice (presumably your application). The URL will automatically contain the username as a query string parameters."
  },
  {
    "objectID": "Lambda Triggers-29",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Email Verification Link with Redirect",
    "depth": 3,
    "text": "Please note that this trigger template will create an S3 resource.  The files that populate the static site are available for edit in amplify/backend/auth/<your-resource-name>CustomMessage/assets.  They consist of:"
  },
  {
    "objectID": "Lambda Triggers-30",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Email Verification Link with Redirect",
    "depth": 3,
    "text": "index.html"
  },
  {
    "objectID": "Lambda Triggers-31",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Email Verification Link with Redirect",
    "depth": 3,
    "text": "spinner.js (controls the spinner that appears on the page while users are awaiting confirmation)"
  },
  {
    "objectID": "Lambda Triggers-32",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Email Verification Link with Redirect",
    "depth": 3,
    "text": "style.css"
  },
  {
    "objectID": "Lambda Triggers-33",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Email Verification Link with Redirect",
    "depth": 3,
    "text": "verify.js (the script which performs the verification request)"
  },
  {
    "objectID": "Lambda Triggers-34",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "React Sample",
    "depth": 4,
    "text": "The following is an example of how to configure the aws-amplify-react authenticator so that it displays a message telling the user to check their email, instead of showing the default 'ConfirmSignUp' component."
  },
  {
    "objectID": "Lambda Triggers-35",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "The following is an example of how to configure the aws-amplify-angular authenticator so that it displays a message telling the user to check their email, instead of showing the default 'ConfirmSignUp' component."
  },
  {
    "objectID": "Lambda Triggers-36",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "Be sure to follow all instructions for setting up an Angular application with aws-amplify-angular."
  },
  {
    "objectID": "Lambda Triggers-37",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "app.component.ts:"
  },
  {
    "objectID": "Lambda Triggers-38",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Angular Sample",
    "depth": 4,
    "text": "app.component.html:"
  },
  {
    "objectID": "Lambda Triggers-39",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Vue Sample",
    "depth": 4,
    "text": "The following is an example of how to configure the aws-amplify-vue authenticator components so that your app displays a message telling the user to check their email, instead of showing the default 'ConfirmSignUp' component."
  },
  {
    "objectID": "Lambda Triggers-40",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Add User to Group",
    "depth": 3,
    "text": "This trigger allows you to define a Cognito group to which a user will be added upon registration."
  },
  {
    "objectID": "Lambda Triggers-41",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Add User to Group",
    "depth": 3,
    "text": "The trigger will check for the existence of the group in your User Pool, and will create the group if it is not present."
  },
  {
    "objectID": "Lambda Triggers-42",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Email Domain Filtering (deny list) and Email Domain Filtering (allow list)",
    "depth": 3,
    "text": "These two templates allow you to define email domains which are allowed or disallowed (respectively). They can be used in tandem or individually."
  },
  {
    "objectID": "Lambda Triggers-43",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Override ID Token Claims",
    "depth": 3,
    "text": "This template uses the Pre Token Generation trigger and allows you to add, override or remove claims from the ID token that is returned by Cognito."
  },
  {
    "objectID": "Lambda Triggers-44",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Override ID Token Claims",
    "depth": 3,
    "text": "You will need to manually edit the template to define the claims that you wish to manipulate. The template currently contains dummy values as examples."
  },
  {
    "objectID": "Lambda Triggers-45",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "S3 Lambda Triggers",
    "depth": 2,
    "text": "You can associate a trigger to an S3 bucket managed by the Amplify CLI, by following the amplify add/update storage flows. When attempting to add/update an S3 storage resource, you would get the following CLI prompts to add a trigger for it."
  },
  {
    "objectID": "Lambda Triggers-46",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "S3 Lambda Triggers",
    "depth": 2,
    "text": "As you can see in the prompt above, you can either choose to use an existing Lambda function created using the CLI as a part of this project using amplify add function or create a new function with a base Lambda function to handle S3 events. We also auto-populate the IAM policies required by the Lambda execution role of the newly created function to access the S3 bucket."
  },
  {
    "objectID": "Lambda Triggers-47",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "S3 Lambda Triggers",
    "depth": 2,
    "text": "Note: You can associate only one Lambda Function trigger to an S3 bucket."
  },
  {
    "objectID": "Lambda Triggers-48",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "DynamoDB Lambda Triggers",
    "depth": 2,
    "text": "You can associate a Lambda trigger with a DynamoDB table, managed by the Amplify CLI. There are two ways by which DynamoDB is provisioned by the Amplify CLI"
  },
  {
    "objectID": "Lambda Triggers-49",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "DynamoDB Lambda Triggers",
    "depth": 2,
    "text": "As a part of the Storage category"
  },
  {
    "objectID": "Lambda Triggers-50",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "DynamoDB Lambda Triggers",
    "depth": 2,
    "text": "As a part of the GraphQL API (types with @model annotation)"
  },
  {
    "objectID": "Lambda Triggers-51",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the Storage category",
    "depth": 3,
    "text": "You can add and manage a DynamoDB table to your Amplify project using the amplify add/update storage flows. When attempting to add/update a DynamoDB storage resource, you would get the following CLI prompts to add a trigger for it."
  },
  {
    "objectID": "Lambda Triggers-52",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the Storage category",
    "depth": 3,
    "text": "As you can see in the prompt above, you can either choose to use an already existing Lambda function created using the CLI as a part of this project using amplify add function or create a new function with a base Lambda function handle DynamoDB events."
  },
  {
    "objectID": "Lambda Triggers-53",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the Storage category",
    "depth": 3,
    "text": "Note: You can associate more than one Lambda Function trigger to a DynamoDB table."
  },
  {
    "objectID": "Lambda Triggers-54",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the GraphQL API (types with @model annotation)",
    "depth": 3,
    "text": "You can also associate a Lambda trigger with any of the GraphQL transformer schema's DynamoDB backed @models which you can add via amplify add api. GraphQL mutations that result in DynamoDB item changes will in turn result in change records published to DynamoDB streams that can trigger a Lambda function. To create such a function, start with adding a new lambda function with:"
  },
  {
    "objectID": "Lambda Triggers-55",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the GraphQL API (types with @model annotation)",
    "depth": 3,
    "text": "Proceed by providing a name and selecting a Lambda Trigger template:"
  },
  {
    "objectID": "Lambda Triggers-56",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the GraphQL API (types with @model annotation)",
    "depth": 3,
    "text": "Then select Amazon DynamoDB Stream when prompted with event source question."
  },
  {
    "objectID": "Lambda Triggers-57",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the GraphQL API (types with @model annotation)",
    "depth": 3,
    "text": "Now select API category graphql @model backed DynamoDB table."
  },
  {
    "objectID": "Lambda Triggers-58",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the GraphQL API (types with @model annotation)",
    "depth": 3,
    "text": "After the above question, you can select one of the types annotated by @model for which you want to add a trigger for."
  },
  {
    "objectID": "Lambda Triggers-59",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the GraphQL API (types with @model annotation)",
    "depth": 3,
    "text": "On completion of the above mentioned flow, a boilerplate lambda function trigger will be created in your amplify/backend/function directory with the following template:"
  },
  {
    "objectID": "Lambda Triggers-60",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "As a part of the GraphQL API (types with @model annotation)",
    "depth": 3,
    "text": "record.dynamodb will contain a DynamoDB change json describing the item changed in DynamoDB table.\nPlease note that it does not represent an original and new item as stored in DynamoDB table. To retrieve a original and new item you need to convert a DynamoDB json to original form:"
  },
  {
    "objectID": "Lambda Triggers-61",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Kinesis Stream Trigger",
    "depth": 2,
    "text": "Amplify Analytics category Kinesis stream resource can be also used as an event source for Lambda triggers. Event published to Kinesis stream will trigger a lambda function. You can add a Kinesis stream to your Amplify project by going through the amplify add analytics flow. To create a Lambda trigger for the Kinesis Stream, start with adding a new lambda function:"
  },
  {
    "objectID": "Lambda Triggers-62",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Kinesis Stream Trigger",
    "depth": 2,
    "text": "Proceed by providing a name and selecting a Lambda Trigger template:"
  },
  {
    "objectID": "Lambda Triggers-63",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Kinesis Stream Trigger",
    "depth": 2,
    "text": "Then select Amazon Kinesis Stream when prompted with event source question and select the resource."
  },
  {
    "objectID": "Lambda Triggers-64",
    "title": "Lambda Triggers",
    "description": "Lambda triggers are useful for adding functionality during certain lifecycles of the user's journey. Associate a Lambda trigger with an auth scenario, S3 bucket, DynamoDB table or Kinesis Stream managed through the Amplify CLI.",
    "slug": "/cli/usage/lambda-triggers",
    "category": "Amplify CLI",
    "subcategory": "Advanced workflows",
    "type": "article",
    "heading": "Kinesis Stream Trigger",
    "depth": 2,
    "text": "After the completion of the above flow, a Lambda function will be created in your amplify/backend/function directory and will be invoked when a new event is pushed to a Kinesis stream. Please refer to Working with the API to learn more about publishing your events to Kinesis stream."
  },
  {
    "objectID": "Commands-0",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Team workflows",
    "depth": 2,
    "text": "Amplify environments help you manage your local and cloud environments to mimic your team workflows. Common tasks include:"
  },
  {
    "objectID": "Commands-1",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Team workflows",
    "depth": 2,
    "text": "Manage environments to support development processes (e.g., development, staging, production)"
  },
  {
    "objectID": "Commands-2",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Team workflows",
    "depth": 2,
    "text": "Test new features safely"
  },
  {
    "objectID": "Commands-3",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Team workflows",
    "depth": 2,
    "text": "Share environments between team members"
  },
  {
    "objectID": "Commands-4",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Team workflows",
    "depth": 2,
    "text": "Support team workflows"
  },
  {
    "objectID": "Commands-5",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Team workflows",
    "depth": 2,
    "text": "To display all commands available for a new Amplify project, run the following command from the root directory."
  },
  {
    "objectID": "Commands-6",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Commands overview",
    "depth": 2,
    "text": "| Command  | Description  |\n|---|---|\n| amplify env add [--permissions-boundary <IAM Policy ARN>] | Adds a new environment |\n| amplify env pull [--restore] | Pulls the current environment from the cloud |\n| amplify env checkout <env-name> [--restore] | Switches to the selected environment |\n| amplify env list [--details] [--json] | Displays a list of all the environments |\n| amplify env get --name <env-name> | Displays the environment details |\n| amplify env update [--permissions-boundary <IAM Policy ARN>] | Updates the environment's IAM Permissions Boundary |\n| amplify env import --name <env-name> --config <provider-configs> [--awsInfo <aws-configs>] | Imports an environment |\n| amplify env remove <env-name> | Removes an environment |"
  },
  {
    "objectID": "Commands-7",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Add a new environment",
    "depth": 3,
    "text": "The add command goes through the following steps:"
  },
  {
    "objectID": "Commands-8",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Add a new environment",
    "depth": 3,
    "text": "Asks for a name for the new environment"
  },
  {
    "objectID": "Commands-9",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Add a new environment",
    "depth": 3,
    "text": "Creates IAM role for unauthenticated users"
  },
  {
    "objectID": "Commands-10",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Add a new environment",
    "depth": 3,
    "text": "Creates IAM role for authenticated users"
  },
  {
    "objectID": "Commands-11",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Add a new environment",
    "depth": 3,
    "text": "Creates S3 bucket for deployment"
  },
  {
    "objectID": "Commands-12",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Add a new environment",
    "depth": 3,
    "text": "Creates a new backend environment in AWS Amplify Console to view and manage resources."
  },
  {
    "objectID": "Commands-13",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Add a new environment",
    "depth": 3,
    "text": "Optionally, you can configure an IAM Permissions Boundary for all Amplify-generated roles via the --permissions-boundary parameter. For more information about configuring IAM Permissions Boundary, see IAM Permissions Boundary for Amplify-generated roles."
  },
  {
    "objectID": "Commands-14",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Pull the environment from the cloud",
    "depth": 3,
    "text": "Use this command to pull the current environment from the cloud. Add the --restore flag to overwrite your local changes like amplify pull command."
  },
  {
    "objectID": "Commands-15",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Checkout an environment",
    "depth": 3,
    "text": "Use this command to checkout the <env-name> environment. Add the --restore flag to overwrite your local changes."
  },
  {
    "objectID": "Commands-16",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "List environments",
    "depth": 3,
    "text": "Use this command to list all the environments. Add the --details or --json flags to see more details and format the output. Details include the AWS Region, IAM roles, S3 bucket and stack information."
  },
  {
    "objectID": "Commands-17",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "List environments",
    "depth": 3,
    "text": "See the output below for an Amplify project with dev and test environments. The active environment is preceded with an asterisk."
  },
  {
    "objectID": "Commands-18",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Show environment details",
    "depth": 3,
    "text": "Use this command to list all details for <env-name> environment. Details include the AWS Region, IAM roles, S3 bucket and stack information."
  },
  {
    "objectID": "Commands-19",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Import an environment",
    "depth": 3,
    "text": "Use this command to import an existing environment. Find below an example of a bash command."
  },
  {
    "objectID": "Commands-20",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Import an environment",
    "depth": 3,
    "text": "You can get the AWSCLOUDFORMATIONCONFIG from the team-provider-info.json file from your existing Amplify project."
  },
  {
    "objectID": "Commands-21",
    "title": "Commands",
    "description": "Use these Amplify CLI commands to manage a team workflow with multiple environments.",
    "slug": "/cli/teams/commands",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Remove an environment",
    "depth": 3,
    "text": "Use this command to remove an environment. This will remove both the local and the cloud environments including all provisioned services and resources."
  },
  {
    "objectID": "Continuous deployment-0",
    "title": "Continuous deployment",
    "description": "Use the multi-environments feature with the Amplify Console for a fully managed web application hosting and continuous deployment solution.",
    "slug": "/cli/teams/cicd",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Using Amplify Console",
    "depth": 2,
    "text": "You can use the multi-environments feature with the Amplify Console for a fully managed web application hosting and continuous deployment solution. For more information please learn more in the official documentation."
  },
  {
    "objectID": "Multiple frontends-0",
    "title": "Multiple frontends",
    "description": "Learn how to share the same Amplify backend across multiple frontends (e.g, a React and Android app).",
    "slug": "/cli/teams/multi-frontend",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Use the amplify pull command to share the same Amplify backend across multiple frontends (e.g, a React and Android app). Users have an option to pull the entire backend definition (infrastructure templates and metadata) or only the metadata (e.g. the aws-exports.js or amplifyconfiguration.json file) required to connect to the backend. If you’re building a mobile and web app in separate repositories, the recommended workflow is to keep the backend definition (the amplify folder) in only one of the repositories and pull the metadata (the aws-exports.js or amplifyconfiguration.json file) in the second repository to connect to the same backend."
  },
  {
    "objectID": "Multiple frontends-1",
    "title": "Multiple frontends",
    "description": "Learn how to share the same Amplify backend across multiple frontends (e.g, a React and Android app).",
    "slug": "/cli/teams/multi-frontend",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Workflow",
    "depth": 2,
    "text": "This workflow outlines the steps required to share a backend across two (or more) frontends. This example scenario is for a team building an Android and React app."
  },
  {
    "objectID": "Multiple frontends-3",
    "title": "Multiple frontends",
    "description": "Learn how to share the same Amplify backend across multiple frontends (e.g, a React and Android app).",
    "slug": "/cli/teams/multi-frontend",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Workflow",
    "depth": 2,
    "text": "Initialize a backend for your React app. This will create an Amplify project and backend environment that is accessible in the Amplify Console (by running amplify console)."
  },
  {
    "objectID": "Multiple frontends-4",
    "title": "Multiple frontends",
    "description": "Learn how to share the same Amplify backend across multiple frontends (e.g, a React and Android app).",
    "slug": "/cli/teams/multi-frontend",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Workflow",
    "depth": 2,
    "text": "Make your frontend changes and commit the code to Git. Your Git repository now stores the amplify folder which contains the definition of your infrastructure."
  },
  {
    "objectID": "Multiple frontends-5",
    "title": "Multiple frontends",
    "description": "Learn how to share the same Amplify backend across multiple frontends (e.g, a React and Android app).",
    "slug": "/cli/teams/multi-frontend",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Workflow",
    "depth": 2,
    "text": "Reference the backend from your Android app using the amplify pull command. Choose 'No' when asked if you want to modify or add new categories to your backend. This will put the amplifyconfiguration to your src folder only. Choosing 'Yes' will work, however your backend definition will now be stored in two separate repositories leading to unintended consequences with multiple sources of truth."
  },
  {
    "objectID": "Sandbox environments-0",
    "title": "Sandbox environments",
    "description": "Learn how to enable sandbox environments for your Amplify project.",
    "slug": "/cli/teams/sandbox",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Now you have two independent environments (main & dev) in the cloud and have corresponding git branches with your amplify backend infrastructure code on Git. Suppose a team member wants to work on the same Amplify project, add some features to it and then push changes to the dev environment to test some changes. They would perform the following steps:"
  },
  {
    "objectID": "Sandbox environments-1",
    "title": "Sandbox environments",
    "description": "Learn how to enable sandbox environments for your Amplify project.",
    "slug": "/cli/teams/sandbox",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Next, suppose the team-member wants to move these changes to dev and main environments/branches:"
  },
  {
    "objectID": "Sandbox environments-2",
    "title": "Sandbox environments",
    "description": "Learn how to enable sandbox environments for your Amplify project.",
    "slug": "/cli/teams/sandbox",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "After testing that everything works fine in the dev stage, you could now merge dev to the main git branch:"
  },
  {
    "objectID": "Sandbox environments-3",
    "title": "Sandbox environments",
    "description": "Learn how to enable sandbox environments for your Amplify project.",
    "slug": "/cli/teams/sandbox",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In this approach, you can consider the git branches (dev & main) as the source of truth and all the team members should work off the branches and keep their workspaces in sync."
  },
  {
    "objectID": "Share single environment-0",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You have two independent environments (main & dev) in the cloud and have corresponding Git branches with your Amplify backend infrastructure code on Git. Suppose all team members want to work on the same Amplify project and push backend related changes to the same dev environment to test their changes. Each team member would run the following:"
  },
  {
    "objectID": "Share single environment-1",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Ensure the root of your project has the amplify folder set up in order to be able to re-use existing environments."
  },
  {
    "objectID": "Share single environment-2",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If the team-provider-info.json file is missing:"
  },
  {
    "objectID": "Share single environment-3",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Backup and remove the amplify folder"
  },
  {
    "objectID": "Share single environment-4",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Pull the environment from the root of your project folder using the amplify pull --appId <app-id> --envName <env-name> command displayed in the Amplify Console for your application"
  },
  {
    "objectID": "Share single environment-5",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Since the team is sharing the same dev backend, periodically team members would need to pull in changes which their team members pushed for the dev environment to be in sync. Let's pull in the changes from the dev branch & environment."
  },
  {
    "objectID": "Share single environment-6",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Sharing projects within the team",
    "depth": 2,
    "text": "Team members will only be able to push to a stack only if they have the correct credentials (access key/secret keys) to do so."
  },
  {
    "objectID": "Share single environment-7",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Sharing projects within the team",
    "depth": 2,
    "text": "Inside the amplify directory file-structure, you will observe a team-provider-info.json file which contains a structure similar to the following:"
  },
  {
    "objectID": "Share single environment-8",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Sharing projects within the team",
    "depth": 2,
    "text": "This file is to be shared between team members, so that they have the ability to push/provision resources to the same CloudFormation stack and that way teams can work in a push/pull way and can always be in sync with the latest state of the project in the cloud."
  },
  {
    "objectID": "Share single environment-9",
    "title": "Share single environment",
    "description": "Learn the recommended workflow for multiple team members sharing a single Amplify environment.",
    "slug": "/cli/teams/shared",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Sharing projects within the team",
    "depth": 2,
    "text": "If you want to share a project publicly and open source your serverless infrastructure, you should remove or put the amplify/team-provider-info.json file in the .gitignore file."
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When you initialize a project, you create an Amplify backend environment. Every Amplify backend environment is a container for the categories added to your project. To deploy updates to an environment, run amplify push. In teams where multiple members are working on the same backend, it is good practice to run amplify pull to fetch changes from upstream before beginning work on new backend features. View the list of backend environments in your cloud project by visiting the Amplify Console."
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using the env checkout command -- similar to running git checkout BRANCHNAME, run amplify env checkout ENVIRONMENT_NAME to switch between environments. The diagram below shows a workflow of how to initialize new environments when creating new git branches."
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can independently add features to each environment which allows you to develop and test before moving them to different stages. Using the same example above of Dev being the base which Test and Prod were derived, you could add (or remove) features and merge & deploy accordingly once you are comfortable with your setup."
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "This can be done in an iterative manner as you work through your deployment pipeline:"
  },
  {
    "objectID": "Overview-7",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Multiple developers on a team can also share and manipulate the environment as well by using the credentials in the account. For instance suppose they wanted to test a change to the API without impacting the Test or Prod deployments. This will allow them to test the configured resources and, if they have been granted appropriate CloudFormation permissions, they can push resources as well to the backend with amplify push."
  },
  {
    "objectID": "Overview-9",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can alternatively, have developers setup their own isolated replica of these environments in a different AWS account. To do this simply:"
  },
  {
    "objectID": "Overview-10",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Clone the existing project"
  },
  {
    "objectID": "Overview-11",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run amplify env add and set up a new environment (e.g. \"mydev\") with that developer's account and AWS profile"
  },
  {
    "objectID": "Overview-12",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Deploy with amplify push"
  },
  {
    "objectID": "Overview-13",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "This workflow can be used to share complete Amplify projects with people outside of your organization as well by committing the project into a Git repository. If you are doing this remove (or add to the .gitignore file) the team-provider-info.json which is located in the amplify directory. You can learn more about this file here."
  },
  {
    "objectID": "Overview-14",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Continuous deployment and Hosting",
    "depth": 3,
    "text": "The Amplify CLI supports basic web application hosting with Amazon S3 and CloudFront. You can use the multi-environments feature with the Amplify Console for a fully managed web application hosting and continuous deployment solution. For more information please learn more in the official documentation."
  },
  {
    "objectID": "Overview-15",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Setting up prod and dev environments",
    "depth": 3,
    "text": "Create a Git repository for your project if you haven't already. It is recommended managing separate Git branches for different environments (try to have the same branch name as your environment name to avoid confusion).\nFrom the root of your project, execute the following commands:"
  },
  {
    "objectID": "Overview-16",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Setting up prod and dev environments",
    "depth": 3,
    "text": "Note: When you initialize a project using the Amplify CLI, it appends (if a gitignore file exists at the root of the project) or creates one for you (if a gitignore file doesn't exist at the root of your project), with a list of recommended files to check in from the Amplify CLI generated list of files, into your Git repository. Amplify CLI will continue to manage the section of your .gitignore between the #amplify-do-not-edit-begin and #amplify-do-not-edit-end pragmas."
  },
  {
    "objectID": "Overview-17",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Setting up prod and dev environments",
    "depth": 3,
    "text": "Once you have your 'prod' branch setup in Git, set up a 'dev' environment in your Amplify project (which would be based on your 'prod' environment), and then walk through the following steps to create a corresponding git branch for it."
  },
  {
    "objectID": "Overview-18",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Setting up prod and dev environments",
    "depth": 3,
    "text": "This will set up another environment for the project in the cloud. The backend-configs and resources are now cloned from the 'prod' environment. Run amplify push to provision all the AWS resources for your new environment (dev)."
  },
  {
    "objectID": "Overview-19",
    "title": "Overview",
    "description": "Every Amplify backend environment is a container for the categories added to your project. For multiple environments, Amplify matches the standard Git workflow where you switch between different branches using familiar commands.",
    "slug": "/cli/teams/overview",
    "category": "Amplify CLI",
    "subcategory": "Team environments",
    "type": "article",
    "heading": "Setting up prod and dev environments",
    "depth": 3,
    "text": "Now push the changes to the 'prod' branch (you would just see changes to the team-provider-info.json file -- when running a git status command, which has cumulative stack information for all the project environments which are useful when you want to share the same backend within a team). After this, let's create a new git branch -- 'dev' corresponding to the new environment we just created."
  },
  {
    "objectID": "Troubleshooting-0",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "This troubleshooting guide provides guidance to developers to detect and correct common errors encountered during development, deployment, and migration of applications built using the Amplify CLI."
  },
  {
    "objectID": "Troubleshooting-1",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "For all Amplify CLI projects",
    "depth": 3,
    "text": "To debug deployment issues, it's helpful to understand the file structure of your Amplify-generated project and the artifacts generated by the Amplify CLI."
  },
  {
    "objectID": "Troubleshooting-2",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "For all Amplify CLI projects",
    "depth": 3,
    "text": "Amplify CloudFormation artifacts: The Amplify CLI provisions AWS resources using CloudFormation templates and the input parameters provided by the user during the CLI walkthrough. Starting with Amplify CLI version 7 and above, some categories (Storage, Auth, API) allow developers to override the Amplify-generated AWS resource configurations with the Amplify CLI Overrides feature."
  },
  {
    "objectID": "Troubleshooting-3",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "For all Amplify CLI projects",
    "depth": 3,
    "text": "Amplify CLI walkthrough input parameters artifacts: All inputs provided by the user during a CLI walkthrough are stored in JSON files in the /amplify/backend folder. For example, cli-inputs.json or amplify-meta.json. These files let you inspect the configurations, both developer-provided and Amplify-generated, to root cause potential problems.\nRefer to Amplify backend files documentation to determine if a file is safe to edit manually."
  },
  {
    "objectID": "Troubleshooting-4",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "For Amplify CLI projects with GraphQL API",
    "depth": 3,
    "text": "To debug deployment issues in projects with GraphQL API, it's helpful to understand the various artifacts generated by Amplify in a GraphQL project."
  },
  {
    "objectID": "Troubleshooting-5",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "For Amplify CLI projects with GraphQL API",
    "depth": 3,
    "text": "GraphQL schema VTL generation: The Amplify CLI GraphQL workflow uses the AWS AppSync service to provision the GraphQL API. The amplify api gql-compile command transpiles the GraphQL schema provided by the developer and generates all the artifacts required to deploy the API in AWS."
  },
  {
    "objectID": "Troubleshooting-6",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "For Amplify CLI projects with GraphQL API",
    "depth": 3,
    "text": "Directives like @model, @function, @auth, and @searchable in the GraphQL schema are used to generate CloudFormation and provision AWS resources."
  },
  {
    "objectID": "Troubleshooting-7",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "For Amplify CLI projects with GraphQL API",
    "depth": 3,
    "text": "The GraphQL resolvers for Query, Mutation or Subscription are converted into VTL (Velocity Template Language) files. AWS AppSync uses VTL to translate GraphQL requests from clients into a request to your data source."
  },
  {
    "objectID": "Troubleshooting-8",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "For Amplify CLI projects with GraphQL API",
    "depth": 3,
    "text": "GraphQL schema client-side code generation: The Amplify CLI GraphQL workflow allows developers to generate client-side code for web and mobile clients using the amplify codegen command.\nRead the Amplify code generation documentation prior to debugging any client-side code generation issues."
  },
  {
    "objectID": "Troubleshooting-9",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "Errors:"
  },
  {
    "objectID": "Troubleshooting-10",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "“An error occurred during the push operation”"
  },
  {
    "objectID": "Troubleshooting-11",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "The amplify push command performs the following steps:"
  },
  {
    "objectID": "Troubleshooting-12",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "It generates CloudFormation for deployment of resources to AWS."
  },
  {
    "objectID": "Troubleshooting-13",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "If the application contains a GraphQL API, the CLI runs amplify api gql-compile internally to compile the schema and generate VTL (Velocity Templates) for mapping resolvers and CloudFormation templates to allocate AWS resources."
  },
  {
    "objectID": "Troubleshooting-14",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "It builds, packages, and uploads the deployment artifacts into the application's deployment bucket."
  },
  {
    "objectID": "Troubleshooting-15",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "It uses the AWS CloudFormation SDK to deploy the CloudFormation stack into your AWS account."
  },
  {
    "objectID": "Troubleshooting-16",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "On a successful deployment of the resources to AWS, the Amplify CLI renames the deployment package in the deployment bucket to #current-cloud-backend.zip. This file is the source of truth for your deployment."
  },
  {
    "objectID": "Troubleshooting-17",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "If your local project is deleted or corrupted, you can always go back to your last successful deployment using amplify pull."
  },
  {
    "objectID": "Troubleshooting-18",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "** This table shows the important files and folders in the Amplify deployment bucket **"
  },
  {
    "objectID": "Troubleshooting-19",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "|Name|Type|Purpose|\n|-|-|-|\n|#current-cloud-backend.zip|zip file|Source of truth for the Amplify project.|\n|amplify-appsync-files/ |folder| GraphQL API deployment artifacts (VTL resolvers, CloudFormation) |\n|amplify-cfn-templates/ |folder| CloudFormation templates generated by Amplify for each resource category |\n|amplify-meta.json| file | Used by CLI core and the plugins to log internal information and to communicate with each other |\n|backend-config.json | file | Configuration about how your project's backend connects to AWS resources |\n|hooks/ | folder | User provided Amplify hooks scripts |\n|root-cloudformation-stack.json | file | The parent CloudFormation template for your application's nested stack |"
  },
  {
    "objectID": "Troubleshooting-20",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting \"amplify push\" failures",
    "depth": 2,
    "text": "** The following sections contain examples of different types of \"amplify push\" failures and suggested resolutions **"
  },
  {
    "objectID": "Troubleshooting-21",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from unmanaged changes to cloud resources - Drift",
    "depth": 3,
    "text": "Warning: Once an application is deployed to the cloud using Amplify CLI the cloud resources like DynamoDB tables, Cognito Roles, or IAM policies must never be updated outside of Amplify CLI or Amplify Studio."
  },
  {
    "objectID": "Troubleshooting-22",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from unmanaged changes to cloud resources - Drift",
    "depth": 3,
    "text": "A change to Amplify-generated resource from outside of Amplify, such as using the AWS console, is called an \"unmanaged change\".\nThe Amplify CLI cannot track such changes made outside of the Amplify-generated CloudFormation stack.\nThis difference between the expected configuration of the resource in the Cloudformation versus the actual configuration of the service is called a “CloudFormation drift”.\nCurrently there is no automated way to reverse a CloudFormation drift. Each resource must be inspected through the AWS console for drift in its CloudFormation stack and the drift has to be resolved manually."
  },
  {
    "objectID": "Troubleshooting-23",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from unmanaged changes to cloud resources - Drift",
    "depth": 3,
    "text": "Upon deployment, the Amplify-generated CloudFormation templates provision an AppSync GraphQL API and multiple DynamoDB tables with their GSIs."
  },
  {
    "objectID": "Troubleshooting-24",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails after manually updating DynamoDB tables and GSIs from the console.",
    "depth": 4,
    "text": "Assume you have an application with a GraphQL schema deployed to the cloud.\nAmplify creates DynamoDB tables for all @model types and GSIs for all @index fields in the GraphQL schema.\n\"Drift\" is introduced if you delete any of the GSIs using the DynamoDB console, instead of using the Amplify CLI.\nWith drift, future changes to the GraphQL schema may fail to deploy.\nAs an example, if you change the names of some @model types and @index fields in your GraphQL schema and perform the amplify push --allow-destructive-graphql-schema-updates command, Amplify will first remove all DynamoDB tables corresponding to the original model names.\nHowever if any of these tables' GSIs were already deleted manually from the console, then the deployment will fail. This is because Amplify’s CloudFormation stack is attempting to update the state of a resource (the GSI) which doesn’t exist."
  },
  {
    "objectID": "Troubleshooting-25",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails after manually updating DynamoDB tables and GSIs from the console.",
    "depth": 4,
    "text": "Suggested Resolution:\nTo fix deployment failures due to drift in DynamoDB tables, manually rollback the state of the drifted resource to match its state in CloudFormation. Then retry amplify push."
  },
  {
    "objectID": "Troubleshooting-26",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails after manually updating DynamoDB tables and GSIs from the console.",
    "depth": 4,
    "text": "You can view the drift in the DynamoDB CloudFormation Stack per instructions in the AWS drift detection documentation"
  },
  {
    "objectID": "Troubleshooting-27",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails after manually updating DynamoDB tables and GSIs from the console.",
    "depth": 4,
    "text": "Revert every drift manually through the AWS console. In this particular scenario, re-create the GSIs and manually undo any renaming changes."
  },
  {
    "objectID": "Troubleshooting-28",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails after manually updating DynamoDB tables and GSIs from the console.",
    "depth": 4,
    "text": "Perform an amplify push."
  },
  {
    "objectID": "Troubleshooting-29",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 2: \"amplify push\" fails after unmanaged updates to non-database resources in the cloud.",
    "depth": 4,
    "text": "Assume you have an application with a GraphQL schema deployed to the cloud using Amplify CLI.\nYou then have performed one or more of the following types of changes"
  },
  {
    "objectID": "Troubleshooting-30",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 2: \"amplify push\" fails after unmanaged updates to non-database resources in the cloud.",
    "depth": 4,
    "text": "Updated your GraphQL schema using the AppSync console, or"
  },
  {
    "objectID": "Troubleshooting-31",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 2: \"amplify push\" fails after unmanaged updates to non-database resources in the cloud.",
    "depth": 4,
    "text": "Deleted user pools created by Amplify from the Cognito console, or"
  },
  {
    "objectID": "Troubleshooting-32",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 2: \"amplify push\" fails after unmanaged updates to non-database resources in the cloud.",
    "depth": 4,
    "text": "Updated the code in Lambda functions which were originally deployed through Amplify.\nThese types of unmanaged changes will introduce a drift for the affected resources. Therefore subsequent updates to these resources using Amplify will most likely fail deployment."
  },
  {
    "objectID": "Troubleshooting-33",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 2: \"amplify push\" fails after unmanaged updates to non-database resources in the cloud.",
    "depth": 4,
    "text": "Suggested Resolution:\nThese types of drifts must be addressed on a case-by-case basis. In some cases, such as a Lambda code change, forcing a redeployment of the function by making a minor change to the code will likely work.\nIn other cases, like deleting a user pool or updates to GraphQL schema from the AppSync console, follow the steps below:"
  },
  {
    "objectID": "Troubleshooting-34",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 2: \"amplify push\" fails after unmanaged updates to non-database resources in the cloud.",
    "depth": 4,
    "text": "Force a new CloudFormation stack deployment - Run amplify push --force to force push the application's resources."
  },
  {
    "objectID": "Troubleshooting-35",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 2: \"amplify push\" fails after unmanaged updates to non-database resources in the cloud.",
    "depth": 4,
    "text": "Forcible deployment of CloudFormation stack from the Console - Fetch the CloudFormation stack from the \"amplify-cfn-templates\" folder in the application’s deployment bucket and selectively update the stack through the CloudFormation console as described in (AWS CloudFormation - updating stacks documentation)[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-direct.html]."
  },
  {
    "objectID": "Troubleshooting-36",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 2: \"amplify push\" fails after unmanaged updates to non-database resources in the cloud.",
    "depth": 4,
    "text": "Apply drift changes into code - If methods above failed, the other option is to inspect the manual changes and to update them in the CLI input files.\nFor example, you could update the GraphQL schema to reflect the same changes as performed manually in the cloud and then perform amplify push."
  },
  {
    "objectID": "Troubleshooting-37",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures in a multi-account multi-environment project (CI/CD errors)",
    "depth": 3,
    "text": "Errors:"
  },
  {
    "objectID": "Troubleshooting-38",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures in a multi-account multi-environment project (CI/CD errors)",
    "depth": 3,
    "text": "\"There was an error initializing your environment.”\"!!! Build failed\"\n\"!!! Non-Zero Exit Code detected\""
  },
  {
    "objectID": "Troubleshooting-39",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures in a multi-account multi-environment project (CI/CD errors)",
    "depth": 3,
    "text": "In a multi-account project with CI/CD, you find that the application has deployed successfully in one account but has failed deployment in another account.\nThe following are some common causes:"
  },
  {
    "objectID": "Troubleshooting-40",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures in a multi-account multi-environment project (CI/CD errors)",
    "depth": 3,
    "text": "Some resource being referenced in the Amplify-generated CloudFormation is missing from the failing account."
  },
  {
    "objectID": "Troubleshooting-41",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures in a multi-account multi-environment project (CI/CD errors)",
    "depth": 3,
    "text": "The failing account is missing permissions to access a particular resource used in the CloudFormation."
  },
  {
    "objectID": "Troubleshooting-42",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures in a multi-account multi-environment project (CI/CD errors)",
    "depth": 3,
    "text": "The application code relies on “secrets” that are not correctly created or copied in the failing environment."
  },
  {
    "objectID": "Troubleshooting-43",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails in one account/environment",
    "depth": 4,
    "text": "Assume you created a project in a “dev” account and you extend your deployment environment to a full CI/CD pipeline with dev, beta, and prod environments.\nYour project likely follows a pattern specified in the Amplify CLI team environments guide.\nOn completion of all steps, you observe that the Amplify Hosting console displays the “build” step of one of your environments, such as \"beta\", as failed and shows other environments as successfully deployed."
  },
  {
    "objectID": "Troubleshooting-44",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails in one account/environment",
    "depth": 4,
    "text": "Suggested Resolution:\nUsing Amplify CLI deploy the application in the failing account. In the above case, the dev environment has successfully deployed but the beta environment has failed.\nFirst, get the App ID from your dev environment. You can find your App ID under the \"Edit backend\" section of your application's dev environment in the Amplify console.\nPerform the following steps to fetch the app from the dev environment and deploy it into the beta environment."
  },
  {
    "objectID": "Troubleshooting-45",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails in one account/environment",
    "depth": 4,
    "text": "amplify pull --appId <YOUR_APP_ID> --envName dev"
  },
  {
    "objectID": "Troubleshooting-46",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails in one account/environment",
    "depth": 4,
    "text": "amplify env checkout beta"
  },
  {
    "objectID": "Troubleshooting-47",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails in one account/environment",
    "depth": 4,
    "text": "amplify push"
  },
  {
    "objectID": "Troubleshooting-48",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails in one account/environment",
    "depth": 4,
    "text": "If amplify push fails, check the CloudFormation event logs for the failing resource to get detailed information to fix the issues in the failing environment.\nIn the AWS CloudFormation console, search for your application's stack name. For instance, if your application was named \"lil\" and deployed in your \"dev\" environment,\nAmplify would have generated a CloudFormation stack named amplify-lil-dev-{random chars}.\nIn the CloudFormation console, click on the application's stack name and then click on the \"Resources\" tab.\nThe \"Resources\" tab displays the deployment status of all the resources in the stack. It will also show the deployment error reason.\nRefer to the CloudFormation troubleshooting document to gain insight into the error messages."
  },
  {
    "objectID": "Troubleshooting-49",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: \"amplify push\" fails in one account/environment",
    "depth": 4,
    "text": "Note:\nTo debug any issues related to secrets not being correctly copied across environments, refer to Multi-environment flows section in the Access secret values documentation."
  },
  {
    "objectID": "Troubleshooting-51",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from resources exceeding AWS service quotas",
    "depth": 3,
    "text": "Errors:"
  },
  {
    "objectID": "Troubleshooting-52",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from resources exceeding AWS service quotas",
    "depth": 3,
    "text": "\"Limit on the number of resources in a single stack operation exceeded”\"Cannot exceed quota for PoliciesPerRole\""
  },
  {
    "objectID": "Troubleshooting-53",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from resources exceeding AWS service quotas",
    "depth": 3,
    "text": "AWS maintains service quotas for various AWS services. If your application contains many resources, such as large GraphQL schemas with many resolvers or many REST APIs, you may hit a service limit.\nTo identify if exceeding an AWS Service level quotas caused a deployment failure, check the AWS console for the CloudFormation deployment/failure logs."
  },
  {
    "objectID": "Troubleshooting-54",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from resources exceeding AWS service quotas",
    "depth": 3,
    "text": "Suggested Resolution:"
  },
  {
    "objectID": "Troubleshooting-55",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from resources exceeding AWS service quotas",
    "depth": 3,
    "text": "If your application's resource requirements are impaired by AWS service quotas, you can use the AWS Service Quotas console to view and request increases for most AWS quotas."
  },
  {
    "objectID": "Troubleshooting-56",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from resources exceeding AWS service quotas",
    "depth": 3,
    "text": "If you are using the Amplify DataStore, refer to Amplify DataStore Best Practices for insights into making the correct design decisions and optimize resource allocation in your application."
  },
  {
    "objectID": "Troubleshooting-57",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from resources exceeding AWS service quotas",
    "depth": 3,
    "text": "If the service quotas cannot be increased, then this may require you to redesign some aspects of your application for sustainable scaling in a serverless environment. Referring to AWS Knowledge Center may help understand the different prescribed design changes. For example, a complex GraphQL schema could be simplified to reduce the number of GraphQL resources in use e.g rewriting the schema to have less models. Using escape hatches like overrides and export may help to scale the application beyond the CLI generated architecture."
  },
  {
    "objectID": "Troubleshooting-58",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: Optimizing REST API schema for reducing policy count:",
    "depth": 4,
    "text": "Assume you have deployed a REST API using Amplify CLI with many routes and one Lambda to handle all routes.\nAmplify CLI in this case generates one policy per route and applies it to the Lambda execution role. Therefore in this configuration, the max number of allowed routes is limited by the “Max policies per role” limit in AWS IAM limits.\nThe following table shows the distribution of policies with regards to routes in such a configuration.\nNote: The term \"Resource\" represents an API Gateway resource allocated to service the \"Route\"."
  },
  {
    "objectID": "Troubleshooting-59",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: Optimizing REST API schema for reducing policy count:",
    "depth": 4,
    "text": "|Resources\t|Policies|\tRole|\tHandler|\n|-|-|-|-|\n|/items/rock|\tamplify generated policy1\t| | |\n|/items/paper| amplify generated policy2 |Lambda Execution Role | Lambda function |\n|/items/scissors|\tamplify generated policy3 || |"
  },
  {
    "objectID": "Troubleshooting-60",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: Optimizing REST API schema for reducing policy count:",
    "depth": 4,
    "text": "However, if your application has many routes, one way to reduce the number of policies generated is by creating a single route resource and to support additional paths as query parameters:\n/items?item=rock, /items?item=paper, /items?item=scissors\nIn this case the Amplify CLI creates only 1 policy for the /items resource."
  },
  {
    "objectID": "Troubleshooting-61",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: Optimizing REST API schema for reducing policy count:",
    "depth": 4,
    "text": "|Resources\t|Policies|\tRole|\tHandler|\n|-|-|-|-|\n|/items| amplify generated policy1\t| Lambda Execution Role | Lambda function |"
  },
  {
    "objectID": "Troubleshooting-62",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from GraphQL schema syntax errors",
    "depth": 3,
    "text": "Errors:"
  },
  {
    "objectID": "Troubleshooting-63",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from GraphQL schema syntax errors",
    "depth": 3,
    "text": "“Schema validation failed”, “Unknown directive\""
  },
  {
    "objectID": "Troubleshooting-64",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Push failures from GraphQL schema syntax errors",
    "depth": 3,
    "text": "After making any GraphQL schema changes, run amplify api gql-compile to ensure that the schema is valid and Amplify is able to generate correct CloudFormation templates from the GraphQL schema. Refer to the Amplify CLI GraphQL documentation to understand the latest Amplify GraphQL directives."
  },
  {
    "objectID": "Troubleshooting-65",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: GraphQL Schema errors",
    "depth": 4,
    "text": "Assume your GraphQL schema has an error where the directive \"@model\" is misspelled as \"@mode\":"
  },
  {
    "objectID": "Troubleshooting-66",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Scenario 1: GraphQL Schema errors",
    "depth": 4,
    "text": "When running amplify api gql-compile the transform step will fail with an invalid directive error."
  },
  {
    "objectID": "Troubleshooting-68",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting other GraphQL schema related errors",
    "depth": 3,
    "text": "If amplify push fails while deploying any of the scenarios below, refer to the Amplify GraphQL Troubleshooting Guide."
  },
  {
    "objectID": "Troubleshooting-69",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting other GraphQL schema related errors",
    "depth": 3,
    "text": "Deploying multiple index changes in a single amplify push"
  },
  {
    "objectID": "Troubleshooting-70",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting other GraphQL schema related errors",
    "depth": 3,
    "text": "Backfill OpenSearch index from DynamoDB table"
  },
  {
    "objectID": "Troubleshooting-71",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Troubleshooting other GraphQL schema related errors",
    "depth": 3,
    "text": "Index with Multi-Sort Key Fields"
  },
  {
    "objectID": "Troubleshooting-72",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Deployment Best Practices",
    "depth": 2,
    "text": "This section describes the various best practices which help developers avoid deployment errors and scaling problems in their Amplify applications."
  },
  {
    "objectID": "Troubleshooting-73",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Overriding Amplify CLI default behavior",
    "depth": 3,
    "text": "Any changes to your application must be performed only through the Amplify CLI and the associated configuration files or through Amplify Studio. Never manually edit any resources directly from the AWS console or using the AWS CLI/SDK, unless explicitly noted. To override the Amplify-generated resources beyond the customizations available within an Amplify CLI command, you must follow the instructions in the Amplify extensibility documentation which details all the “escape hatches” available in the Amplify CLI."
  },
  {
    "objectID": "Troubleshooting-74",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Understanding the impact of changing model names in the GraphQL Schema",
    "depth": 3,
    "text": "Errors:"
  },
  {
    "objectID": "Troubleshooting-75",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Understanding the impact of changing model names in the GraphQL Schema",
    "depth": 3,
    "text": "“An error occurred during the push operation: Removing a model from the GraphQL schema will also remove the underlying DynamoDB table”\n“ALL EXISTING DATA IN THESE TABLES WILL BE LOST!”"
  },
  {
    "objectID": "Troubleshooting-76",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Understanding the impact of changing model names in the GraphQL Schema",
    "depth": 3,
    "text": "Amplify automatically creates DynamoDB database tables for GraphQL types annotated with the @model directive in your GraphQL schema.\nTherefore if you rename models in the GraphQL Schema, to protect the application data from accidental deletion, the Amplify CLI will block subsequent amplify push operations and prompt you to explicitly pass the --allow-destructive-graphql-schema-updates flag.\nThis flag grants Amplify CLI the ability to make destructive database changes, such as deleting the DynamoDB tables for the original model names and create new tables with the new model names specified in the schema.\nAmplify currently doesn't support automatic data migration. If the data in the original tables is required, then you will need to backup the DynamoDB tables and migrate the data after the destructive deployment of the new tables."
  },
  {
    "objectID": "Troubleshooting-78",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Migration from GraphQL transformer V1 to V2",
    "depth": 3,
    "text": "If you have previously deployed an application using GraphQL transformer V1 and have decided to migrate to GraphQL transformer V2, go through the GraphQL transformer migration documentation to understand the impact of the migration on the schema directives and limitations prior to updating.\nYou can confirm the version of the GraphQL transformer using the amplify status command. You can also inspect the transformerversion feature flag in ${project-root}/amplify/cli.json, to confirm."
  },
  {
    "objectID": "Troubleshooting-79",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Local testing",
    "depth": 3,
    "text": "Test schema changes and business logic as much as you can prior to deployment. The amplify mock command allows validation of your cloud dependencies locally. Follow the mock testing examples in Advanced workflows documentation to dive deeper."
  },
  {
    "objectID": "Troubleshooting-80",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Further reading",
    "depth": 2,
    "text": "|Amplify CLI troubleshooting Guides|Description|\n|-|-|\n|Amplify CLI GraphQL troubleshooting| Troubleshoot and fix issues encountered when deploying GraphQL Schema through Amplify CLI|\n|Amplify Console custom domain troubleshooting|Troubleshoot and fix issues encountered when adding Custom Domains to your Apps from the Amplify Console |\n|IAM troubleshooting|Troubleshoot and fix common issues encountered when working with Amplify and IAM.|\n|Amplify CLI extensibility | Learn about the different escape hatches provided by the Amplify CLI to extend your application and override default behavior |\n|Amplify DataStore best practices | Learn the best practices to build your applications 'Offline First' using Amplify DataStore |\n|AWS knowledge center | Learn about the most frequent questions and requests for your AWS services |\n|AWS CloudFormation drift | Detect and View CloudFormation Drift |"
  },
  {
    "objectID": "Troubleshooting-81",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Contacting support",
    "depth": 2,
    "text": "Search for similar issues or open new issues on Github"
  },
  {
    "objectID": "Troubleshooting-82",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Contacting support",
    "depth": 2,
    "text": "amplify-cli issues"
  },
  {
    "objectID": "Troubleshooting-83",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Contacting support",
    "depth": 2,
    "text": "amplify-codegen issues"
  },
  {
    "objectID": "Troubleshooting-84",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Contacting support",
    "depth": 2,
    "text": "amplify-console issues"
  },
  {
    "objectID": "Troubleshooting-85",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Contacting support",
    "depth": 2,
    "text": "Connect with AWS Enterprise support"
  },
  {
    "objectID": "Troubleshooting-86",
    "title": "Troubleshooting",
    "description": "Information to troubleshoot common Amplify CLI project errors.",
    "slug": "/cli/project/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Contacting support",
    "depth": 2,
    "text": "Join our community Discord Channel"
  },
  {
    "objectID": "Override Amplify-generated project-level IAM resources-0",
    "title": "Override Amplify-generated project-level IAM resources",
    "description": "The \"amplify override project\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated IAM roles for authenticated and unauthenticated as CDK constructs. For example, developers can run \"amplify override project\" to change the authenticated and unauthenticated IAM role names to comply with organization-specific naming conventions.",
    "slug": "/cli/project/override",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run the command above to override Amplify-generated project-level resources, such as IAM roles for authenticated and unauthenticated."
  },
  {
    "objectID": "Override Amplify-generated project-level IAM resources-1",
    "title": "Override Amplify-generated project-level IAM resources",
    "description": "The \"amplify override project\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated IAM roles for authenticated and unauthenticated as CDK constructs. For example, developers can run \"amplify override project\" to change the authenticated and unauthenticated IAM role names to comply with organization-specific naming conventions.",
    "slug": "/cli/project/override",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Warning: Due to the deep dependencies on the authenticated and unauthenticated user roles, it is recommended to ONLY modify these resources at the beginning of your project, when no other resources are added yet."
  },
  {
    "objectID": "Override Amplify-generated project-level IAM resources-2",
    "title": "Override Amplify-generated project-level IAM resources",
    "description": "The \"amplify override project\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated IAM roles for authenticated and unauthenticated as CDK constructs. For example, developers can run \"amplify override project\" to change the authenticated and unauthenticated IAM role names to comply with organization-specific naming conventions.",
    "slug": "/cli/project/override",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The command creates a new overrides.ts file under amplify/backend/awscloudformation/ which provides you the Amplify-generated resources as CDK constructs."
  },
  {
    "objectID": "Override Amplify-generated project-level IAM resources-3",
    "title": "Override Amplify-generated project-level IAM resources",
    "description": "The \"amplify override project\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated IAM roles for authenticated and unauthenticated as CDK constructs. For example, developers can run \"amplify override project\" to change the authenticated and unauthenticated IAM role names to comply with organization-specific naming conventions.",
    "slug": "/cli/project/override",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Apply all the overrides in the override(...) function. For example to rename and add a path for authenticated users' IAM role:"
  },
  {
    "objectID": "Override Amplify-generated project-level IAM resources-4",
    "title": "Override Amplify-generated project-level IAM resources",
    "description": "The \"amplify override project\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated IAM roles for authenticated and unauthenticated as CDK constructs. For example, developers can run \"amplify override project\" to change the authenticated and unauthenticated IAM role names to comply with organization-specific naming conventions.",
    "slug": "/cli/project/override",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can override the following project-level resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated project-level IAM resources-5",
    "title": "Override Amplify-generated project-level IAM resources",
    "description": "The \"amplify override project\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated IAM roles for authenticated and unauthenticated as CDK constructs. For example, developers can run \"amplify override project\" to change the authenticated and unauthenticated IAM role names to comply with organization-specific naming conventions.",
    "slug": "/cli/project/override",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "|Amplify-generated resource|Description|\n|-|-|\n|authRole|The IAM role for authenticated access to your app backend|\n|unauthRole|The IAM role for authenticated or guest access to your app backend|"
  },
  {
    "objectID": "Override Amplify-generated project-level IAM resources-6",
    "title": "Override Amplify-generated project-level IAM resources",
    "description": "The \"amplify override project\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated IAM roles for authenticated and unauthenticated as CDK constructs. For example, developers can run \"amplify override project\" to change the authenticated and unauthenticated IAM role names to comply with organization-specific naming conventions.",
    "slug": "/cli/project/override",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Example: Modify authRole's IAM policies",
    "depth": 2,
    "text": "For example, use amplify override project to further modify the authRole policy for Geo category beyond the default policy statements:"
  },
  {
    "objectID": "Monorepo project structure-0",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For a monorepo setup, it is recommended to have the Amplify CLI initialize a new backend at the root of one of your frontend projects. In a different frontend directory, you can run amplify pull and select the Amplify app you want to associate your frontend with."
  },
  {
    "objectID": "Monorepo project structure-1",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "In this guide, you will learn the recommended Amplify project setup for monorepo."
  },
  {
    "objectID": "Monorepo project structure-2",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 1: Set up your monorepo project",
    "depth": 3,
    "text": "To get started, have a monorepo setup with a couple of frontends. For our example, we'll have a monorepo setup with a React and an Angular app."
  },
  {
    "objectID": "Monorepo project structure-3",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 1: Set up your monorepo project",
    "depth": 3,
    "text": "This project contains the frontend code for an angular and react Todo app. The repository has the following structure:"
  },
  {
    "objectID": "Monorepo project structure-4",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 2: Set up the Amplify backend",
    "depth": 3,
    "text": "To set up a backend on AWS, we are going to use the Amplify CLI. The Amplify CLI is a command-line toolchain that simplifies provisioning AWS services."
  },
  {
    "objectID": "Monorepo project structure-5",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 2: Set up the Amplify backend",
    "depth": 3,
    "text": "First, configure the CLI on your machine. Once configured, initialize a new backend project at the root of one of your frontend projects. While we could also initialize the project at the root level, the Amplify is best used attached to one of your projects. This allows you to set up continuous deployment pipelines of the frontend and backend together."
  },
  {
    "objectID": "Monorepo project structure-6",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 2: Set up the Amplify backend",
    "depth": 3,
    "text": "Add api and database"
  },
  {
    "objectID": "Monorepo project structure-7",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 2: Set up the Amplify backend",
    "depth": 3,
    "text": "Deploy to cloud"
  },
  {
    "objectID": "Monorepo project structure-8",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 3a: Integrate backend with React app",
    "depth": 3,
    "text": "Test the React app locally. Create a new to-do.."
  },
  {
    "objectID": "Monorepo project structure-9",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 3a: Integrate backend with React app",
    "depth": 3,
    "text": "To verify the Todos got created, run amplify console. This will open up your backend env in the Amplify Console. Choose the API tab and under Data Sources click View on the Todotable. You should see the to-do record you just created."
  },
  {
    "objectID": "Monorepo project structure-10",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 3b: Integrate backend with Angular app",
    "depth": 3,
    "text": "Now pivot to the Angular app."
  },
  {
    "objectID": "Monorepo project structure-11",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 3b: Integrate backend with Angular app",
    "depth": 3,
    "text": "Let's reference the same backend in the Angular app. In order to do so, run the following commands"
  },
  {
    "objectID": "Monorepo project structure-12",
    "title": "Monorepo project structure",
    "description": "Learn how to set up monorepo workflows with Amplify CLI",
    "slug": "/cli/project/monorepo",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Step 3b: Integrate backend with Angular app",
    "depth": 3,
    "text": "Generate client-side code for your other frontend"
  },
  {
    "objectID": "Command Hooks-0",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Use Command Hooks to execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more). This allows you to extend Amplify’s best-practice defaults to meet your organization’s specific security guidelines and operational requirements."
  },
  {
    "objectID": "Command Hooks-1",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a command hook",
    "depth": 2,
    "text": "Place your custom scripts in the amplify/hooks directory and set the script file name to the desired command with a pre or post designation. For example post-add-function.js will execute the script after amplify add function. For more information about the script naming convention, see How to name command hook scripts."
  },
  {
    "objectID": "Command Hooks-2",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a command hook",
    "depth": 2,
    "text": "For this example, let's create a hook to ensure that a minimum major Amplify CLI version is used before deployment (amplify push)."
  },
  {
    "objectID": "Command Hooks-3",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a command hook",
    "depth": 2,
    "text": "Let's add pre-push.js in the amplify/hooks directory with the following contents. Note: You need to create a amplify/hooks folder if your Amplify project was created prior to Amplify CLI version 5.5.0"
  },
  {
    "objectID": "Command Hooks-4",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a command hook",
    "depth": 2,
    "text": "Next, let's run amplify push:"
  },
  {
    "objectID": "Command Hooks-5",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to name command hook scripts",
    "depth": 2,
    "text": "To hook into a command, the script file in the amplify/hooks directory should be named with the following naming convention:"
  },
  {
    "objectID": "Command Hooks-6",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to name command hook scripts",
    "depth": 2,
    "text": "pre|post-<command>[-<sub-command>].extension"
  },
  {
    "objectID": "Command Hooks-7",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to name command hook scripts",
    "depth": 2,
    "text": "command (required) - Amplify command."
  },
  {
    "objectID": "Command Hooks-8",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to name command hook scripts",
    "depth": 2,
    "text": "extension (required) - by default .js and .sh are mapped to Node.js and Bash. To support more extensions or scripting runtimes, see Adding a custom scripting runtime."
  },
  {
    "objectID": "Command Hooks-9",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to name command hook scripts",
    "depth": 2,
    "text": "sub-command (optional) - Amplify sub-command. Can be used to increase hook specificity. Example: pre-add-auth and pre-mock-api."
  },
  {
    "objectID": "Command Hooks-10",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to name command hook scripts",
    "depth": 2,
    "text": "The following is an exhaustive list of all commands along with their subcommands that are supported by Amplify CLI:"
  },
  {
    "objectID": "Command Hooks-11",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to name command hook scripts",
    "depth": 2,
    "text": "commands                | sub-commands (optional)\n------------------------|------------------------\nadd                     |all categories (api, auth, etc.)codegenenv\nupdate                  |all categories (api, auth, etc.)env\nremove                  |all categories (api, auth, etc.)env\npush                    |analytics, api, auth, function, hosting, interactions, storage, xr\npull                    |env\npublish                 |-\ndelete                  |-\ncheckout                |env\nlist                    |env\nget                     |env\nmock                    |api, storage, function\nbuild                   |function\nstatus                  |notifications\nimport                  |auth, storage, env\ngqlcompile              |api\naddgraphqldatasource    |api\nstatements              |codegen\ntypes                  |codegen"
  },
  {
    "objectID": "Command Hooks-12",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to name command hook scripts",
    "depth": 2,
    "text": "Note: Multiple hook scripts with the same filename are not allowed"
  },
  {
    "objectID": "Command Hooks-13",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Access parameters in hook scripts",
    "depth": 2,
    "text": "Command hooks receive two parameters, data and error. Amplify CLI passes parameters to hook scripts as a JSON string through standard input."
  },
  {
    "objectID": "Command Hooks-14",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "amplify"
  },
  {
    "objectID": "Command Hooks-15",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "version - current Amplify CLI version"
  },
  {
    "objectID": "Command Hooks-16",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "environment - current Amplify environment"
  },
  {
    "objectID": "Command Hooks-17",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "envName - current Amplify environment name"
  },
  {
    "objectID": "Command Hooks-18",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "projectPath - path to current Amplify project"
  },
  {
    "objectID": "Command Hooks-19",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "defaultEditor - chosen editor in init step. Example vscode"
  },
  {
    "objectID": "Command Hooks-20",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "command - hooked Amplify CLI command. Example: push"
  },
  {
    "objectID": "Command Hooks-21",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "subCommand - hooked Amplify CLI subcommand or plugin. Example auth, env."
  },
  {
    "objectID": "Command Hooks-22",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "data parameter structure",
    "depth": 3,
    "text": "argv - list containing the arguments passed to Amplify CLI through the command line"
  },
  {
    "objectID": "Command Hooks-23",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "error parameter structure",
    "depth": 3,
    "text": "error is undefined if no error is emitted. Otherwise, it has the following structure:"
  },
  {
    "objectID": "Command Hooks-24",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "error parameter structure",
    "depth": 3,
    "text": "message - the error message emitted by Amplify CLI"
  },
  {
    "objectID": "Command Hooks-25",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "error parameter structure",
    "depth": 3,
    "text": "stack - the error stack emitted by Amplify CLI"
  },
  {
    "objectID": "Command Hooks-26",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to access command hook parameters in Bash",
    "depth": 3,
    "text": "First, install a JSON parser like jq."
  },
  {
    "objectID": "Command Hooks-27",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to access command hook parameters in Bash",
    "depth": 3,
    "text": "Then, parse the parameters:"
  },
  {
    "objectID": "Command Hooks-28",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "How to conditionally stop an Amplify CLI command execution",
    "depth": 2,
    "text": "To stop the execution of Amplify CLI, the hook scripts can exit with a non-zero exit code."
  },
  {
    "objectID": "Command Hooks-29",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Advanced command hook configurations",
    "depth": 2,
    "text": "You can optionally add hooks-config.json in amplify/hooks to configure custom scripting runtimes or manage external dependencies."
  },
  {
    "objectID": "Command Hooks-30",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a custom scripting runtime",
    "depth": 3,
    "text": "By default, Node.js and Bash are supported. To support additional runtimes, add extensions to the hooks-config.json file in the amplify/hooks folder."
  },
  {
    "objectID": "Command Hooks-31",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a custom scripting runtime",
    "depth": 3,
    "text": "An example showcasing python runtime support and different runtime settings based on operating system:"
  },
  {
    "objectID": "Command Hooks-32",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a custom scripting runtime",
    "depth": 3,
    "text": "The keys in the extensions ( js, py ) are values that will be used as extension in the naming convention used when naming the hook scripts."
  },
  {
    "objectID": "Command Hooks-33",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a custom scripting runtime",
    "depth": 3,
    "text": "runtime (required) - symlink (node, python, bash) or path to executable (~/.nvm/versions/node/v14.17.1/bin/node)."
  },
  {
    "objectID": "Command Hooks-34",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding a custom scripting runtime",
    "depth": 3,
    "text": "runtime_windows (optional) - windows specific symlink or path to executable."
  },
  {
    "objectID": "Command Hooks-35",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Managing third-party dependencies",
    "depth": 3,
    "text": "Packages from external package managers like npm can be used in command hooks scripts. In this example, we'll showcase how to install axios as a dependency for our Node.js hooks."
  },
  {
    "objectID": "Command Hooks-36",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Managing third-party dependencies",
    "depth": 3,
    "text": "First, go to the hooks folder and install the axios dependency."
  },
  {
    "objectID": "Command Hooks-37",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Managing third-party dependencies",
    "depth": 3,
    "text": "Note: If you use command hooks with Amplify Hosting CI/CD pipelines, you also need to have a preBuild step configured to install the hook dependencies:"
  },
  {
    "objectID": "Command Hooks-38",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Managing third-party dependencies",
    "depth": 3,
    "text": "Dependency directories and files, such as node_modules, should be added to ignore in hooks-config.json."
  },
  {
    "objectID": "Command Hooks-39",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Managing third-party dependencies",
    "depth": 3,
    "text": "Note: All entries in ignore should follow the .gitignore specification."
  },
  {
    "objectID": "Command Hooks-40",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Managing third-party dependencies",
    "depth": 3,
    "text": "You can now use axios in your hook scripts placed in the amplify/hooks directory."
  },
  {
    "objectID": "Command Hooks-41",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using command hooks in Amplify's CI/CD pipeline",
    "depth": 2,
    "text": "Command hooks are executed when CI/CD builds are triggered on Amplify Console. To execute hook scripts in the Amplify Console, add the hook scripts to the amplify/hooks directory and run amplify push locally to upload the hooks."
  },
  {
    "objectID": "Command Hooks-42",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using command hooks in Amplify's CI/CD pipeline",
    "depth": 2,
    "text": "By default only pre-push and post-push hooks will be executed on builds in Amplify Console."
  },
  {
    "objectID": "Command Hooks-43",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using command hooks in Amplify's CI/CD pipeline",
    "depth": 2,
    "text": "To use scripting runtimes other than Node.js and Bash, see Adding a custom scripting runtime and also update the Build Settings in Amplify Console to include the runtime executable."
  },
  {
    "objectID": "Command Hooks-44",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using command hooks in Amplify's CI/CD pipeline",
    "depth": 2,
    "text": "In this example, we'll add a python hook script running in the Amplify Console's CI/CD pipeline:"
  },
  {
    "objectID": "Command Hooks-45",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using command hooks in Amplify's CI/CD pipeline",
    "depth": 2,
    "text": "Add the python hook script along with hooks-config.json to the hooks directory."
  },
  {
    "objectID": "Command Hooks-46",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using command hooks in Amplify's CI/CD pipeline",
    "depth": 2,
    "text": "Add python3 to hooks-config.json and run amplify push to upload the command hooks."
  },
  {
    "objectID": "Command Hooks-47",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using command hooks in Amplify's CI/CD pipeline",
    "depth": 2,
    "text": "Navigate to your app in the Amplify Console and select App settings > Build settings to update the preBuild phase to install python."
  },
  {
    "objectID": "Command Hooks-48",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using command hooks in Amplify's CI/CD pipeline",
    "depth": 2,
    "text": "You’re all set! The python command hooks will be executed in new CI/CD builds."
  },
  {
    "objectID": "Command Hooks-49",
    "title": "Command Hooks",
    "description": "Execute custom scripts before, during, and after Amplify CLI commands (“amplify push”, “amplify api gql-compile”, and more).",
    "slug": "/cli/project/command-hooks",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Command hook limitations with Amplify Studio",
    "depth": 2,
    "text": "Command Hooks are not executed when updating a backend via Amplify Studio."
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-0",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To set the maximum permissions that can be granted to IAM Roles created by Amplify CLI, configure a Permissions Boundary for the project. Then, Amplify-generated IAM roles can perform only the actions that are allowed by both the roles’ policies and Permissions Boundary. You can configure a different Permissions Boundary for each environment. For example, this enables you to deny a dev environment all access to a prod environment's resources."
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-1",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The IAM Permissions Boundary will apply to all IAM Roles created by Amplify. This includes the \"auth role\" assumed by users that log into the app and the \"unauth role\" assumed by guest users. It also applies to Lambda execution roles, Cognito user group roles, and any role configured in a custom resource stack."
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-2",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The IAM Policy, to be used as a Permissions Boundary, must be configured outside of Amplify CLI. A Permissions Boundary is an IAM Policy and can be created following the guide here. This is usually part of an AWS Organization rule or other corporate governance requirement. Once you have created an IAM Policy to use as a Permissions Boundary, copy the IAM Policy ARN for the next steps."
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-3",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Set up a Permissions Boundary in a new project",
    "depth": 2,
    "text": "To initialize a project with a Permissions Boundary run:"
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-4",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Set up a Permissions Boundary in a new environment",
    "depth": 2,
    "text": "When creating a new Amplify environment using amplify env add the Permissions Boundary from the current environment is automatically applied to the new environment."
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-5",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Set up a Permissions Boundary in a new environment",
    "depth": 2,
    "text": "To specify a different Permissions Boundary for the new environment, run:"
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-6",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Set up a Permissions Boundary in a new environment",
    "depth": 2,
    "text": "To explicitly specify that the new environment should NOT have a Permissions Boundary, run:"
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-7",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Set up a Permissions Boundary in a new environment",
    "depth": 2,
    "text": "If Amplify CLI is not able to automatically apply the Permissions Boundary to the new environment and --permissions-boundary is not specified, it will prompt for a IAM Policy ARN as a Permissions Boundary."
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-8",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Update an environment's Permissions Boundary",
    "depth": 2,
    "text": "To modify the Permissions Boundary of the current environment, run:"
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-9",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Update an environment's Permissions Boundary",
    "depth": 2,
    "text": "In non-interactive shells use"
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-10",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Update an environment's Permissions Boundary",
    "depth": 2,
    "text": "The IAM Permissions Boundary will be applied on the next amplify push."
  },
  {
    "objectID": "IAM Permissions Boundary for Amplify-generated roles-11",
    "title": "IAM Permissions Boundary for Amplify-generated roles",
    "description": "Apply a Permissions Boundary to all IAM Roles created by Amplify CLI.",
    "slug": "/cli/project/permissions-boundary",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Set up a Permissions Boundary in a cross-account Amplify project",
    "depth": 2,
    "text": "Amplify CLI cannot automatically apply the existing boundary to a new environment in a different AWS account if the --yes flag is used during amplify env add. In this case, a new Permissions Boundary must be specified using amplify env add --yes --permissions-boundary <IAM Policy ARN> or to explicitly remove the Permissions Boundary from the new environment use amplify env add --yes --permissions-boundary ''."
  },
  {
    "objectID": "Apply tags to generated resources-0",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Tags are labels consisting of key-value pairs that make it easier to manage, search for, and filter resources. Some popular use cases include:"
  },
  {
    "objectID": "Apply tags to generated resources-1",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Resource organization"
  },
  {
    "objectID": "Apply tags to generated resources-2",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Cost allocation"
  },
  {
    "objectID": "Apply tags to generated resources-3",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Operations support"
  },
  {
    "objectID": "Apply tags to generated resources-4",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Access control"
  },
  {
    "objectID": "Apply tags to generated resources-5",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Security risk management"
  },
  {
    "objectID": "Apply tags to generated resources-6",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can learn more about how tags work here, as well as read about best practices for tagging here."
  },
  {
    "objectID": "Apply tags to generated resources-7",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Setting up tags in a new project",
    "depth": 2,
    "text": "When running amplify init, a tags.json file is automatically generated in the amplify/backend/ directory, containing predefined tags."
  },
  {
    "objectID": "Apply tags to generated resources-8",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Setting up tags in a new project",
    "depth": 2,
    "text": "The structure of the file is the following:"
  },
  {
    "objectID": "Apply tags to generated resources-9",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Setting up tags in a new project",
    "depth": 2,
    "text": "Note: For projects created before CLI version 4.28.0. Creating a tags.json file under amplify/backend/ directory with the desired tags will ensure tags being applied to existing resources after invoking amplify push."
  },
  {
    "objectID": "Apply tags to generated resources-10",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Setting up tags in a new project",
    "depth": 2,
    "text": "The tag configuration file is created, when you run \"amplify init\" and the initial Amplify project resources are deployed. You can optionally also pre-create the amplify/backend/tags.json configuration file before \"amplify init\". This allows you to tag the initial Amplify project resources with your designated tags as well."
  },
  {
    "objectID": "Apply tags to generated resources-11",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using predefined variables",
    "depth": 2,
    "text": "There are predefined tags that let you be more specific with information about the current project, while giving you the opportunity of structuring the tags according to what feels right to you."
  },
  {
    "objectID": "Apply tags to generated resources-12",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using predefined variables",
    "depth": 2,
    "text": "The 2 predefined tags are the following:"
  },
  {
    "objectID": "Apply tags to generated resources-13",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using predefined variables",
    "depth": 2,
    "text": " - Refers to the project environment (e.g., prod, env, etc)"
  },
  {
    "objectID": "Apply tags to generated resources-14",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using predefined variables",
    "depth": 2,
    "text": " - Refers to the current project name (e.g., mytestproject)"
  },
  {
    "objectID": "Apply tags to generated resources-15",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using predefined variables",
    "depth": 2,
    "text": "There are many different cases in which these tag variables can be used. This is an example of how they can be used together and what the output would be:"
  },
  {
    "objectID": "Apply tags to generated resources-16",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using predefined variables",
    "depth": 2,
    "text": "When getting pushed, the resources would transform into:"
  },
  {
    "objectID": "Apply tags to generated resources-17",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Using predefined variables",
    "depth": 2,
    "text": "Tag values are not required, thus they can be empty."
  },
  {
    "objectID": "Apply tags to generated resources-18",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding and updating tags",
    "depth": 2,
    "text": "You can update or add any additional tags in the tags.json file inside the amplify/backend/ folder by editing the file itself. The file must in a JSON format and should follow this structure:"
  },
  {
    "objectID": "Apply tags to generated resources-19",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Adding and updating tags",
    "depth": 2,
    "text": "To update the AWS resources from your Amplify project just run amplify push."
  },
  {
    "objectID": "Apply tags to generated resources-20",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Restrictions",
    "depth": 2,
    "text": "You can only add up to 50 tags to the amplify/backend/tags.json file."
  },
  {
    "objectID": "Apply tags to generated resources-21",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Restrictions",
    "depth": 2,
    "text": "Tag keys and values are case sensitive."
  },
  {
    "objectID": "Apply tags to generated resources-22",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Restrictions",
    "depth": 2,
    "text": "Duplicate tag keys are not allowed."
  },
  {
    "objectID": "Apply tags to generated resources-23",
    "title": "Apply tags to generated resources",
    "description": "Learn how to stay organized with your Amplify-generated AWS resources by tagging them through the CLI",
    "slug": "/cli/project/tags",
    "category": "Amplify CLI",
    "subcategory": "Project-level configurations",
    "type": "article",
    "heading": "Restrictions",
    "depth": 2,
    "text": "For more information on limits and restrictions with tagging conventions, please visit this link."
  },
  {
    "objectID": "Use CloudFormation to add custom AWS resources-0",
    "title": "Use CloudFormation to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the `amplify add custom` command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cloudformation",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the amplify add custom command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources."
  },
  {
    "objectID": "Use CloudFormation to add custom AWS resources-1",
    "title": "Use CloudFormation to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the `amplify add custom` command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cloudformation",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To add custom AWS resources using AWS CloudFormation, run the following command:"
  },
  {
    "objectID": "Use CloudFormation to add custom AWS resources-2",
    "title": "Use CloudFormation to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the `amplify add custom` command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cloudformation",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "A skeleton CloudFormation template is generated in the amplify/backend/custom/<resource-name> directory. The additional AWS resources can be defined in the <resource-name>-cloudformation-template.json CloudFormation template file."
  },
  {
    "objectID": "Use CloudFormation to add custom AWS resources-3",
    "title": "Use CloudFormation to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the `amplify add custom` command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cloudformation",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: Always append the Amplify environment name (env parameter) to a resource name to ensure correct behavior with Amplify's multi-environment workflows."
  },
  {
    "objectID": "Use CloudFormation to add custom AWS resources-4",
    "title": "Use CloudFormation to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the `amplify add custom` command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cloudformation",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify backend name",
    "depth": 2,
    "text": "Amplify CLI will automatically populate the env parameter in the top of your CloudFormation template."
  },
  {
    "objectID": "Use CloudFormation to add custom AWS resources-5",
    "title": "Use CloudFormation to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the `amplify add custom` command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cloudformation",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify backend name",
    "depth": 2,
    "text": "To reference the parameter use the Ref intrinsic function:"
  },
  {
    "objectID": "Use CloudFormation to add custom AWS resources-6",
    "title": "Use CloudFormation to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the `amplify add custom` command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cloudformation",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify-generated resources",
    "depth": 2,
    "text": "The CloudFormation template for custom AWS resources can reference Amplify-generated resources' CloudFormation outputs. To reference another resource's output, run:"
  },
  {
    "objectID": "Use CloudFormation to add custom AWS resources-7",
    "title": "Use CloudFormation to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS CloudFormation. Running the `amplify add custom` command in your Amplify project provides CloudFormation starter templates along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cloudformation",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify-generated resources",
    "depth": 2,
    "text": "Once the resources are selected, you can reference the resources' output listed as parameters on the top of your CloudFormation template. To reference the parameter use the Ref intrinsic function:"
  },
  {
    "objectID": "Use CDK to add custom AWS resources-0",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the amplify add custom command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-1",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The AWS Cloud Development Kit (AWS CDK) is an open source software development framework to define your cloud application resources using familiar programming languages, such as Typescript."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-2",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "A skeleton CDK stack is generated in the amplify/backend/custom/<resource-name> directory. Edit the cdk-stack.ts file to define the additional AWS resources. Add additional CDK constructs using the package.json. Run amplify build to download all NPM dependencies for this custom resource and synthesize the CDK stack."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-3",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The following example creates an SNS topic whose notification messages are forwarded via email:"
  },
  {
    "objectID": "Use CDK to add custom AWS resources-4",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: Always append the Amplify environment name to a resource name to ensure correct behavior with Amplify's multi-environment workflows."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-5",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "When creating custom resources using Amplify CLI, the CLI may require additional permissions outside the Amplify managed policy, AdministratorAccess-Amplify.\nPlease refer to the Amplify IAM Policy documentation for additional information regarding the necessary permissions for Amplify CLI and for more information on providing additional permissions to your Amplify CLI IAM user refer to AWS IAM User documentation."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-6",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify project and environment name",
    "depth": 2,
    "text": "Amplify provides you helper functions to get Amplify project information such as the project name and the current Amplify environment name."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-7",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify project name",
    "depth": 3,
    "text": "Use the AmplifyHelpers.getProjectInfo() function to retrieve the project name:"
  },
  {
    "objectID": "Use CDK to add custom AWS resources-8",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "There are two access patterns for the environment for two different use cases. Using the right access mechanism for the right use case is critical to ensure multi-environment workflows function properly."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-9",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "If you want to use the environment name as a variable for a resource, use cdk.Fn.ref('env'):"
  },
  {
    "objectID": "Use CDK to add custom AWS resources-10",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "If you want to apply conditional logic based on the current environment name, use AmplifyHelpers.projectInfo():"
  },
  {
    "objectID": "Use CDK to add custom AWS resources-11",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify-generated resources",
    "depth": 2,
    "text": "The CDK stack for custom AWS resources can reference Amplify-generated resources' CloudFormation outputs. To reference another resource, first add the resource as a dependency."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-12",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify-generated resources",
    "depth": 2,
    "text": "Then use the cdk.Fn.ref function to create a dynamic reference of the dependencies' outputs."
  },
  {
    "objectID": "Use CDK to add custom AWS resources-13",
    "title": "Use CDK to add custom AWS resources",
    "description": "The Amplify CLI provides the ability to add custom AWS resources with AWS Cloud Development Kit (CDK). Running the `amplify add custom` command in your Amplify project provides CDK starter stacks along with mechanisms to reference other Amplify-generated resources.",
    "slug": "/cli/custom/cdk",
    "category": "Amplify CLI",
    "subcategory": "Custom AWS resources",
    "type": "article",
    "heading": "Reference Amplify-generated resources",
    "depth": 2,
    "text": "The dependencies variable has the auto-generated AmplifyDependentResourcesAttributes type which includes all Amplify-generated resource output. Run amplify build to regenerate AmplifyDependentResourcesAttributes if you don't see your category, resource, or parameters."
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys. For more control with setting up a CDN and hosting buckets, use CloudFront and S3."
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Workflow",
    "depth": 2,
    "text": "amplify add hosting\nThis adds the hosting resources to the backend. The command will first prompt for environment selection, either DEV or PROD. Upon completion, the CloudFormation template for the resources is placed in the amplify/backend/hosting directory. "
  },
  {
    "objectID": "Overview-2",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Workflow",
    "depth": 2,
    "text": "amplify configure hosting\nThis command walks through the steps to configure the different sections of the resources used in hosting, including S3, CloudFront, and publish ignore. See below for more details."
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Workflow",
    "depth": 2,
    "text": "amplify publish\nThe amplify publish command is designed to build and publish both the backend and the frontend of the project. In the current implementation, the frontend publish functionality is only available for a JavaScript project for static web hosting."
  },
  {
    "objectID": "Overview-4",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Workflow",
    "depth": 2,
    "text": "amplify remove hosting\nThis removes the hosting resources locally from the backend. On your next amplify push the provisioned hosting resources will get removed from the cloud. "
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Using AWS Amplify Console",
    "depth": 2,
    "text": "The AWS Amplify Console is a continuous deployment and hosting service for Amplify web apps. Learn more."
  },
  {
    "objectID": "Overview-6",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Using AWS Amplify Console",
    "depth": 2,
    "text": "The AWS Amplify Console provides a Git-based workflow for building, deploying, and hosting your Amplify web app — both the frontend and backend — from source control. Once you connect a feature branch, all code commits are automatically deployed to an amplifyapp.com subdomain or your custom domain. Get Started"
  },
  {
    "objectID": "Overview-7",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Using AWS Amplify Console",
    "depth": 2,
    "text": "Following are the concepts you would encounter when adding Amplify console as a hosting option for your Amplify app."
  },
  {
    "objectID": "Overview-8",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Type of deployments",
    "depth": 3,
    "text": "If you select Amplify Console for hosting your Amplify App in the amplify add hosting flow, there are two stages you can select from as a part of the flow:"
  },
  {
    "objectID": "Overview-9",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Type of deployments",
    "depth": 3,
    "text": "Continuous deployment allows you to publish changes on every code commit by connecting your GitHub, Bitbucket, GitLab, or AWS CodeCommit repositories. Selecting this option would open up your AWS Amplify console where you can connect your Git  repository. Once your repository is connected, run git push to deploy changes to both your backend and frontend in a single workflow."
  },
  {
    "objectID": "Overview-10",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Type of deployments",
    "depth": 3,
    "text": "Manual deployment allows you to publish your web app to the Amplify Console without connecting a Git provider. If you select this option, you will have to run the amplify publish command every time you would like to see your changes reflected in the cloud."
  },
  {
    "objectID": "Overview-11",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Type of deployments",
    "depth": 3,
    "text": "In order to change deployment types, you need to run amplify remove hosting and then amplify add hosting to choose your new preferred deployment type."
  },
  {
    "objectID": "Overview-12",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Custom domain, redirects, and more",
    "depth": 3,
    "text": "The amplify configure hosting command for the Amplify Console option, opens up the AWS Amplify Console browser tab for you where you can configure settings such as rewrite/redirect URL's, password protection, custom domain.\nThese settings do not get replicated or cloned between environments and you'd have to configure them on a per-environment basis."
  },
  {
    "objectID": "Overview-13",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Custom domain, redirects, and more",
    "depth": 3,
    "text": "Note:"
  },
  {
    "objectID": "Overview-14",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Custom domain, redirects, and more",
    "depth": 3,
    "text": "Amplify Console automatically handles cache invalidation and there is no additional configurations or commands/command-line parameters required for it."
  },
  {
    "objectID": "Overview-15",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Custom domain, redirects, and more",
    "depth": 3,
    "text": "If you start from the Amplify Console's home page and connect your project's code repository (by clicking Connect app button), the frontend environment is created for your project once the workflow successfully completes. After setting up hosting in the Amplify Console, you cannot run the amplify hosting add command from your local installation of the Amplify CLI. To disable hosting, please visit the Amplify Console and disconnect the branch from the App settings > General page."
  },
  {
    "objectID": "Overview-16",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Custom domain, redirects, and more",
    "depth": 3,
    "text": "If you're hosting a Single Page Web App (SPA) with routing such as react-router, you'll need to add a redirect in the Amplify console."
  },
  {
    "objectID": "Overview-18",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Custom domain, redirects, and more",
    "depth": 3,
    "text": "The redirect address should be consistent with the redirect documentation."
  },
  {
    "objectID": "Overview-19",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Amazon S3 and Amazon Cloudfront",
    "depth": 2,
    "text": "The Amplify CLI provides you the option to manage the hosting of your static website using Amazon S3 and Amazon Cloudfront directly as well. Following are the concepts you would encounter when adding S3 & Cloudfront as a hosting option for your Amplify app."
  },
  {
    "objectID": "Overview-20",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Stages",
    "depth": 3,
    "text": "If you select Amazon S3 & Amazon Cloudfront for hosting your Amplify App in the amplify add hosting flow, there are two stages you can select from as a part of the flow:"
  },
  {
    "objectID": "Overview-21",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Stages",
    "depth": 3,
    "text": "DEV:  S3 static web hosting"
  },
  {
    "objectID": "Overview-22",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Stages",
    "depth": 3,
    "text": "PROD: S3 and CloudFront"
  },
  {
    "objectID": "Overview-23",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Stages",
    "depth": 3,
    "text": "It can take time to provision a CloudFront Distribution across the global CDN footprint, in some cases 15 minutes or more. Therefore the Amplify CLI provides a DEV configuration with an S3 static site only when prototyping your application; and a PROD configuration when you are ready to deploy in production. Note that the DEV stage using S3, your static site would not have HTTPS support and hence only recommended for prototyping your app."
  },
  {
    "objectID": "Overview-24",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Stages",
    "depth": 3,
    "text": "Amazon CloudFront service can also be added or removed in your Amplify project later on top of your Amazon S3 bucket by using the amplify hosting configure command. Note that if the hosting S3 bucket is newly created in regions other than us-east-1, you might get the HTTP 307 Temporary Redirect error in the beginning when you access your published application through CloudFront. This is because CloudFront forwards requests to the default S3 endpoint (s3.amazonaws.com), which is in the us-east-1 region, and it can take up to 24 hours for the new hosting bucket name to propagate globally."
  },
  {
    "objectID": "Overview-25",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Stages",
    "depth": 3,
    "text": "For more  information of the Amazon S3 and Amazon CloudFront, check their docs:\nS3 static web hosting\nCloudFront DEV Guide"
  },
  {
    "objectID": "Overview-26",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Cache Invalidation",
    "depth": 3,
    "text": "If you select Amazon S3 & Amazon Cloudfront for hosting your Amplify App in the amplify add hosting flow, the frontend build artifacts will be uploaded to the S3 hosting bucket, and then if Amazon CloudFront is enabled along with it, the amplify publish command executed with the --invalidateCloudFront or -c flag will send an invalidation request to the Amazon CloudFront service to invalidate its cache."
  },
  {
    "objectID": "Overview-27",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Advanced Configurations",
    "depth": 3,
    "text": "The amplify configure hosting command walks through the steps to configure the different sections of the resources used when hosting through Amazon S3 & Amazon Cloudfront. Following are the available configurable options:"
  },
  {
    "objectID": "Overview-28",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Advanced Configurations",
    "depth": 3,
    "text": "Website\nConfigures the S3 bucket for static web hosting. You can set the index doc and error doc references by configuring this option. Both are set to be index.html by default."
  },
  {
    "objectID": "Overview-29",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Advanced Configurations",
    "depth": 3,
    "text": "CloudFront\nConfigures the CloudFront content delivery network (CDN). You can configure TTLs (Time To Live) for the default cache behavior, and configure custom error responses."
  },
  {
    "objectID": "Overview-30",
    "title": "Overview",
    "description": "Deploy and host your app using either Amplify Console or Amazon CloudFront/S3. The Amplify Console offers fully managed hosting with features such as instant cache invalidation and atomic deploys.",
    "slug": "/cli/hosting/hosting",
    "category": "Amplify CLI",
    "subcategory": "Hosting",
    "type": "article",
    "heading": "Advanced Configurations",
    "depth": 3,
    "text": "Publish\nConfigures the publish ignore patterns (similar to a .gitignore file in your git based project) for the publish command. The publish command will ignore these set of directories and files in the distribution folder that have names matching the patterns."
  },
  {
    "objectID": "Geofencing-0",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "A Geofence is a virtual perimeter for a real-world geographic area. A Geofence contains points or vertices that form a closed boundary, defining an area of interest.\nGeofence collections store one or multiple Geofences.\nAmplify's geo category enables you to create and manage Geofence collections used to setup virtual geographic perimeters."
  },
  {
    "objectID": "Geofencing-1",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Geofence Collection",
    "depth": 2,
    "text": "Before you add a new Geofence Collection to your application, you need to have at least one Cognito User Pool group added to your project.\nThe permissions to perform CRUD operations on Geofences in the collection will be granted only to users belonging to a Cognito User Pool group that is responsible for managing these Geofences."
  },
  {
    "objectID": "Geofencing-2",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Geofence Collection",
    "depth": 2,
    "text": "If you haven't set up the auth category already, you can do so by running:"
  },
  {
    "objectID": "Geofencing-3",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Geofence Collection",
    "depth": 2,
    "text": "When you have auth category set up, you can add the Cognito User Pool groups using:"
  },
  {
    "objectID": "Geofencing-4",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Geofence Collection",
    "depth": 2,
    "text": "If you want to grant access to previously created geo resources to the users of the Cognito group added above,\nfollow the instructions as mentioned in the section below."
  },
  {
    "objectID": "Geofencing-5",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Geofence Collection",
    "depth": 2,
    "text": "Additionally, if you want to add existing users to the Cognito group,\nfollow the instructions as mentioned in the section below."
  },
  {
    "objectID": "Geofencing-6",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Geofence Collection",
    "depth": 2,
    "text": "When you have at least one Cognito User Pool group added, you can now provision a new Geofence Collection using:"
  },
  {
    "objectID": "Geofencing-7",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Geofence Collection",
    "depth": 2,
    "text": "Next, set a name for the Geofence Collection:"
  },
  {
    "objectID": "Geofencing-8",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Geofence Collection Access permissions",
    "depth": 2,
    "text": "Next, configure the access permissions for your geofence collection resource and authorize users of desired Cognito User Pool groups to perform CRUD operations on Geofences in the collection."
  },
  {
    "objectID": "Geofencing-9",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Geofence Collection Access permissions",
    "depth": 2,
    "text": "The above chosen permissions are granted to the users belonging the specified Cognito User Pool group.\nPlease note that these permissions apply to ALL Geofences in a collection. For example, If you chose Read geofence permission for say storesInWashingtonGeofenceCollectionAdmin\nCognito group, ALL users added to that group will be able to read the properties of ALL Geofences in that Geofence collection."
  },
  {
    "objectID": "Geofencing-10",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Geofence Collection Pricing Plan",
    "depth": 2,
    "text": "The pricing plan for the Geofence Collection will be set to RequestBasedUsage.\nWe advice you to go through the location service pricing along with the location service terms (82.5 section) to learn more about the pricing plan."
  },
  {
    "objectID": "Geofencing-11",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Geofence Collection",
    "depth": 2,
    "text": "If you added more than one geofence collection via amplify add geo, the geofence collection that was added last will be the default.\nHowever, you can choose if the current geofence collection should be the default for your application:"
  },
  {
    "objectID": "Geofencing-12",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Geofence Collection",
    "depth": 2,
    "text": "Answering No will retain the previously set default."
  },
  {
    "objectID": "Geofencing-13",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Geofence Collection",
    "depth": 2,
    "text": "That's it! You can now create virtual perimeters around points of interest in your application. Follow the library documentation as listed here."
  },
  {
    "objectID": "Geofencing-14",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Granting Maps and Search permissions to a group of users",
    "depth": 2,
    "text": "If you want to grant permissions to render a Map or Search for places to the users of a Cognito group,\nyou can do so as shown below:"
  },
  {
    "objectID": "Geofencing-15",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Auth/Guest Users access",
    "depth": 4,
    "text": "Select Auth/Guest Users, to scope permissions based on an individual user's authentication status.\nOn the next question you'll be able to select if only authenticated users can access resources, or authenticated and guest users:"
  },
  {
    "objectID": "Geofencing-16",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Auth/Guest Users access",
    "depth": 4,
    "text": "Select Authorized users only if only authenticated users are allowed to render the map."
  },
  {
    "objectID": "Geofencing-17",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Auth/Guest Users access",
    "depth": 4,
    "text": "Select Authorized and Guest users if both authenticated and unauthenticated users are allowed to render the map."
  },
  {
    "objectID": "Geofencing-18",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Auth/Guest Users access",
    "depth": 4,
    "text": "For more information, refer link to location service page."
  },
  {
    "objectID": "Geofencing-19",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Individual Group access",
    "depth": 4,
    "text": "Select Individual Groups to scope access permissions based on Cognito User Groups"
  },
  {
    "objectID": "Geofencing-20",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Individual Group access",
    "depth": 4,
    "text": "Note: If you combine Auth/Guest user access and Individual Group access, users who are members of a group will only be granted the permissions of the group, and not the authenticated user permissions."
  },
  {
    "objectID": "Geofencing-21",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Adding users to a Cognito User Pool Group",
    "depth": 2,
    "text": "In order to add users to an existing Cognito user pool group created using Amplify CLI, follow the steps mentioned below:"
  },
  {
    "objectID": "Geofencing-22",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Using the AWS console",
    "depth": 4,
    "text": "Open the AWS console page corresponding to the user pool that is provisioned by Amplify CLI using"
  },
  {
    "objectID": "Geofencing-23",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Using the AWS console",
    "depth": 4,
    "text": "From the Cognito user pool console page that opened in your default browser, choose Users and groups tab in General settings.\nThen, choose the corresponding Cognito group from the Groups tab on the right as shown\n"
  },
  {
    "objectID": "Geofencing-24",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Using the AWS console",
    "depth": 4,
    "text": "Then click on the Add users button that displays a window to select the users by their username, email etc. that you intend to add to the Cognito group. Note: the user(s) added to the Cognito User Pool Group may need to be re-authenticated by signing out and signing in again.\n"
  },
  {
    "objectID": "Geofencing-25",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Using the AWS SDK for Javascript",
    "depth": 4,
    "text": "Alternatively, if you want to add users to an existing Cognito user pool group programmatically, you can use the AWS SDK for Javascript. Refer to the API documentation."
  },
  {
    "objectID": "Geofencing-26",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Upload your own GeoJSON file to geofence collection",
    "depth": 2,
    "text": "After you have added geofence collection and provisioned the resource, you will be able to upload your own GeoJSON file that defines the Geofences in a collection via the command:"
  },
  {
    "objectID": "Geofencing-27",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Upload your own GeoJSON file to geofence collection",
    "depth": 2,
    "text": "You can refer to GeoJSON.IO where you can draw your own geofences and have GeoJSON file auto generated. After you get the GeoJSON file, you can provide the file path:"
  },
  {
    "objectID": "Geofencing-28",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Upload your own GeoJSON file to geofence collection",
    "depth": 2,
    "text": "For each geofence feature, it requires a unique identifier. According to the RFC7946, There are two options for applying identifiers:"
  },
  {
    "objectID": "Geofencing-29",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Root level ID",
    "depth": 3,
    "text": "This option will use auto-generated id field in the root level of Feature object as identifier."
  },
  {
    "objectID": "Geofencing-30",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Root level ID",
    "depth": 3,
    "text": "Note: This option will UPDATE your GeoJSON file"
  },
  {
    "objectID": "Geofencing-31",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Custom properties",
    "depth": 3,
    "text": "This option allows you to choose your own fields inside properties of Feature object. Amplify CLI will help scan the candidate properties and provide them as options in the walkthrough. The candidate properties are chosen based on the existence of all feature objects. The identifier field should have unique values among geofences and will be validated after being selected."
  },
  {
    "objectID": "Geofencing-32",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Custom properties",
    "depth": 3,
    "text": "A validation of the GeoJSON file will be executed afterwards. The upload of geofences will be triggered upon the success of validation. For the regulation of GeoJSON, please refer to RFC7946"
  },
  {
    "objectID": "Geofencing-33",
    "title": "Geofencing",
    "description": "Use Amplify CLI to create and manage collections of Geofences",
    "slug": "/cli/geo/geofencing",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Custom properties",
    "depth": 3,
    "text": "Note: After you have provisioned the Geofence Collection using Amplify CLI, depending on your application's use-case, you can also add Geofences to\nthe provisioned Geofence Collection programmatically. Refer this API documentation for more information."
  },
  {
    "objectID": "Location Search-0",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify's geo category enables you to search by places, addresses, and coordinates in your app with \"place index\" resources."
  },
  {
    "objectID": "Location Search-1",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: Please reach out to us for any feedback and/or issues here"
  },
  {
    "objectID": "Location Search-2",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Location Search Index",
    "depth": 2,
    "text": "You can add a new location search index by running the following command from your project's root folder:"
  },
  {
    "objectID": "Location Search-3",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Location Search Index",
    "depth": 2,
    "text": "If you haven't set up the auth category already, the Amplify CLI will guide you to enable the auth category.\nThe auth category is required in your application so that the appropriate permissions to search for places can be given to Authorized and/or Guest users as described below."
  },
  {
    "objectID": "Location Search-4",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Location Search Index",
    "depth": 2,
    "text": "Next, set a name for the location search index:"
  },
  {
    "objectID": "Location Search-5",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Access permissions",
    "depth": 2,
    "text": "Next, configure the access permissions for your location search index and authorize users to search for places. You can scope permissions based on an individual user's authentication status."
  },
  {
    "objectID": "Location Search-6",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Access permissions",
    "depth": 2,
    "text": "Select Authorized users only if only authenticated users can search for places."
  },
  {
    "objectID": "Location Search-7",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Access permissions",
    "depth": 2,
    "text": "Select Authorized and Guest users if both authenticated and unauthenticated users can can search for places."
  },
  {
    "objectID": "Location Search-8",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Access permissions",
    "depth": 2,
    "text": "For more information, refer link to location service page."
  },
  {
    "objectID": "Location Search-9",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Access permissions",
    "depth": 2,
    "text": "Note:\nIf you are using Amplify CLI version 7.6.19 or older and have a Search Index added to your application, please follow these instructions to get the auto-complete suggestions for search:"
  },
  {
    "objectID": "Location Search-10",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Access permissions",
    "depth": 2,
    "text": "Upgrade the Amplify CLI to version 7.6.20 or later using npm i -g @aws-amplify/cli."
  },
  {
    "objectID": "Location Search-11",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Access permissions",
    "depth": 2,
    "text": "Run amplify update geo and select the existing Search Index. Choose the same configuration for the Search Index that you already have."
  },
  {
    "objectID": "Location Search-12",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Access permissions",
    "depth": 2,
    "text": "Run amplify push to update the backend resource."
  },
  {
    "objectID": "Location Search-13",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search Index Pricing Plan",
    "depth": 2,
    "text": "The pricing plan for Search Index will be set to RequestBasedUsage.\nWe advice you to go through the location service pricing along with the location service terms (82.5 section) to learn more about the pricing plan."
  },
  {
    "objectID": "Location Search-14",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Location Search Index pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "You can check the pricing plan for your Search Index from geo/<searchIndexID>/pricingPlan attribute in your project metadata file located at amplify/backend/amplify-meta.json in your project."
  },
  {
    "objectID": "Location Search-15",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Location Search Index pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "You can check your Amplify CLI version using amplify -v."
  },
  {
    "objectID": "Location Search-16",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Location Search Index pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "Note:\nIf you are using Amplify CLI version 7.6.8 or older and have a Search Index added to your application with the pricing plan set to MobileAssetTracking or MobileAssetManagement,\nplease follow these instructions to update the pricing plan:"
  },
  {
    "objectID": "Location Search-17",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Location Search Index pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "Upgrade the Amplify CLI to version 7.6.9 or later using npm i -g @aws-amplify/cli."
  },
  {
    "objectID": "Location Search-18",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Location Search Index pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "Run amplify update geo and select the Search Index with Asset based pricing plan. Choose the same configuration for the Search Index that you already have."
  },
  {
    "objectID": "Location Search-19",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Location Search Index pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "Run amplify push to update the backend resource."
  },
  {
    "objectID": "Location Search-20",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Advanced Settings",
    "depth": 2,
    "text": "You can optionally configure the data provider and result storage location for your location search index."
  },
  {
    "objectID": "Location Search-21",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search data provider",
    "depth": 3,
    "text": "You can select a data provider as the source for geocoding, reverse geocoding and searches.\nEach provider gathers and curates their data using different means. They may also have varying expertise in different regions of the world.\nThe available data providers of geospatial data are shown. To learn more about data providers, please refer this location service doc."
  },
  {
    "objectID": "Location Search-22",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search data provider",
    "depth": 3,
    "text": "Note: If your application is tracking or routing assets you use in your business (such as delivery vehicles or employees), you may only use HERE as your geolocation provider.\nSee section 82 of the AWS service terms for more details."
  },
  {
    "objectID": "Location Search-23",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search data provider",
    "depth": 3,
    "text": "HERE will be set as default data provider for the location search index, if you do not want to explicitly set this property."
  },
  {
    "objectID": "Location Search-24",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search result storage location",
    "depth": 3,
    "text": "You can specify how the results of a search operation will be stored by the caller."
  },
  {
    "objectID": "Location Search-25",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search result storage location",
    "depth": 3,
    "text": "No will be chosen as default if the developer does not want to explicitly set this property."
  },
  {
    "objectID": "Location Search-26",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Location Search result storage location",
    "depth": 3,
    "text": "Refer this location service doc for more information."
  },
  {
    "objectID": "Location Search-27",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Location Search Index",
    "depth": 2,
    "text": "If you added more than one location search index via amplify add geo, the index that was added last will be the default.\nHowever, you can choose if the current search index should be the default one used in your application:"
  },
  {
    "objectID": "Location Search-28",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Location Search Index",
    "depth": 2,
    "text": "Answering No will retain the previously set default."
  },
  {
    "objectID": "Location Search-29",
    "title": "Location Search",
    "description": "Use Amplify CLI to create and manage location search indices or place indices that are used to search for places in your application.",
    "slug": "/cli/geo/search",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Location Search Index",
    "depth": 2,
    "text": "That's it! You can now render maps in your application. Follow the library documentation as listed here."
  },
  {
    "objectID": "Maps-0",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify's geo category enables you to create and manage map resources used to visualize geospatial data in your application."
  },
  {
    "objectID": "Maps-1",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: Please reach out to us for any feedback and/or issues here"
  },
  {
    "objectID": "Maps-2",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Map",
    "depth": 2,
    "text": "You can add a new map by running the following command from your project's root folder:"
  },
  {
    "objectID": "Maps-3",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Map",
    "depth": 2,
    "text": "If you haven't set up the auth category already, the Amplify CLI will guide you to enable the auth category.\nThe auth category is required in your application so that the appropriate permissions to render the map can be given to Authorized and/or Guest users as described below."
  },
  {
    "objectID": "Maps-4",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Setup a new Map",
    "depth": 2,
    "text": "Next, set a name for the map:"
  },
  {
    "objectID": "Maps-5",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Map Access permissions",
    "depth": 2,
    "text": "Next, configure the access permissions for your Map resource and authorize users to render the map.\nYou can scope permissions based on an individual user's authentication status."
  },
  {
    "objectID": "Maps-6",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Map Access permissions",
    "depth": 2,
    "text": "Select Authorized users only if only authenticated users are allowed to render the map."
  },
  {
    "objectID": "Maps-7",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Map Access permissions",
    "depth": 2,
    "text": "Select Authorized and Guest users if both authenticated and unauthenticated users are allowed to render the map."
  },
  {
    "objectID": "Maps-8",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Map Access permissions",
    "depth": 2,
    "text": "For more information, refer link to location service page."
  },
  {
    "objectID": "Maps-9",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Map Pricing Plan",
    "depth": 2,
    "text": "The pricing plan for Map will be set to RequestBasedUsage.\nWe advice you to go through the location service pricing along with the location service terms (82.5 section) to learn more about the pricing plan."
  },
  {
    "objectID": "Maps-10",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Map pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "You can check the pricing plan for your Map from geo/<mapID>/pricingPlan attribute in your project metadata file located at amplify/backend/amplify-meta.json in your project."
  },
  {
    "objectID": "Maps-11",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Map pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "You can check your Amplify CLI version using amplify -v."
  },
  {
    "objectID": "Maps-12",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Map pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "Note:\nIf you are using Amplify CLI version 7.6.8 or older and have a Map added to your application with the pricing plan set to MobileAssetTracking or MobileAssetManagement,\nplease follow these instructions to update the pricing plan:"
  },
  {
    "objectID": "Maps-13",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Map pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "Upgrade the Amplify CLI to version 7.6.9 or later using npm i -g @aws-amplify/cli."
  },
  {
    "objectID": "Maps-14",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Map pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "Run amplify update geo and select the Map with Asset based pricing plan. Choose the same configuration for the Map that you already have."
  },
  {
    "objectID": "Maps-15",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Update Map pricing plan to RequestBasedUsage",
    "depth": 3,
    "text": "Run amplify push to update the backend resource."
  },
  {
    "objectID": "Maps-16",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Advanced Settings",
    "depth": 2,
    "text": "You can optionally configure the style and data provider for the map."
  },
  {
    "objectID": "Maps-17",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Map style & Map data provider",
    "depth": 3,
    "text": "You can pick a style for the map resource. The available map styles along with the data provider of geospatial data are shown. To learn more about each of these map styles, please refer this location service doc."
  },
  {
    "objectID": "Maps-18",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Map style & Map data provider",
    "depth": 3,
    "text": "Note: If your application is tracking or routing assets you use in your business (such as delivery vehicles or employees), you may only use HERE as your geolocation provider.\nSee section 82 of the AWS service terms for more details."
  },
  {
    "objectID": "Maps-19",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Map style & Map data provider",
    "depth": 3,
    "text": "Streets (data provided by Esri)  will be the default option that will be used to set Map style, if you do not want to explicitly set this property."
  },
  {
    "objectID": "Maps-20",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Map",
    "depth": 3,
    "text": "If you added more than one map via amplify add geo, the map that was added last will be the default.\nHowever, you can choose if the current Map should be the default for your application:"
  },
  {
    "objectID": "Maps-21",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Map",
    "depth": 3,
    "text": "Answering No will retain the previously set default."
  },
  {
    "objectID": "Maps-22",
    "title": "Maps",
    "description": "Use Amplify CLI to create and manage maps to visualize geospatial data in your app.",
    "slug": "/cli/geo/maps",
    "category": "Amplify CLI",
    "subcategory": "Geo",
    "type": "article",
    "heading": "Set a default Map",
    "depth": 3,
    "text": "That's it! You can now render maps in your application. Follow the library documentation as listed here."
  },
  {
    "objectID": "Build options-0",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In some cases, it might be necessary to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel or with tsc into a format that is supported by the AWS Lambda's node runtime. amplify push will look for a script definition in the project root's package.json with the name amplify:<resource_name> and run it right after npm install is canned in the function resource's src directory."
  },
  {
    "objectID": "Build options-1",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Example: Transpiling Typescript code with TSC"
  },
  {
    "objectID": "Build options-2",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Make sure you have the tsc command installed globally by running npm install -g typescript or locally by running npm install --save-dev typescript"
  },
  {
    "objectID": "Build options-3",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Let's say, a function resource has been created with amplify function add and it is called generateReport. The ES6 source code for this function is located in amplify/backend/function/generateReport/lib and the resource's src directory only contains the auto-generated package.json for this function. In order to compile TypeScript, you have to add the following script definition to your project root's package.json:"
  },
  {
    "objectID": "Build options-4",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Navigate into amplify/backend/function/generateReport and create tsconfig.json then add the following to it:"
  },
  {
    "objectID": "Build options-5",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: It is important to note that if you are using aws-sdk in your TypeScript file, you will get a timeout if you attempt to import it with the following:"
  },
  {
    "objectID": "Build options-6",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Change to this:"
  },
  {
    "objectID": "Build options-7",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Once you run amplify push, the amplify:generateReport script will be executed, either by yarn or by npm depending on the existence of a yarn.lock file in the project root directory."
  },
  {
    "objectID": "Build options-8",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Example: Transpiling ES6 code with Babel"
  },
  {
    "objectID": "Build options-9",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Let's say, a function resource has been created with amplify function add and it is called generateReport. The ES6 source code for this function is located in amplify/backend/function/generateReport/lib and the resource's src directory only contains the auto-generated package.json for this function. In order to run Babel, you have to add the following script definition and dev dependencies to your project root's package.json:"
  },
  {
    "objectID": "Build options-10",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Babel needs to be configured properly so that the transpiled code can be run on AWS Lambda. This can be done by adding a .babelrc file to the resource folder (amplify/backend/function/generateReport/.babelrc in this case):"
  },
  {
    "objectID": "Build options-11",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Once you run amplify push, the amplify:generateReport script will be executed, either by yarn or by npm depending on the existence of a yarn.lock file in the project root directory."
  },
  {
    "objectID": "Build options-12",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "There are no existing build options for Python functions. The process of building and packaging Python functions is in line with Amazon's existing documentation for manually creating a Lambda deployment package which depends on a virtual environment."
  },
  {
    "objectID": "Build options-13",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify will run pipenv install in your function's source directory during builds using either Pipenv's default virtual environment, or whichever virtual environment happens to be active. Then, during the packaging stage, the contents of the site-packages directory for that virtual environment will be zipped up along with the function-specific files."
  },
  {
    "objectID": "Build options-14",
    "title": "Build options",
    "description": "Use build options for Amplify's function category to execute a script before a function is deployed, e.g. to transpile Typescript or ES6 with Babel into a format that is supported by the AWS Lambda's node runtime.",
    "slug": "/cli/function/build-options",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The contents of the Python build can include local development dependencies (e.g. for testing) in addition to those necessary for your function to run. Packages installed as \"editable\" (using the -e flag) will not be  packaged, as they are represented as an .egg-link file pointing to the local, editable code of the dependency."
  },
  {
    "objectID": "Access secret values-0",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI allows you to configure secret values that can be securely accessed from a Lambda function. Each Amplify environment can have a different secret value. This enables use cases such as different API keys for a dev and prod environment. Secrets should be used for values such as database passwords, API keys, and access tokens."
  },
  {
    "objectID": "Access secret values-1",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To access non-sensitive configuration values in a Lambda function, use environment variables."
  },
  {
    "objectID": "Access secret values-2",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configuring secret values",
    "depth": 2,
    "text": "To configure a new function with secret values, run amplify add function, select yes to the advanced settings prompt and select yes to the secrets configuration prompt. From there, you can specify the name and value of the secret."
  },
  {
    "objectID": "Access secret values-3",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configuring secret values",
    "depth": 2,
    "text": "To configure secrets for an existing function, run amplify update function, and select Secret values configuration. You can then add, update and remove secret values."
  },
  {
    "objectID": "Access secret values-4",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configuring secret values",
    "depth": 2,
    "text": "Note: Amplify CLI never stores secrets locally. All secret values are immediately stored in AWS Parameter Store using the SecureString parameter type."
  },
  {
    "objectID": "Access secret values-5",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Accessing the values in your function",
    "depth": 2,
    "text": "To access the secret values in your Lambda function, use the AWS SSM GetParameter API. Amplify CLI will automatically supply the SSM parameter name of the secret as an environment variable to the function. This value can be passed into the API call as the \"Name\" to retrieve the value. Ensure that the API call has \"WithDecryption\" specified as true."
  },
  {
    "objectID": "Access secret values-6",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Accessing the values in your function",
    "depth": 2,
    "text": "If your Lambda function is using the Node.js runtime, a comment block will be placed at the top of your index.js file with example code to retrieve the secret values."
  },
  {
    "objectID": "Access secret values-7",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "When creating a new Amplify environment using amplify env add, Amplify CLI asks if you want to apply all secret values to the new environment or modify them. If you choose to apply the existing values, you can still make edits anytime using amplify update function."
  },
  {
    "objectID": "Access secret values-8",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "When creating a new Amplify environment using amplify env add --envName <new env name> --yes, Amplify CLI will apply all secret values from the current environment to the new environment."
  },
  {
    "objectID": "Access secret values-9",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "In multi-environment workflows, you may have added a new secret in one Amplify environment and then checked out a different Amplify environment. In this case, on the next amplify push. Amplify CLI will detect that there is a new secret that does not have a value specified in the current environment and prompt for one. Running amplify push --yes in this case will fail with a message explaining the missing secret values."
  },
  {
    "objectID": "Access secret values-10",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "In git-based multi-environment workflows, you may run into errors during deployment. For example, this happens when you add a secret in envA (corresponding to a git branch branchA), then amplify env checkout envB and git checkout branchB and git merge branchA into branchB. Upon pushing envB, Amplify CLI detects that a new secret has been added but can't infer a value for it. To resolve this issue, run the following commands in the terminal:"
  },
  {
    "objectID": "Access secret values-11",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "amplify env checkout <failing env name>"
  },
  {
    "objectID": "Access secret values-12",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "amplify push - when prompted, enter a new value for the secret(s)"
  },
  {
    "objectID": "Access secret values-13",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "git commit"
  },
  {
    "objectID": "Access secret values-14",
    "title": "Access secret values",
    "description": "Configure Lambda functions to securely access secret values",
    "slug": "/cli/function/secrets",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "git push"
  },
  {
    "objectID": "Environment variables-0",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI allows you to configure environment variables for your Lambda functions. Each Amplify environment can have a different environment variable value. This enables use cases such as switching between dev and prod URLs depending on the environment."
  },
  {
    "objectID": "Environment variables-1",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Environment variables should NOT be used for storing sensitive configuration values such as database passwords, API keys, or access tokens. Use function secrets configuration instead!"
  },
  {
    "objectID": "Environment variables-2",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configuring environment variables",
    "depth": 2,
    "text": "To configure a new function with environment variables, run amplify add function, select yes to the advanced settings prompt and select yes to the environment variables configuration prompt. From there, you will be able to specify a key and value for the environment variable."
  },
  {
    "objectID": "Environment variables-3",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Configuring environment variables",
    "depth": 2,
    "text": "To configure environment variables for an existing function, run amplify update function, and select Environment variables configuration. You can then add, update, or remove environment variables."
  },
  {
    "objectID": "Environment variables-4",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "When creating a new Amplify environment using amplify env add, Amplify CLI asks if you want to apply all environment variable values to the new environment or modify them. If you choose to apply the existing values, you can still make edits anytime by running amplify update function."
  },
  {
    "objectID": "Environment variables-5",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "When creating a new Amplify environment using amplify env add --yes, Amplify CLI will apply all environment variable values from the current environment to the new environment."
  },
  {
    "objectID": "Environment variables-6",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "In multi-environment workflows, you may have added a new environment variable in one Amplify environment and then checked out a different Amplify environment. In this case, on the next amplify push, Amplify CLI will detect that there is a new environment variable that does not have a value specified in the current environment and prompt for one.\nRunning amplify push --yes in this case will fail with a message explaining the missing environment variable values."
  },
  {
    "objectID": "Environment variables-7",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "In git-based multi-environment workflows, you may run into errors during deployment. For example, this happens when you add an environment variable in envA (corresponding to a git branch branchA), then amplify checkout envB and git checkout branchB and git merge branchA into branchB. Upon pushing envB, Amplify CLI detects that a new environment variable has been added but can't infer a value for it. To resolve this issue, run the following commands in the terminal:"
  },
  {
    "objectID": "Environment variables-8",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "amplify env checkout <failing env name>"
  },
  {
    "objectID": "Environment variables-9",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "amplify push - when prompted, enter a new value for the environment variable(s)"
  },
  {
    "objectID": "Environment variables-10",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "git commit"
  },
  {
    "objectID": "Environment variables-11",
    "title": "Environment variables",
    "description": "Configure environment variables for AWS Lambda functions",
    "slug": "/cli/function/env-vars",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Multi-environment flows",
    "depth": 2,
    "text": "git push"
  },
  {
    "objectID": "Reuse code & assets using layers-0",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Lambda layers allow you to pull common code & assets for your Lambda function into a centralized location. With Lambda layers you can:"
  },
  {
    "objectID": "Reuse code & assets using layers-1",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Re-use your code & assets: Your Lambda functions can leverage these layers to reuse shared code & assets across functions"
  },
  {
    "objectID": "Reuse code & assets using layers-2",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Speed up function deployments: Iterating on your Lambda function will be significantly faster because it can be independently updated from the layer which usually contains the bulk of large static content"
  },
  {
    "objectID": "Reuse code & assets using layers-3",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Known limitation: Functions using a layer can't be mocked locally using amplify mock. We recommend you to create a dev environment and test the functions inside the AWS Lambda console."
  },
  {
    "objectID": "Reuse code & assets using layers-5",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The general workflow breaks down into the following steps:"
  },
  {
    "objectID": "Reuse code & assets using layers-6",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Create a Lambda layer"
  },
  {
    "objectID": "Reuse code & assets using layers-7",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Add shared code & assets to the layer"
  },
  {
    "objectID": "Reuse code & assets using layers-8",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Add the Lambda layer to a function"
  },
  {
    "objectID": "Reuse code & assets using layers-9",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Deploy the layer & function"
  },
  {
    "objectID": "Reuse code & assets using layers-10",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "To create a layer, run the following command within your Amplify project:"
  },
  {
    "objectID": "Reuse code & assets using layers-11",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "Select Lambda layer as the capability to add"
  },
  {
    "objectID": "Reuse code & assets using layers-12",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "Next, you'll be guided through a workflow to provide a layer name, and select a supported runtime. Currently Amplify CLI provides NodeJS or Python runtime support for layers."
  },
  {
    "objectID": "Reuse code & assets using layers-13",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "After that, you'll be asked to configure your layer's permission."
  },
  {
    "objectID": "Reuse code & assets using layers-14",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "The current AWS account will always have access to this layer.\nIn addition, the customer can configure access for:"
  },
  {
    "objectID": "Reuse code & assets using layers-15",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "Specific AWS accounts: provide a comma-separated list of AWS Account IDs to provide access to them."
  },
  {
    "objectID": "Reuse code & assets using layers-16",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "Specific AWS organizations: provide a comma-separated list of AWS Organization IDs to provide access to them. AWS Organization IDs start with o-."
  },
  {
    "objectID": "Reuse code & assets using layers-17",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "Public: make this layer available for everyone AWS. Anyone in AWS can reference this layer using its ARN."
  },
  {
    "objectID": "Reuse code & assets using layers-18",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Create a Lambda Layer",
    "depth": 2,
    "text": "Your Lambda layer is ready to use after the permissions are set up."
  },
  {
    "objectID": "Reuse code & assets using layers-19",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared code & assets",
    "depth": 2,
    "text": "Now that your layer is set up, you'll see a new folder with the layer-name added to amplify/backend/function/. The respective runtime's folder structure is autogenerated."
  },
  {
    "objectID": "Reuse code & assets using layers-20",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared code",
    "depth": 3,
    "text": "A nodejs folder is auto-generated for you. In there you'll find an empty package.json file and a node_modules folder. If you want to offload other node_modules you can either:"
  },
  {
    "objectID": "Reuse code & assets using layers-21",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared code",
    "depth": 3,
    "text": "cd into the nodejs folder and add the dependencies into the package.json file, or"
  },
  {
    "objectID": "Reuse code & assets using layers-22",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared code",
    "depth": 3,
    "text": "move all your existing function's node_modules content into the layer's node_modules folder"
  },
  {
    "objectID": "Reuse code & assets using layers-23",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared code",
    "depth": 3,
    "text": "Any dependency listed within the layer's package.json file will be installed and packaged during amplify push."
  },
  {
    "objectID": "Reuse code & assets using layers-24",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared code",
    "depth": 3,
    "text": "Any node module that is in the layer's node_modules folder can be accessed from the function as if the node module is in the function's node_modules folder."
  },
  {
    "objectID": "Reuse code & assets using layers-25",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared code",
    "depth": 3,
    "text": "In order to take advantage of Lambda layer's for your NodeJS function, you don't even need to update your function's code!"
  },
  {
    "objectID": "Reuse code & assets using layers-26",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared code",
    "depth": 3,
    "text": "A python folder is auto-generated for you. In there you'll find an empty Pipfile file. Any packages listed within the layer's Pipfile file will be installed and packaged during amplify push. You can import these packages from within your Python function just like any other package within your Python function."
  },
  {
    "objectID": "Reuse code & assets using layers-27",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add shared assets",
    "depth": 3,
    "text": "Any assets like large images or other files that you want to share across various functions can be placed in the amplify/backend/function/<layer-name>/opt/ folder. Your function's code can import any assets by looking for files in the /opt/ path."
  },
  {
    "objectID": "Reuse code & assets using layers-28",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Lambda layer versions",
    "depth": 3,
    "text": "Every time amplify push or amplify update function is run, Amplify CLI checks if a layer's content has changed and automatically creates a new layer version. Layer versions are immutable and functions always use a specific layer version."
  },
  {
    "objectID": "Reuse code & assets using layers-29",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Lambda layer versions",
    "depth": 3,
    "text": "In order to speed up deployments when vast amount of node_modules exist, Amplify CLI scans only for changes within each module's package.json file. If you don't see Amplify CLI detect your latest changes, verify that at least of your node module's package.json content has changed."
  },
  {
    "objectID": "Reuse code & assets using layers-30",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add a layer to a function",
    "depth": 2,
    "text": "You can either create a new function and add Lambda layers by running amplify add function or add layers to an existing function using amplify update function. Select Lambda function when prompted and you'll be presented the following question during the guided flow:"
  },
  {
    "objectID": "Reuse code & assets using layers-31",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add a layer to a function",
    "depth": 2,
    "text": "You can either add an existing layer in AWS by referencing its ARN or select a layer from your Amplify project that's listed below."
  },
  {
    "objectID": "Reuse code & assets using layers-32",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add a layer to a function",
    "depth": 2,
    "text": "When adding a layer from your Amplify project, you'll also be able to select a specific layer version or always choose the latest layer version. The largest layer version number represents the most recent changes."
  },
  {
    "objectID": "Reuse code & assets using layers-33",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add a layer to a function",
    "depth": 2,
    "text": "Given that layers can have overlapping contents, the order of the layer matters. You can adjust the layer's order if needed in the next step."
  },
  {
    "objectID": "Reuse code & assets using layers-34",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Add a layer to a function",
    "depth": 2,
    "text": "Now, you've successfully added a layer to your function."
  },
  {
    "objectID": "Reuse code & assets using layers-35",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Deploy Lambda layers & functions with Lambda layers",
    "depth": 2,
    "text": "Once you're ready with your changes in your layer and functions, you can deploy them by running amplify push."
  },
  {
    "objectID": "Reuse code & assets using layers-36",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Deploy Lambda layers & functions with Lambda layers",
    "depth": 2,
    "text": "If a layer’s content has been updated and it has permissions associated, Amplify CLI will prompt you whether you want to carry the permissions forward to a newer version."
  },
  {
    "objectID": "Reuse code & assets using layers-37",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Deploy Lambda layers & functions with Lambda layers",
    "depth": 2,
    "text": "During amplify push, you get to modify the layer version description. By default, Amplify CLI will populate the description as Updated layer version <timestamp>."
  },
  {
    "objectID": "Reuse code & assets using layers-38",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Update layer content",
    "depth": 2,
    "text": "Any file changes within a layer's folder are automatically tracked by Amplify CLI. If there are changes available, the Amplify CLI will create a new layer version with the changes."
  },
  {
    "objectID": "Reuse code & assets using layers-39",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Update layer settings",
    "depth": 2,
    "text": "You can update any of the layer's settings like its name, runtimes, or permissions by running amplify update function and selecting Lambda layer."
  },
  {
    "objectID": "Reuse code & assets using layers-40",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Update layer settings",
    "depth": 2,
    "text": "Next, you'll be prompted to select the layer for which you want to update the settings for."
  },
  {
    "objectID": "Reuse code & assets using layers-41",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Note: Update Layer Permissions from Public to Specific",
    "depth": 4,
    "text": "To update a lambda layer from Public access to Specific (Account/Organization) access, please remember to remove Public access by un-selecting the option in the 'amplify update' CLI flow before selecting a specific AWS account/organization."
  },
  {
    "objectID": "Reuse code & assets using layers-42",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Note: Update Layer Permissions from Public to Specific",
    "depth": 4,
    "text": "If you have already selected 'Public' access, just adding additional 'specific' AWS accounts/organizations will not have any effect on the Lambda Layer configuration. It will not automatically remove Public access."
  },
  {
    "objectID": "Reuse code & assets using layers-43",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Remove a layer",
    "depth": 2,
    "text": "To remove a Lambda layer, run the amplify function remove command and select Lambda layers. Next, you'll be prompted to select which layer to remove. You can delete specific layer versions or all of them."
  },
  {
    "objectID": "Reuse code & assets using layers-44",
    "title": "Reuse code & assets using layers",
    "description": "Use Amplify CLI's Lambda layer capability to reuse code & assets across functions.",
    "slug": "/cli/function/layers",
    "category": "Amplify CLI",
    "subcategory": "Functions",
    "type": "article",
    "heading": "Remove a layer",
    "depth": 2,
    "text": "Warning: When you delete a layer, you can no longer configure functions to use it. However, any function that already uses the layer continues to have access to it."
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-0",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run the command above to override Amplify-generated storage resources including the S3 bucket, DynamoDB tables, and more."
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-1",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The command creates a new overrides.ts file under amplify/backend/storage/<resource-name>/ which provides you the Amplify-generated resources as CDK constructs."
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-2",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Customize Amplify-generated S3 resources",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. For example to enable versioning on your S3 bucket:"
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-3",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Customize Amplify-generated S3 resources",
    "depth": 2,
    "text": "You can override the following S3-related resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-4",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Customize Amplify-generated S3 resources",
    "depth": 2,
    "text": "| Amplify-generated resource | Description |\n| --- | --- |\n| s3Bucket | The S3 bucket that Amplify generates for file storage upon amplify add storage |\n| s3AuthPublicPolicy | The IAM policy for authenticated users' write access to public/* prefix |\n| s3AuthProtectedPolicy | The IAM policy for authenticated users' write access to protected/* prefix |\n| s3AuthPrivatePolicy | The IAM policy for authenticated users' write access to private/* prefix |\n| s3AuthUploadPolicy | The IAM policy for authenticated users' write access to uploads/* prefix |\n| s3AuthReadPolicy | The IAM policy for authenticated users' read access |\n| s3GuestPublicPolicy | The IAM policy for guest users' write access to public/* prefix |\n| s3GuestUploadPolicy | The IAM policy for guest users' write access to uploads/* prefix |\n| s3GuestReadPolicy | The IAM policy for guest users' read access |"
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-5",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Customize Amplify-generated S3 resources",
    "depth": 2,
    "text": "For example, you can use amplify override storage to add additional PUT and GET access IAM policy statements to the S3 bucket's default public Auth policy:"
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-6",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Customize Amplify-generated S3 resources",
    "depth": 2,
    "text": "Please refer to the IAM documentation for more information on actions, resources, and condition keys for Amazon S3."
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-7",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Customize Amplify-generated DynamoDB tables",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. For example to enable time-to-live specification on your DynamoDB table:"
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-8",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Customize Amplify-generated DynamoDB tables",
    "depth": 2,
    "text": "You can override the following DynamoDB resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated S3 and DynamoDB resources-9",
    "title": "Override Amplify-generated S3 and DynamoDB resources",
    "description": "The \"amplify override storage\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated S3 and DynamoDB resources as CDK constructs. For example, developers can run the “amplify override storage” command to enable Transfer Acceleration for Amplify-generated S3 buckets.",
    "slug": "/cli/storage/override",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Customize Amplify-generated DynamoDB tables",
    "depth": 2,
    "text": "| Amplify-generated resource | Description |\n| --- | --- |\n| dynamoDBTable | The DynamoDB table that Amplify creates upon amplify add storage |"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-0",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Import an existing S3 bucket or DynamoDB tables into your Amplify project. Get started by running amplify import storage command to search for & import an S3 or DynamoDB resource from your account."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-1",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Make sure to run amplify push to complete the import process and deploy this backend change to the cloud."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-2",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The amplify import storage command will:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-3",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "automatically populate your Amplify Library configuration files (aws-exports.js, amplifyconfiguration.json) with your chosen S3 bucket information"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-4",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "provide your designated S3 bucket or DynamoDB table as a storage mechanism for all storage-dependent categories (API, Function, Predictions, and more)"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-5",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "enable Lambda functions to access the chosen S3 or DynamoDB resource if you permit it"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-6",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "This feature is particularly useful if you're trying to:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-7",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "enable Amplify categories (such as API and Function) to access your existing storage resources;"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-8",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "incrementally adopt Amplify for your application stack;"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-9",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "independently manage S3 and DynamoDB resources while working with Amplify."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-10",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: Amplify does not manage the lifecycle of an imported resource."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-11",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Import an existing S3 bucket",
    "depth": 2,
    "text": "Select the \"S3 bucket - Content (Images, audio, video, etc.)\" option when you've run amplify import storage."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-12",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Import an existing S3 bucket",
    "depth": 2,
    "text": "Run amplify push to complete the import procedure."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-13",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Import an existing S3 bucket",
    "depth": 2,
    "text": "Amplify projects are limited to exactly one S3 bucket."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-14",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Connect to an imported S3 bucket with Amplify Libraries",
    "depth": 3,
    "text": "By default, Amplify Libraries assumes that S3 buckets are configured with the following access patterns:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-15",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Connect to an imported S3 bucket with Amplify Libraries",
    "depth": 3,
    "text": "public/ - Accessible by all users of your app"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-16",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Connect to an imported S3 bucket with Amplify Libraries",
    "depth": 3,
    "text": "protected/{user_identity_id}/ - Readable by all users, but writable only by the creating user"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-17",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Connect to an imported S3 bucket with Amplify Libraries",
    "depth": 3,
    "text": "private/{user_identity_id}/ - Only accessible for the individual user"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-18",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Connect to an imported S3 bucket with Amplify Libraries",
    "depth": 3,
    "text": "You can either configure your IAM role to use the Amplify-recommended policies or in your Amplify libraries configuration overwrite the default storage path behavior."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-19",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Connect to an imported S3 bucket with Amplify Libraries",
    "depth": 3,
    "text": "It is highly recommended to review your S3 bucket's CORS settings. Review the recommendation guide here."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-20",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Configuring IAM role to use Amplify-recommended policies",
    "depth": 3,
    "text": "If you're using an imported S3 bucket with an imported Cognito resource, then you'll need to update the policy of your Cognito Identity Pool's authenticated and unauthenticated role. Create new managed policies (not inline policies) for these roles with the following statements:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-21",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Configuring IAM role to use Amplify-recommended policies",
    "depth": 3,
    "text": "Make sure to replace {YOUR_S3_BUCKET_NAME} with your S3 bucket's name."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-22",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Unauthenticated role policies",
    "depth": 4,
    "text": "IAM policy statement for public/:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-23",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Unauthenticated role policies",
    "depth": 4,
    "text": "IAM policy statement for read access to public/, protected/, and private/:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-24",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Authenticated role policies",
    "depth": 4,
    "text": "IAM policy statement for public/:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-25",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Authenticated role policies",
    "depth": 4,
    "text": "IAM policy statement for protected/:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-26",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Authenticated role policies",
    "depth": 4,
    "text": "IAM policy statement for private/:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-27",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Authenticated role policies",
    "depth": 4,
    "text": "IAM policy statement for read access to public/, protected/, and private/:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-28",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Import an existing DynamoDB table",
    "depth": 2,
    "text": "Select the \"DynamoDB table - NoSQL Database\" option when you've run amplify import storage. In order to successfully import your DynamoDB table, your DynamoDB table needs to be located within the same region as your Amplify project."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-29",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Import an existing DynamoDB table",
    "depth": 2,
    "text": "Run amplify push to complete the import procedure."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-30",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Import an existing DynamoDB table",
    "depth": 2,
    "text": "Amplify projects can contain multiple DynamoDB tables."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-31",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Multi-environment support",
    "depth": 2,
    "text": "When you create a new environment through amplify env add, Amplify CLI will assume by default that you're managing your app's storage resources outside of an Amplify project. You'll be asked to either import a different S3 bucket or DynamoDB tables or maintain the same imported storage resource."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-32",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Multi-environment support",
    "depth": 2,
    "text": "If you want to have Amplify manage your storage resources in a new environment, run amplify remove storage to unlink the imported storage resources and amplify add storage to create new Amplify-managed S3 buckets and DynamoDB tables in the new environment."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-33",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Unlink an existing S3 bucket or DynamoDB table",
    "depth": 2,
    "text": "In order to unlink your existing Cognito resource run amplify remove storage. This will only unlink the S3 bucket or DynamoDB table referenced from the Amplify project. It will not delete the S3 bucket or DynamoDB table itself."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-34",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Unlink an existing S3 bucket or DynamoDB table",
    "depth": 2,
    "text": "Run amplify push to complete the unlink procedure."
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-35",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Configure environment variables for Amplify Hosting builds",
    "depth": 2,
    "text": "In order to successfully build your application with Amplify Hosting add the following environment variables to your build environment:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-36",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Configure environment variables for Amplify Hosting builds",
    "depth": 2,
    "text": "|Environment Variable|Description|Imported Resource|Required\n|-|-|-|-|\n|AMPLIFY_STORAGE_BUCKET_NAME|The name of the S3 bucket being imported for storage|S3 bucket|Yes\n|AMPLIFY_STORAGE_REGION|The AWS region in which the S3 bucket or the DynamoDB table is located (for example: us-east-1, us-west-2, etc.)|S3 bucket or DynamoDB table|Yes\n|AMPLIFY_STORAGE_TABLES|The name of the storage resource and DynamoDB table being imported for storage|DynamoDB table|Yes"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-37",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Configure environment variables for Amplify Hosting builds",
    "depth": 2,
    "text": "The value of the AMPLIFY_STORAGE_TABLES environment variable needs to be in a json format such as:"
  },
  {
    "objectID": "Use an existing S3 bucket or DynamoDB table-38",
    "title": "Use an existing S3 bucket or DynamoDB table",
    "description": "Configure the Amplify CLI to use existing S3 bucket or DynamoDB table resources as a storage resource for other Amplify categories. (API, Function, and more)",
    "slug": "/cli/storage/import",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Configure environment variables for Amplify Hosting builds",
    "depth": 2,
    "text": "The values for the STORAGE_RESOURCE_NAME and DDB_TABLE_NAME fields can be retrieved from the amplify/team-provider-info.json file."
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI's storage category enables you to create and manage cloud-connected file & data storage. Use the storage category when you need to store:"
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "app content (images, audio, video etc.) in an public, protected or private storage bucket or"
  },
  {
    "objectID": "Overview-2",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "app data in a NoSQL database and access it with a REST API + Lambda"
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Setup a new storage resource",
    "depth": 2,
    "text": "You can setup a new storage resource by running the following command:"
  },
  {
    "objectID": "Overview-4",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Setup a new storage resource",
    "depth": 2,
    "text": "Amplify allows you to either setup a app content storage (images, audio, video etc.) backed by Amazon S3 or a NoSQL database backed by Amazon DynamoDB."
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Adding S3 storage",
    "depth": 3,
    "text": "Follow the prompts to provide your content storage's resource name."
  },
  {
    "objectID": "Overview-6",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Access permissions",
    "depth": 3,
    "text": "Next, configure the access permissions for your Amazon S3 bucket. If you haven't set up the auth category already, the Amplify CLI will guide you through a workflow to enable the auth category."
  },
  {
    "objectID": "Overview-7",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Access permissions",
    "depth": 3,
    "text": "NOTE: Run amplify update storage to change the access permissions for your Amazon S3 bucket"
  },
  {
    "objectID": "Overview-8",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Auth/Guest Users access",
    "depth": 4,
    "text": "Select Auth/Guest Users, to scope permissions based on an individual user's authentication status. On the next question you'll be able to select if only authenticated users can access resources, or authenticated and guest users:"
  },
  {
    "objectID": "Overview-9",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Auth/Guest Users access",
    "depth": 4,
    "text": "Then you'll be prompted to set the access scopes for your authenticated and (if selected prior) unauthenticated users."
  },
  {
    "objectID": "Overview-10",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Auth/Guest Users access",
    "depth": 4,
    "text": "Granting access to authenticated users will allow the specified CRUD operations on objects in the bucket starting with the prefix /public/, /protected/{cognito:sub}/, and /private/{cognito:sub}/. {cognito:sub} is the sub of the Cognito identity of the authenticated user."
  },
  {
    "objectID": "Overview-11",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Auth/Guest Users access",
    "depth": 4,
    "text": "Granting access to guest users will allow the specified CRUD operations on objects in the bucket starting with the prefix /public/."
  },
  {
    "objectID": "Overview-12",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Individual Group access",
    "depth": 4,
    "text": "Select Individual Groups to scope access permissions based on Cognito User Groups"
  },
  {
    "objectID": "Overview-13",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Individual Group access",
    "depth": 4,
    "text": "Then select the CRUD operations you want to permit for each selected Cognito user group"
  },
  {
    "objectID": "Overview-14",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Individual Group access",
    "depth": 4,
    "text": "Note: CRUD operations selected here will apply to ALL objects in the bucket, not just objects under a particular prefix."
  },
  {
    "objectID": "Overview-15",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Individual Group access",
    "depth": 4,
    "text": "Note: If you combine Auth/Guest user access and Individual Group access, users who are members of a group will only be granted the permissions of the group, and not the authenticated user permissions."
  },
  {
    "objectID": "Overview-16",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Lambda trigger",
    "depth": 3,
    "text": "Lastly, you have the option of configuring a Lambda function that can execute in response to S3 events."
  },
  {
    "objectID": "Overview-17",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Lambda trigger",
    "depth": 3,
    "text": "Learn more about this workflow here."
  },
  {
    "objectID": "Overview-18",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Lambda trigger",
    "depth": 3,
    "text": "That's it! Your content storage is set up! Head to the library's storage docs to integrate this newly created S3 bucket into your app."
  },
  {
    "objectID": "Overview-19",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Adding a NoSQL database",
    "depth": 3,
    "text": "Follow the prompts to provide your NoSQL Database's resource name. Next, you'll go through a table-creation wizard. First, you'll create the columns of your table:"
  },
  {
    "objectID": "Overview-20",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Adding a NoSQL database",
    "depth": 3,
    "text": "Then, you'll need to specify your indexes. The concept behind \"indexes\", \"partition key\", \"sort key\" and \"global secondary indexes\" are explained in-depth here."
  },
  {
    "objectID": "Overview-21",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Adding a NoSQL database",
    "depth": 3,
    "text": "If you want to configure a Lambda trigger for your Table, you'll have the option. Learn more about this workflow here."
  },
  {
    "objectID": "Overview-22",
    "title": "Overview",
    "description": "Use Amplify CLI to create and manage cloud-connected file & data storage for your app.",
    "slug": "/cli/storage/overview",
    "category": "Amplify CLI",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Adding a NoSQL database",
    "depth": 3,
    "text": "That's it! Your NoSQL Database is set up!"
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-0",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run the command above to override Amplify-generated auth resources including Amazon Cognito user pool, identity pool, user pool groups, and more."
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-1",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The command creates a new overrides.ts file under amplify/backend/auth/<resource-name>/ which provides you the Amplify-generated resources as CDK constructs."
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-2",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Customize Amplify-generated Cognito auth resources",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. For example, to update the temporary password validity days for your Cognito user pool:"
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-3",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Customize Amplify-generated Cognito auth resources",
    "depth": 2,
    "text": "Or add a custom attribute to your Cognito user pool:"
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-4",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Customize Amplify-generated Cognito auth resources",
    "depth": 2,
    "text": "You can override the following auth resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-5",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Customize Amplify-generated Cognito auth resources",
    "depth": 2,
    "text": "|Amplify-generated resource|Description|\n|-|-|\n|customMessageConfirmationBucket|S3 bucket used for custom message triggers|\n|snsRole|SNS role for sending authentication-related messages|\n|userPool|The Cognito user pool that enables user sign-up and sign-in|\n|userPoolClientWeb|A Cognito user pool client for web apps|\n|userPoolClient|A Cognito user pool client for mobile apps|\n|identityPool|A Cognito identity pool to federate identities|\n|identityPoolRoleMap|Role mapping for authenticated and unauthenticated user roles|\n|lambdaConfigPermissions|Permissions for Lambda function to access Cognito user pool and identity pool |\n|lambdaTriggerPermissions|IAM policy attached to Cognito Lambda triggers|\n|userPoolClientLambda|Lambda function to fetch app client secret from user pool client|\n|userPoolClientRole|IAM Role for Lambda function to fetch app client secret from user pool client|\n|userPoolClientLambdaPolicy|IAM Policy for Lambda function to fetch app client secret from user pool client|\n|userPoolClientLogPolicy|IAM Policy to enable CloudWatch logging for Lambda function to fetch app client secret from user pool client|\n|userPoolClientInputs|Custom CloudFormation resource to fetch app client secret from user pool client|\n|hostedUICustomResource|Lambda function to enable Cognito user pool Hosted UI login|\n|hostedUICustomResourcePolicy|IAM Policy for Lambda function to enable Cognito user pool Hosted UI login|\n|hostedUICustomResourceLogPolicy|IAM Policy to enable CloudWatch logging for Lambda function to enable Cognito user pool Hosted UI login|\n|hostedUICustomResourceInputs|Custom CloudFormation resource to enable Cognito user pool Hosted UI login|\n|hostedUIProvidersCustomResource|Lambda function to configure Hosted UI with 3rd party identity providers|\n|hostedUIProvidersCustomResourcePolicy|IAM Policy for Lambda function to configure Hosted UI with 3rd party identity provider|\n|hostedUIProvidersCustomResourceLogPolicy|IAM Policy to enable CloudWatch logging for Lambda function to configure Hosted UI with 3rd party identity provider|\n|hostedUIProvidersCustomResourceInputs|Custom CloudFormation resource to configure Hosted UI with 3rd party identity provider|\n|oAuthCustomResource|Lambda function to enable OAuth|\n|oAuthCustomResourcePolicy|IAM Policy for OAuth custom CloudFormation resource|\n|oAuthCustomResourceLogPolicy|IAM Policy to enable CloudWatch logging for OAuth Lambda function|\n|oAuthCustomResourceInputs|Custom CloudFormation resource to enable OAuth|\n|mfaLambda|Lambda function to enable multi-factor authentication function|\n|mfaLogPolicy|IAM Policy to enable CloudWatch logging for multi-factor authentication Lambda function|\n|mfaLambdaPolicy|IAM Policy for multi-factor authentication Lambda function|\n|mfaLambdaInputs|Custom CloudFormation resource to enable multi-factor authentication|\n|mfaLambdaRole|IAM Execution Role for multi-factor authentication Lambda function|\n|openIdLambda|Lambda function to enable OpenID Connect|\n|openIdLogPolicy|IAM Policy to enable CloudWatch logging for OpenID Connect Lambda function|\n|openIdLambdaIAMPolicy|IAM Policy to enable OpenID Connect Lambda function|\n|openIdLambdaInputs|Custom CloudFormation resource to enable OpenID Connect|\n|openIdLambdaRole|Lambda Execution Role for OpenID Connect Lambda function|"
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-6",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Customize Amplify-generated Cognito user group resources",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. For example to add a path to the lambda execution role that facilitates the user pool group to role mapping:"
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-7",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Customize Amplify-generated Cognito user group resources",
    "depth": 2,
    "text": "You can override the following user pool group resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-8",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Customize Amplify-generated Cognito user group resources",
    "depth": 2,
    "text": "|Amplify-generated resource|Description|\n|-|-|\n|userPoolGroup|The map of user pool groups|\n|userPoolGroupRole|The map of user pool group roles|\n|roleMapCustomResource|A custom CloudFormation resource to map user pool groups to their roles|\n|lambdaExecutionRole|Lambda execution role for the \"user pool group\"-to-role mapping function|\n|roleMapLambdaFunction|The Lambda function that facilitates the user pool group to role mapping|"
  },
  {
    "objectID": "Override Amplify-generated Cognito resources-9",
    "title": "Override Amplify-generated Cognito resources",
    "description": "The \"amplify override auth\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated Cognito resources as CDK constructs. For example, developers can set auth settings that are not directly available in the Amplify CLI workflow, such as the number of valid days for a temporary password.",
    "slug": "/cli/auth/override",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Customize Amplify-generated Cognito auth resources with social providers",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. For example to add social providers to your Cognito user pool:"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-0",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Import existing Amazon Cognito resources into your Amplify project. Get started by running amplify import auth command to search for & import an existing Cognito User Pool & Identity Pool in your account."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-1",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The amplify import auth command will:"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-2",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "automatically populate your Amplify Library configuration files (aws-exports.js, amplifyconfiguration.json) with your chosen Amazon Cognito resource information"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-3",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "provide your designated existing Cognito resource as the authentication & authorization mechanism for all auth-dependent categories (API, Storage and more)"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-4",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "enable Lambda functions to access the chosen Cognito resource if you permit it"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-5",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Make sure to run amplify push to complete the import process and deploy this backend change to the cloud."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-6",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "This feature is particularly useful if you're trying to:"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-7",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "enable Amplify categories (such as API, Storage, and function) for your existing user base;"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-8",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "incrementally adopt Amplify for your application stack;"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-9",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "independently manage Cognito resources while working with Amplify."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-10",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: Amplify does not manage the lifecycle of an imported resource."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-11",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito User Pool",
    "depth": 2,
    "text": "Select the \"Cognito User Pool only\" option when you've run amplify import auth. In order to successfully import your User Pool, your User Pools require at least one app client with the following conditions:"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-12",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito User Pool",
    "depth": 2,
    "text": "A \"Web app client\": an app client without a client secret"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-13",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Cognito User Pool",
    "depth": 2,
    "text": "Run amplify push to complete the import procedure."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-14",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Identity Pool",
    "depth": 2,
    "text": "Select the \"Cognito User Pool and Identity Pool\" option when you've run amplify import auth. In order to successfully import your Identity Pool, it must have both of the User Pool app clients fulfilling these requirements associated as an authentication provider."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-15",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Identity Pool",
    "depth": 2,
    "text": "Your Identity Pool needs:"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-16",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Identity Pool",
    "depth": 2,
    "text": "an Authenticated Role with a trust relationship to your Identity Pool"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-17",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Identity Pool",
    "depth": 2,
    "text": "an optional Unauthenticated Role if you want to use any guest user access for your Amplify categories. (Example: Guest access for your S3 buckets or REST API endpoints)"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-18",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Identity Pool",
    "depth": 2,
    "text": "These roles are usually automatically configured when you create a new Identity Pool enabling \"Unauthenticated\" access and have a Cognito User Pool as an authentication provider."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-19",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Identity Pool",
    "depth": 2,
    "text": "Amplify CLI will update the policies attached to the roles to ensure Amplify categories function correctly. For example, enabling Storage for authenticated & guest users will add private, protected, public, read and upload permissions for the S3 bucket to the unauthenticated & authenticated role."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-20",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Import an existing Identity Pool",
    "depth": 2,
    "text": "Run amplify push to complete the import procedure."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-21",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Multi-environment support",
    "depth": 2,
    "text": "When you create a new environment through amplify env add, Amplify CLI will assume by default that you're managing your app's Cognito resources outside of an Amplify project. You'll be asked to either import a different Cognito resource or maintain the same Cognito resource for your app's auth category."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-22",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Multi-environment support",
    "depth": 2,
    "text": "If you want to have Amplify manage your auth resources in a new environment, run amplify remove auth to unlink the imported Cognito resource and amplify add auth to create new Amplify-managed auth resources in the new environment."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-23",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Unlink an existing Cognito User Pool or Identity Pool",
    "depth": 2,
    "text": "In order to unlink your existing Cognito resource run amplify remove auth. This will only unlink the Cognito resource referenced from the Amplify project. It will not delete the Cognito resource itself."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-24",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Unlink an existing Cognito User Pool or Identity Pool",
    "depth": 2,
    "text": "Run amplify push to complete the unlink procedure."
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-25",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Add Environmental Variables to Amplify Console Build",
    "depth": 2,
    "text": "In order to successfully build your application with Amplify Console add the following environmental variables to your build environment:"
  },
  {
    "objectID": "Use an existing Cognito User Pool and Identity Pool-26",
    "title": "Use an existing Cognito User Pool and Identity Pool",
    "description": "Configure the Amplify CLI to use existing Amazon Cognito User Pool and Identity Pool resources as an authentication & authorization mechanism for other Amplify categories. (API, Storage, and more)",
    "slug": "/cli/auth/import",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Add Environmental Variables to Amplify Console Build",
    "depth": 2,
    "text": "|Environment Variable|Description|\n|-|-|\n|AMPLIFY_USERPOOL_ID|The ID for the Amazon Cognito user pool imported for auth|\n|AMPLIFY_WEBCLIENT_ID|The ID for the app client to be used by web applications. The app client must be configured with access to the Amazon Cognito user pool specified by the AMPLIFY_USERPOOL_ID environment variable.|\n|AMPLIFY_NATIVECLIENT_ID|The ID for the app client to be used by native applications. The app client must be configured with access to the Amazon Cognito user pool specified by the AMPLIFY_USERPOOL_ID environment variable.|\n|AMPLIFY_IDENTITYPOOL_ID|The ID for the Amazon Cognito identity pool|"
  },
  {
    "objectID": "Admin actions-0",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Admin Actions allow you to execute queries and operations against users and groups in your Cognito user pool."
  },
  {
    "objectID": "Admin actions-1",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For example, the ability to list all users in a Cognito User Pool may provide useful for the administrative panel of an app if the logged-in user is a member of a specific Group called \"Admins\"."
  },
  {
    "objectID": "Admin actions-2",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "This is an advanced feature that is not recommended without an understanding of the underlying architecture. The associated infrastructure which is created is a base designed for you to customize for your specific business needs. We recommend removing any functionality which your app does not require."
  },
  {
    "objectID": "Admin actions-3",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI can setup a REST endpoint with secure access to a Lambda function running with limited permissions to the User Pool if you wish to have these capabilities in your application, and you can choose to expose the actions to all users with a valid account or restrict to a specific User Pool Group."
  },
  {
    "objectID": "Admin actions-4",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Enable Admin Queries",
    "depth": 2,
    "text": "This will configure an API Gateway endpoint with a Cognito Authorizer that accepts an Access Token, which is used by a Lambda function to perform actions against the User Pool. The function is example code which you can use to remove, add, or alter functionality based on your business case by editing it in the amplify/backend/function/AdminQueriesXXX/src directory and running an amplify push to deploy your changes. If you choose to restrict actions to a specific Group, custom middleware in the function will prevent any actions unless the user is a member of that Group."
  },
  {
    "objectID": "Admin actions-5",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "The default routes and their functions, HTTP methods, and expected parameters are below"
  },
  {
    "objectID": "Admin actions-6",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "addUserToGroup: Adds a user to a specific Group. Expects username and groupname in the POST body."
  },
  {
    "objectID": "Admin actions-7",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "removeUserFromGroup: Removes a user from a specific Group. Expects username and groupname in the POST body."
  },
  {
    "objectID": "Admin actions-8",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "confirmUserSignUp: Confirms a users signup. Expects username in the POST body."
  },
  {
    "objectID": "Admin actions-9",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "disableUser: Disables a user. Expects username in the POST body."
  },
  {
    "objectID": "Admin actions-10",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "enableUser: Enables a user. Expects username in the POST body."
  },
  {
    "objectID": "Admin actions-11",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "getUser: Gets specific user details. Expects username as a GET query string."
  },
  {
    "objectID": "Admin actions-12",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "listUsers: Lists all users in the current Cognito User Pool. You can provide an OPTIONAL limit (between 0 and 60) as a GET query string, which returns a NextToken that can be provided as a token query string for pagination."
  },
  {
    "objectID": "Admin actions-13",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "listGroups: Lists all groups in the current Cognito User Pool. You can provide an OPTIONAL limit (between 0 and 60) as a GET query string, which returns a NextToken that can be provided as a token query string for pagination."
  },
  {
    "objectID": "Admin actions-14",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "listGroupsForUser: Lists groups to which current user belongs to. Expects username as a GET query string. You can provide an OPTIONAL limit (between 0 and 60) as a GET query string, which returns a NextToken that can be provided as a token query string for pagination."
  },
  {
    "objectID": "Admin actions-15",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "listUsersInGroup: Lists users that belong to a specific group. Expects groupname as a GET query string. You can provide an OPTIONAL limit (between 0 and 60) as a GET query string, which returns a NextToken that can be provided as a token query string for pagination."
  },
  {
    "objectID": "Admin actions-16",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Admin Queries API",
    "depth": 2,
    "text": "signUserOut: Signs a user out from User Pools, but only if the call is originating from that user. Expects username in the POST body."
  },
  {
    "objectID": "Admin actions-17",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "To leverage this functionality in your app you would call the appropriate route from Amplify.API after signing in. The following example adds the user \"richard\" to the Editors Group and then list all members of the Editors Group with a pagination limit of 10:"
  },
  {
    "objectID": "Admin actions-18",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "Initialize Amplify API. Refer to Getting Started with Amplify.API for REST for more details."
  },
  {
    "objectID": "Admin actions-19",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "You should have the initialization code including the imports:"
  },
  {
    "objectID": "Admin actions-20",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "and code that adds AWSCognitoAuthPlugin, AWSAPIPlugin, and configures it."
  },
  {
    "objectID": "Admin actions-21",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "Sign in using Amplify.Auth. See Amplify.Auth to learn more about signing up and signing in a user."
  },
  {
    "objectID": "Admin actions-22",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "Use the following in your app to add a user to the Group."
  },
  {
    "objectID": "Admin actions-23",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "Use the following to list the users in the Group."
  },
  {
    "objectID": "Admin actions-24",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "Note: Cognito User Pool with HostedUI"
  },
  {
    "objectID": "Admin actions-25",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "The Admin Queries API configuration in amplifyconfiguration.json will have the endpoint's authorization type set to AMAZON_COGNITO_USER_POOLS. With this authorization type, Amplify.API will perform the request with the access token. However, when using HostedUI, the app may get unauthorized responses despite being signed in, and will require using the ID Token. Set the authorizationType to \"NONE\" and add a custom interceptor to return the ID Token."
  },
  {
    "objectID": "Admin actions-26",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "If you perform additional updates to your resources using Amplify CLI, the authorizationType will be reverted back to AMAZON_COGNITO_USER_POOLS. Make sure to update this back to NONE."
  },
  {
    "objectID": "Admin actions-27",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "Add a custom interceptor to the API"
  },
  {
    "objectID": "Admin actions-28",
    "title": "Admin actions",
    "description": "Learn how to expose Administrative actions for your Cognito User Pool to your end user applications.",
    "slug": "/cli/auth/admin",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Example",
    "depth": 2,
    "text": "Set up the custom interceptor to return the ID token for the request."
  },
  {
    "objectID": "User groups-0",
    "title": "User groups",
    "description": "Create logical groups in Cognito User Pools and assign permissions to access resources in Amplify categories with the Amplify CLI.",
    "slug": "/cli/auth/groups",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can create logical groups in Cognito User Pools and assign permissions to access resources in Amplify categories with the CLI, as well as define the relative precedence of one group to another. This can be useful for defining which users should be part of \"Admins\" vs \"Editors\", and if the users in a Group should be able to just write or write & read to a resource (AppSync, API Gateway, S3 bucket, etc). You can also use these with @auth Static Groups in the GraphQL Transformer. Precedence helps remove any ambiguity on permissions if a user is in multiple Groups."
  },
  {
    "objectID": "User groups-1",
    "title": "User groups",
    "description": "Create logical groups in Cognito User Pools and assign permissions to access resources in Amplify categories with the Amplify CLI.",
    "slug": "/cli/auth/groups",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Create user groups",
    "depth": 2,
    "text": "When asked as in the example above, you can press Shift on your keyboard along with the LEFT and RIGHT arrows to move a Group higher or lower in precedence. Once complete you can open amplify/backend/auth/userPoolGroups/user-pool-group-precedence.json to manually set the precedence."
  },
  {
    "objectID": "User groups-2",
    "title": "User groups",
    "description": "Create logical groups in Cognito User Pools and assign permissions to access resources in Amplify categories with the Amplify CLI.",
    "slug": "/cli/auth/groups",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Group access controls",
    "depth": 2,
    "text": "For certain Amplify categories you can restrict access with CRUD (Create, Read, Update, and Delete) permissions, setting different access controls for authenticated users vs Guests (e.g. Authenticated users can read & write to S3 buckets while Guests can only read). You can further restrict this to apply different permissions conditionally depending on if a logged-in user is part of a specific User Pool Group."
  },
  {
    "objectID": "User groups-3",
    "title": "User groups",
    "description": "Create logical groups in Cognito User Pools and assign permissions to access resources in Amplify categories with the Amplify CLI.",
    "slug": "/cli/auth/groups",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Group access controls",
    "depth": 2,
    "text": "The above example uses a combination of permissions where users in the \"Admins\" Group have full access, \"Guest\" users can only read, and \"Authenticated\" users who are not a part of any group have create, update, and read access. Amplify will configure the corresponding IAM policy on your behalf. Advanced users can additionally set permissions by adding a customPolicies key to amplify/backend/auth/userPoolGroups/user-pool-group-precedence.json with custom IAM policy for a Group. This will attach an inline policy on the IAM role associated to this Group during deployment. Note  this is an advanced feature and only suitable if you have an understanding of AWS resources. For instance perhaps you wanted users in the \"Admins\" group to have the ability to Create an S3 bucket:"
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "The Amplify CLI supports configuring many different Authentication and Authorization workflows, including simple and advanced configurations of the login options, triggering Lambda functions during different lifecycle events, and administrative actions which you can optionally expose to your applications.",
    "slug": "/cli/auth/overview",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI supports configuring many different Authentication and Authorization workflows, including simple and advanced configurations of the login options, triggering Lambda functions during different lifecycle events, and administrative actions which you can optionally expose to your applications."
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "The Amplify CLI supports configuring many different Authentication and Authorization workflows, including simple and advanced configurations of the login options, triggering Lambda functions during different lifecycle events, and administrative actions which you can optionally expose to your applications.",
    "slug": "/cli/auth/overview",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Configuring auth without social providers",
    "depth": 2,
    "text": "The easiest way to get started is to leverage the default configuration which is optimized for the most common use cases and choices."
  },
  {
    "objectID": "Overview-2",
    "title": "Overview",
    "description": "The Amplify CLI supports configuring many different Authentication and Authorization workflows, including simple and advanced configurations of the login options, triggering Lambda functions during different lifecycle events, and administrative actions which you can optionally expose to your applications.",
    "slug": "/cli/auth/overview",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Configuring auth with social providers",
    "depth": 2,
    "text": "Once your User Pool is functioning, you can enable more configurations such as federation with Facebook, Google, or Login with Amazon. You can also configure more advanced settings by selecting Manual Configuration."
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "The Amplify CLI supports configuring many different Authentication and Authorization workflows, including simple and advanced configurations of the login options, triggering Lambda functions during different lifecycle events, and administrative actions which you can optionally expose to your applications.",
    "slug": "/cli/auth/overview",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Configuring auth with social providers",
    "depth": 2,
    "text": "Select Default configuration with Social Provider (Federation):"
  },
  {
    "objectID": "Overview-4",
    "title": "Overview",
    "description": "The Amplify CLI supports configuring many different Authentication and Authorization workflows, including simple and advanced configurations of the login options, triggering Lambda functions during different lifecycle events, and administrative actions which you can optionally expose to your applications.",
    "slug": "/cli/auth/overview",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Configuring auth with social providers",
    "depth": 2,
    "text": "You can find more documentation on adding each social provider in the Libraries section of the docs."
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "The Amplify CLI supports configuring many different Authentication and Authorization workflows, including simple and advanced configurations of the login options, triggering Lambda functions during different lifecycle events, and administrative actions which you can optionally expose to your applications.",
    "slug": "/cli/auth/overview",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Re-use an existing Cognito User Pool and Identity Pool",
    "depth": 2,
    "text": "Instead of letting Amplify CLI create a new set of auth resources, you can also import your existing Cognito resources. These resources can be used to auto-generate the Amplify library configuration files, used as an auth dependency for other categories and provided access permissions from within Lambda functions."
  },
  {
    "objectID": "Overview-6",
    "title": "Overview",
    "description": "The Amplify CLI supports configuring many different Authentication and Authorization workflows, including simple and advanced configurations of the login options, triggering Lambda functions during different lifecycle events, and administrative actions which you can optionally expose to your applications.",
    "slug": "/cli/auth/overview",
    "category": "Amplify CLI",
    "subcategory": "Authentication",
    "type": "article",
    "heading": "Re-use an existing Cognito User Pool and Identity Pool",
    "depth": 2,
    "text": "Run amplify import auth or read the guide on how to import existing Cognito resources."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-0",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run the command above to override Amplify-generated Amazon API Gateway resources."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-1",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The command creates a new overrides.ts file under amplify/backend/api/<resource-name>/ which provides you the Amplify-generated resources as CDK constructs."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-2",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Apply all the overrides in the override(...) function. For example:"
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-3",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "To change a field on a particular path, use resources.restApi.body.paths[\\<route-path\\>]:"
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-4",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can override the following REST API resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-5",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "|Amplify-generated resource|Description|\n|-|-|\n|restApi|The Amazon API Gateway REST API created by amplify add api|\n|deploymentResource|The deployment resource that deploys the REST API above to a stage.|\n|policies|User pool group-related IAM policy. Example: resources.policies[\"/items\"].groups[\"Admin\"]"
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-6",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "Amazon Cognito User Pools is a common service to use alongside API Gateway when\nadding user Sign-Up and Sign-In to your application. If your application needs to\ninteract with other AWS services, such as S3, on behalf of the user who invoked\nan endpoint, you will need to use IAM credentials with Cognito Identity Pools."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-7",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "Amplify CLI does not support Cognito User Pool authorizers out of the box. To\nimplement this functionality, you must override your REST API and add a Cognito\nUser Pool authorizer yourself by adding the following code into the\noverride(...) function, in order."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-8",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "First, assuming the Cognito User Pool you would like to use as an authorizer is\nthe Auth resource configured with your Amplify Project, create a parameter that resolves\nto its User Pool ID:"
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-9",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "Make sure to replace <your auth name here> with the name of your auth resource.\nThis is the name of the folder in amplify/backend/auth that was created when\nyou added an Auth resource to your Amplify project."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-10",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "Now, create a Cognito User Pool Authorizer corresponding to the User Pool\nby modifying the security definition of your REST API:"
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-11",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "Finally, update the security methods for all of the paths in your REST API to\nuse this new Cognito User Pool authorizer. We also add the Authorization header\nas a parameter on incoming requests for these paths as a place for users to provide\ntheir Cognito User ID Tokens."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-12",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "Note that you can add more advanced logic to only use the Cognito User Pool authorizer\nwith some paths or methods."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-13",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "When performing requests to your REST API, make sure to add the Authorization\nheader with an ID Token provided by Cognito."
  },
  {
    "objectID": "Override Amplify-generated API Gateway resources-14",
    "title": "Override Amplify-generated API Gateway resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated API Gateway resources as CDK constructs. For example, developers can configure a custom description or the minimum compression size of their REST API.",
    "slug": "/cli/restapi/override",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Add a Cognito User Pool authorizer to your REST API",
    "depth": 2,
    "text": "Requests to endpoints are now populated with information from Cognito about the\nuser who is invoking the\nendpoint, and you can reuse the verified ID Token in your endpoint resolvers to assume\nthe identity of the user for accessing other services like AWS AppSync or S3."
  },
  {
    "objectID": "Test-0",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API from the terminal",
    "depth": 2,
    "text": "If Guest users have access to your REST API you can test it from the terminal using Curl."
  },
  {
    "objectID": "Test-1",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API from the terminal",
    "depth": 2,
    "text": "Curl is a command-line tool that lets you transfer data to and from a server using various protocols."
  },
  {
    "objectID": "Test-2",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API from the terminal",
    "depth": 2,
    "text": "Curl is available in many distributions including Mac, Windows and Linux. Follow the install instructions in the docs."
  },
  {
    "objectID": "Test-3",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "POST method example",
    "depth": 3,
    "text": "Important! Testing methods using production endpoints may result in changes to resources that cannot be undone."
  },
  {
    "objectID": "Test-4",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with Amplify Mock",
    "depth": 2,
    "text": "Amplify CLI allows you to quickly test your REST APIs by using the amplify mock function command."
  },
  {
    "objectID": "Test-5",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with Amplify Mock",
    "depth": 2,
    "text": "Let's test your new REST API using the route below with HTTP Method GET and path /todos?limit=10 which includes a limit query string parameter."
  },
  {
    "objectID": "Test-6",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with Amplify Mock",
    "depth": 2,
    "text": "Important! Testing methods using production endpoints may result in changes to resources that cannot be undone."
  },
  {
    "objectID": "Test-7",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with Amplify Mock",
    "depth": 2,
    "text": "Before you continue, edit the file at {project}/amplify/backend/function/todosLambda/src/event.json and replace its content for the purpose of the test."
  },
  {
    "objectID": "Test-8",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with Amplify Mock",
    "depth": 2,
    "text": "Make sure you have saved the changes and run"
  },
  {
    "objectID": "Test-9",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with Amplify Mock",
    "depth": 2,
    "text": "Select the following options:"
  },
  {
    "objectID": "Test-10",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with Amplify Mock",
    "depth": 2,
    "text": "Provide the path to the event JSON object relative to {project}/amplify/backend/function/todosLambda src/event.json"
  },
  {
    "objectID": "Test-11",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with API Gateway console",
    "depth": 2,
    "text": "Let's test your new REST API using the route below with HTTP Method GET and path /todos?limit=10 which includes a limit query string parameter."
  },
  {
    "objectID": "Test-12",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with API Gateway console",
    "depth": 2,
    "text": "Important! Testing methods with the API Gateway console may result in changes to resources that cannot be undone."
  },
  {
    "objectID": "Test-13",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with API Gateway console",
    "depth": 2,
    "text": "Sign in to the API Gateway console at https://console.aws.amazon.com/apigateway."
  },
  {
    "objectID": "Test-14",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with API Gateway console",
    "depth": 2,
    "text": "Choose the todosApi REST API."
  },
  {
    "objectID": "Test-15",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with API Gateway console",
    "depth": 2,
    "text": "In the Resources pane, choose the method you want to test. Pick ANY right under /todos."
  },
  {
    "objectID": "Test-16",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with API Gateway console",
    "depth": 2,
    "text": "In the Method Execution pane, in the Client box, choose TEST. Choose the GET method. Add limit=10 to the Query String {todos} field."
  },
  {
    "objectID": "Test-17",
    "title": "Test",
    "description": "Testing the REST API.",
    "slug": "/cli/restapi/testing",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Test the API with API Gateway console",
    "depth": 2,
    "text": "Choose Test to run the test for GET /todos?limit=10. The following information will be displayed: request, status, latency, response body, response headers and logs."
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify CLI provides a guided workflow to easily add, develop, test and manage REST APIs to access your AWS resources from your web and mobile applications."
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "A REST API or HTTP endpoint will be composed by one or more paths. Eg: /items. Each path will use a Lambda function to handle HTTP requests and responses. Amplify CLI creates a single resource in Amazon API Gateway so you can handle all routes, HTTP Methods and paths, with a single Lambda function via a Lambda Proxy integration. HTTP proxy integrations forward all requests and responses directly through to your HTTP endpoint."
  },
  {
    "objectID": "Overview-2",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI let's you choose either an existing Lambda function or create a new one. To kickstart your implementation, you can choose between the following templates:"
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Serverless ExpressJS function"
  },
  {
    "objectID": "Overview-4",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "CRUD function for DynamoDB"
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Lambda templates use serverless-express and provide the building blocks to start your REST API development."
  },
  {
    "objectID": "Overview-6",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "See the list of all supported Lambda runtimes."
  },
  {
    "objectID": "Overview-7",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI allows you to restrict REST API access to"
  },
  {
    "objectID": "Overview-8",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Only authenticated users; or"
  },
  {
    "objectID": "Overview-9",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Authenticated and Guest users"
  },
  {
    "objectID": "Overview-10",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "User Pool Groups"
  },
  {
    "objectID": "Overview-11",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "See a description of these user types below"
  },
  {
    "objectID": "Overview-12",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "| User type | Description |\n|---|---|\n| Authenticated user | User needs to sign in to use the REST API |\n| Guest user | User doesn't need to sign in to use the REST API |\n| User Pool Group | User needs to sign in and belong to the User Pool Group to use the REST API|"
  },
  {
    "objectID": "Overview-13",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For each user type you can further specify what actions it has access to."
  },
  {
    "objectID": "Overview-14",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "| User type  | Actions | Http Method | Authentication Provider  |\n|---|---|---|---|\n| Authenticated user | create, read, update, delete | POST, GET, PUT, PATCH, DELETE | Amazon Cognito |\n| Guest user | create, read, update, delete | POST, GET, PUT, PATCH, DELETE | Amazon Cognito |\n| User Pool Group | create, read, update, delete | POST, GET, PUT, PATCH, DELETE | Amazon Cognito |"
  },
  {
    "objectID": "Overview-15",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "REST APIs have support for multiple environments (e.g. dev, qa, and prod). This means that you can easily isolate different versions of your REST API by using different Amplify environments."
  },
  {
    "objectID": "Overview-16",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Because Amplify environments could be in separate AWS accounts, we cannot use the environment feature of API Gateway. Each Amplify environment will have a separate API Gateway resource associated with it. For example:"
  },
  {
    "objectID": "Overview-17",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Navigate into the root of a JavaScript, iOS, or Android project and run:"
  },
  {
    "objectID": "Overview-18",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Follow the wizard to create a new app. After finishing the wizard run:"
  },
  {
    "objectID": "Overview-19",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Select the following options:"
  },
  {
    "objectID": "Overview-20",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Please select from one of the below mentioned services: REST"
  },
  {
    "objectID": "Overview-21",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Provide a friendly name for your resource to be used as a label for this category in the project: itemsApi"
  },
  {
    "objectID": "Overview-22",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Provide a path (e.g., /book/): /items"
  },
  {
    "objectID": "Overview-23",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "This will be the configuration for /items path in API Gateway:"
  },
  {
    "objectID": "Overview-24",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "By default Amplify CLI creates a greedy path variable /items/{proxy+} that catches all child resources for a path and forwards them to your Lambda. This will match all child routes including /items/id and /items/object/id."
  },
  {
    "objectID": "Overview-25",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Choose a Lambda source Create a new Lambda function"
  },
  {
    "objectID": "Overview-26",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Provide a friendly name for your resource to be used as a label for this category in the project: itemsLambda"
  },
  {
    "objectID": "Overview-27",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Provide the AWS Lambda function name: itemsLambda"
  },
  {
    "objectID": "Overview-28",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Choose the runtime that you want to use: NodeJS"
  },
  {
    "objectID": "Overview-29",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Choose the function template that you want to use: Serverless ExpressJS function"
  },
  {
    "objectID": "Overview-30",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "The Lambda function template Serverless ExpressJS function implements route handlers for GET, POST, PUT and DELETE Http Methods and paths for /items and /items/*. Some possible routes examples include:"
  },
  {
    "objectID": "Overview-31",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Do you want to access other resources in this project from your Lambda function? No"
  },
  {
    "objectID": "Overview-32",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Do you want to invoke this function on a recurring schedule? No"
  },
  {
    "objectID": "Overview-33",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Do you want to configure Lambda layers for this function? No"
  },
  {
    "objectID": "Overview-34",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Do you want to edit the local lambda function now? Yes"
  },
  {
    "objectID": "Overview-35",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "We are not going to change this template but it's good that you have it open as you follow the next steps."
  },
  {
    "objectID": "Overview-36",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Press enter to continue"
  },
  {
    "objectID": "Overview-37",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Restrict API access Yes"
  },
  {
    "objectID": "Overview-38",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Who should have access? Authenticated and Guest users"
  },
  {
    "objectID": "Overview-39",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "What kind of access do you want for Authenticated users? create, read, update, delete"
  },
  {
    "objectID": "Overview-40",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "What kind of access do you want for Guest users? read"
  },
  {
    "objectID": "Overview-41",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "When configuration of your API is complete, the CLI displays a message confirming that you have configured local CLI metadata for this category. You can confirm this by running amplify status. Finally deploy your changes to the cloud:"
  },
  {
    "objectID": "Overview-42",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Amplify CLI restricts API access combining Amazon Cognito for authentication and AWS IAM (Identity and Access Management) for granting execution permissions on routes."
  },
  {
    "objectID": "Overview-43",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Do you want to add another path? No"
  },
  {
    "objectID": "Overview-44",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Deploy your new API."
  },
  {
    "objectID": "Overview-45",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "At the end of this command you can take note of your new REST API url."
  },
  {
    "objectID": "Overview-46",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "REST APIs follow this pattern https://{restapi-id}.execute-api.{region}.amazonaws.com/{environment}/{path}."
  },
  {
    "objectID": "Overview-47",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create a REST API",
    "depth": 2,
    "text": "Let's see an overview of all the resources created by Amplify CLI."
  },
  {
    "objectID": "Overview-48",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create REST API and restrict specific routes to specific User Pool Groups",
    "depth": 2,
    "text": "If your app uses User Pool Groups to manage different user types and would like to restrict access of specific routes to specific User Pool Groups. We can accomplish this by the following flow:"
  },
  {
    "objectID": "Overview-49",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create REST API and restrict specific routes to specific User Pool Groups",
    "depth": 2,
    "text": "Create API route."
  },
  {
    "objectID": "Overview-50",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create REST API and restrict specific routes to specific User Pool Groups",
    "depth": 2,
    "text": "Add API route handler function."
  },
  {
    "objectID": "Overview-51",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create REST API and restrict specific routes to specific User Pool Groups",
    "depth": 2,
    "text": "Restrict-access to the API route to the User Pool Group."
  },
  {
    "objectID": "Overview-52",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create REST API and restrict specific routes to specific User Pool Groups",
    "depth": 2,
    "text": "The following example flow assumes the existence of two User Pool Groups : AdminUsers and GuestUsers for a Book store.\nThe app would like to limit admin functionality like updating book records to the AdminUsers User Pool Group,\nwhile borrowing and returning books would be limited to the GuestUsers User Pool Group."
  },
  {
    "objectID": "Overview-53",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create REST API and restrict specific routes to specific User Pool Groups",
    "depth": 2,
    "text": "Path : /book/admin is restricted to AdminUsers and commands are handled by the bookAdminHandler lambda function"
  },
  {
    "objectID": "Overview-54",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create REST API and restrict specific routes to specific User Pool Groups",
    "depth": 2,
    "text": "Path : /book/guest is restricted to GuestUsers and commands are handled by the bookGuestHandler lambda function"
  },
  {
    "objectID": "Overview-55",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Create REST API and restrict specific routes to specific User Pool Groups",
    "depth": 2,
    "text": "At the end of this command you can verify the routes and their respective User Pool Group restrictions in the cli-inputs.json file at the following path."
  },
  {
    "objectID": "Overview-56",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "REST endpoint that triggers new Lambda functions",
    "depth": 2,
    "text": "During the CLI setup, you'll be guided through to create a new Lambda function with a predefined serverless-express template with routing enabled for your REST API paths."
  },
  {
    "objectID": "Overview-57",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "REST endpoint that triggers existing Lambda functions",
    "depth": 2,
    "text": "During the CLI setup, you'll be guided through to use your own Lambda functions which you've initialized as a part of your CLI project using the amplify add function command. This would allow you to have custom logic in your Lambda function and not use the predefined serverless-express templates generated by the CLI as in the examples above."
  },
  {
    "objectID": "Overview-58",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Set up a REST API with Amazon DynamoDB",
    "depth": 2,
    "text": "During the CLI setup, you'll be guided through to create a new Lambda function with a predefined serverless-express template with routing enabled for your REST API paths with support for CRUD operations to DynamoDB tables (which you can create by following the CLI prompts or use the tables which you've already configured using the amplify add storage command)."
  },
  {
    "objectID": "Overview-59",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Set up a REST API with Amazon DynamoDB",
    "depth": 2,
    "text": "In the example above with /items path, the following API will be created for you:"
  },
  {
    "objectID": "Overview-60",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Set up a REST API with Amazon DynamoDB",
    "depth": 2,
    "text": "GET /items/[ID] will return a list containing the item at the [ID]. If the item does not exist then an empty array is returned."
  },
  {
    "objectID": "Overview-61",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Set up a REST API with Amazon DynamoDB",
    "depth": 2,
    "text": "GET /items/object/[ID] will return a single item at [ID]. If the item does not exist then an empty object is returned."
  },
  {
    "objectID": "Overview-62",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Set up a REST API with Amazon DynamoDB",
    "depth": 2,
    "text": "PUT /items with your item in the request body will create or update the item."
  },
  {
    "objectID": "Overview-63",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Set up a REST API with Amazon DynamoDB",
    "depth": 2,
    "text": "POST /items with your item in the request body will create or update the item."
  },
  {
    "objectID": "Overview-64",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Set up a REST API with Amazon DynamoDB",
    "depth": 2,
    "text": "DELETE /items/object/[ID] will delete the item."
  },
  {
    "objectID": "Overview-65",
    "title": "Overview",
    "description": "Use Amplify CLI's simple guided workflow to add REST APIs to cloud-based web and mobile apps.",
    "slug": "/cli/restapi/restapi",
    "category": "Amplify CLI",
    "subcategory": "API (REST)",
    "type": "article",
    "heading": "Set up a REST API with Amazon DynamoDB",
    "depth": 2,
    "text": "When you have a sort key, you can append it to the end of the path, for example: GET /items/object/[ID]/[SORT_KEY_ID]"
  },
  {
    "objectID": "Examples and solutions-0",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "In this \"Warehouse management system\" example, you will learn how to configure common access patterns for your app. This example has the following types:"
  },
  {
    "objectID": "Examples and solutions-1",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Warehouse"
  },
  {
    "objectID": "Examples and solutions-2",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Product"
  },
  {
    "objectID": "Examples and solutions-3",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Inventory"
  },
  {
    "objectID": "Examples and solutions-4",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Employee"
  },
  {
    "objectID": "Examples and solutions-5",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "AccountRepresentative"
  },
  {
    "objectID": "Examples and solutions-6",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Customer"
  },
  {
    "objectID": "Examples and solutions-7",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "These types have the following common access patterns:"
  },
  {
    "objectID": "Examples and solutions-8",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Look up employee details by employee ID"
  },
  {
    "objectID": "Examples and solutions-9",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Query employee details by employee name"
  },
  {
    "objectID": "Examples and solutions-10",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Find an employee's phone number(s)"
  },
  {
    "objectID": "Examples and solutions-11",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Find a customer's phone number(s)"
  },
  {
    "objectID": "Examples and solutions-12",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get orders for a given customer within a given date range"
  },
  {
    "objectID": "Examples and solutions-13",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Show all open orders within a given date range across all customers"
  },
  {
    "objectID": "Examples and solutions-14",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "See all employees recently hired"
  },
  {
    "objectID": "Examples and solutions-15",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Find all employees working in a given warehouse"
  },
  {
    "objectID": "Examples and solutions-16",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get all items on order for a given product"
  },
  {
    "objectID": "Examples and solutions-17",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get current inventories for a given product at all warehouses"
  },
  {
    "objectID": "Examples and solutions-18",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get customers by account representative"
  },
  {
    "objectID": "Examples and solutions-19",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get orders by account representative and date"
  },
  {
    "objectID": "Examples and solutions-20",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get all items on order for a given product"
  },
  {
    "objectID": "Examples and solutions-21",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get all employees with a given job title"
  },
  {
    "objectID": "Examples and solutions-22",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get inventory by product and warehouse"
  },
  {
    "objectID": "Examples and solutions-23",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get total product inventory"
  },
  {
    "objectID": "Examples and solutions-24",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Get account representatives ranked by order total and sales period"
  },
  {
    "objectID": "Examples and solutions-25",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "The following schema introduces the required indexes and relationships so that we can support these access patterns:"
  },
  {
    "objectID": "Examples and solutions-26",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Warehouse Management System",
    "depth": 2,
    "text": "Now that we have the schema created, let's create the items in the database that we will be operating against:"
  },
  {
    "objectID": "Examples and solutions-27",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "1. Look up employee details by employee ID",
    "depth": 3,
    "text": "This can simply be done by querying the employee model with an employee ID, no @primaryKey or @index need to be explicitly specified to make this work."
  },
  {
    "objectID": "Examples and solutions-28",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "2. Query employee details by employee name",
    "depth": 3,
    "text": "The @index byName on the Employee type makes this access-pattern feasible because under the hood an index is created and a query is used to match against the name field. We can use this query:"
  },
  {
    "objectID": "Examples and solutions-29",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "3. Find an Employee’s phone number",
    "depth": 3,
    "text": "Either one of the previous queries would work to find an employee’s phone number as long as one has their ID or name."
  },
  {
    "objectID": "Examples and solutions-30",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "4. Find a customer’s phone number",
    "depth": 3,
    "text": "A similar query to those given above but on the Customer model would give you a customer’s phone number."
  },
  {
    "objectID": "Examples and solutions-31",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "5. Get orders for a given customer within a given date range",
    "depth": 3,
    "text": "There is a one-to-many relation that lets all the orders of a customer be queried."
  },
  {
    "objectID": "Examples and solutions-32",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "5. Get orders for a given customer within a given date range",
    "depth": 3,
    "text": "This relationship is created by having the @index name byCustomerByDate on the Order model that is queried by the @hasMany relationship on the orders field of the Customer model."
  },
  {
    "objectID": "Examples and solutions-33",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "5. Get orders for a given customer within a given date range",
    "depth": 3,
    "text": "A sort key with the date is used. What this means is that the GraphQL resolver can use predicates like Between to efficiently search the date range rather than scanning all records in the database and then filtering them out."
  },
  {
    "objectID": "Examples and solutions-34",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "5. Get orders for a given customer within a given date range",
    "depth": 3,
    "text": "The query one would need to get the orders to a customer within a date range would be:"
  },
  {
    "objectID": "Examples and solutions-35",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "6. Show all open orders within a given date range across all customers",
    "depth": 3,
    "text": "The @index byCustomerByStatusByDate enables you to run a query that would work for this access pattern."
  },
  {
    "objectID": "Examples and solutions-36",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "6. Show all open orders within a given date range across all customers",
    "depth": 3,
    "text": "In this example, a composite sort key (combination of two or more keys) with the status and date is used. What this means is that the unique identifier of a record in the database is created by concatenating these two fields (status and date) together, and then the GraphQL resolver can use predicates like Between or Contains to efficiently search the unique identifier for matches rather than scanning all records in the database and then filtering them out."
  },
  {
    "objectID": "Examples and solutions-37",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "7. See all employees hired recently",
    "depth": 3,
    "text": "Having @index(name: \"newHire\", fields: [\"newHire\", \"id\"]) on the Employee model allows one to query by whether an employee has been hired recently."
  },
  {
    "objectID": "Examples and solutions-38",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "7. See all employees hired recently",
    "depth": 3,
    "text": "We can also query and have the results returned by start date by using the employeesNewHireByStartDate query:"
  },
  {
    "objectID": "Examples and solutions-39",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "8. Find all employees working in a given warehouse",
    "depth": 3,
    "text": "This needs a one to many relationship from warehouses to employees. As can be seen from the @hasMany relationship in the Warehouse model, this relationship uses the byWarehouse index on the Employee model. The relevant query would look like this:"
  },
  {
    "objectID": "Examples and solutions-40",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "9. Get all items on order for a given product",
    "depth": 3,
    "text": "This access-pattern would use a one-to-many relation from products to orders. With this query we can get all orders of a given product:"
  },
  {
    "objectID": "Examples and solutions-41",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "10. Get current inventories for a product at all warehouses",
    "depth": 3,
    "text": "The query needed to get the inventories of a product in all warehouses would be:"
  },
  {
    "objectID": "Examples and solutions-42",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "11. Get customers by account representative",
    "depth": 3,
    "text": "This uses a has-many relationship between account representatives and customers:"
  },
  {
    "objectID": "Examples and solutions-43",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "11. Get customers by account representative",
    "depth": 3,
    "text": "The query needed would look like this:"
  },
  {
    "objectID": "Examples and solutions-44",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "12. Get orders by account representative and date",
    "depth": 3,
    "text": "As can be seen in the AccountRepresentative model this relationship uses the byRepresentativebyDate field on the Order model to create the connection needed. The query needed would look like this:"
  },
  {
    "objectID": "Examples and solutions-45",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "13. Get all items on order for a given product",
    "depth": 3,
    "text": "This is the same as number 9."
  },
  {
    "objectID": "Examples and solutions-46",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "14. Get all employees with a given job title",
    "depth": 3,
    "text": "Using the byTitle @index makes this access pattern quite easy."
  },
  {
    "objectID": "Examples and solutions-47",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "15. Get inventory by product by warehouse",
    "depth": 3,
    "text": "Here having the inventories be held in a separate model is particularly useful since this model can have its own partition key and sort key such that the inventories themselves can be queried as is needed for this access-pattern."
  },
  {
    "objectID": "Examples and solutions-48",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "15. Get inventory by product by warehouse",
    "depth": 3,
    "text": "A query on this model would look like this:"
  },
  {
    "objectID": "Examples and solutions-49",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "15. Get inventory by product by warehouse",
    "depth": 3,
    "text": "We can also get all inventory from an individual warehouse by using the itemsByWarehouseID query created by the byWarehouseID key:"
  },
  {
    "objectID": "Examples and solutions-50",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "16. Get total product inventory",
    "depth": 3,
    "text": "How this would be done depends on the use case. If one just wants a list of all inventories in all warehouses, one could just run a list inventories on the Inventory model:"
  },
  {
    "objectID": "Examples and solutions-51",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "17. Get sales representatives ranked by order total and sales period",
    "depth": 3,
    "text": "The sales period is either a date range or maybe even a month or week. Therefore we can set the sales period as a string and query using the combination of salesPeriod and orderTotal. We can also set the sortDirection in order to get the return values from largest to smallest:"
  },
  {
    "objectID": "Examples and solutions-52",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "Sometimes you need to create objects in bulk, rather than creating individual objects sequentially and waiting for all the requests to complete."
  },
  {
    "objectID": "Examples and solutions-53",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "Define your schema with a custom mutation. The custom mutation should not be deployed to AppSync beforehand if following these steps, the CLI will attach its own resolver preventing you from attaching a custom resource this way."
  },
  {
    "objectID": "Examples and solutions-54",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "Create a custom resource for your resolver and use the following code snippets as a guide to get started"
  },
  {
    "objectID": "Examples and solutions-55",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "Follow the steps for creating a custom resolver:"
  },
  {
    "objectID": "Examples and solutions-56",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "Next, install the AppSync dependencies for your custom resource:"
  },
  {
    "objectID": "Examples and solutions-57",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "Use the following template as a starting point for your custom CDK stack, the resolvers must be templated with environment references"
  },
  {
    "objectID": "Examples and solutions-58",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "By using CloudFormation parameters, you contextualize your custom resolvers to the environment you're working with."
  },
  {
    "objectID": "Examples and solutions-59",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "Run amplify push and deploy your API"
  },
  {
    "objectID": "Examples and solutions-60",
    "title": "Examples and solutions",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/examples-and-solutions",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Batch Put Custom Resolver",
    "depth": 3,
    "text": "The full documentation for custom resolvers is available here"
  },
  {
    "objectID": "Troubleshooting-0",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Deploying multiple index changes at once",
    "depth": 2,
    "text": "You can make @index updates on one \"amplify push\". Under the hood, Amplify CLI needs to locally sequence multiple individual deployments to your DynamoDB table because each Global Secondary Index (GSI), managed by @index, change requires time to create the new index."
  },
  {
    "objectID": "Troubleshooting-1",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Deploying multiple index changes at once",
    "depth": 2,
    "text": "If your deployment fails locally when updating multiple GSIs, you'll have the ability to run:"
  },
  {
    "objectID": "Troubleshooting-2",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Deploying multiple index changes at once",
    "depth": 2,
    "text": "amplify push --iterative-rollback to rollback the last-known-good state"
  },
  {
    "objectID": "Troubleshooting-3",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Deploying multiple index changes at once",
    "depth": 2,
    "text": "amplify push --force to rollback the last-known-good state and try redeploying your changes again using."
  },
  {
    "objectID": "Troubleshooting-4",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Deploying multiple index changes at once",
    "depth": 2,
    "text": "If you're running into the error above during amplify push, it is likely that you don't have this feature enabled. To enable multiple GSI updates, set the \"enableIterativeGsiUpdates\" feature flag to true in your amplify/cli.json file."
  },
  {
    "objectID": "Troubleshooting-5",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Backfill OpenSearch index from DynamoDB table",
    "depth": 2,
    "text": "When you add @searchable to a @model type with existing data, then you need to backfill the OpenSearch index. Download the following Python script to help you backfill your OpenSearch index:"
  },
  {
    "objectID": "Troubleshooting-6",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Backfill OpenSearch index from DynamoDB table",
    "depth": 2,
    "text": "DynamoDB to OpenSearch backfill script"
  },
  {
    "objectID": "Troubleshooting-7",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Backfill OpenSearch index from DynamoDB table",
    "depth": 2,
    "text": "The script creates an event stream of your DynamoDB records and sends them to your OpenSearch Index. Execute the script with the following parameters to initiate the backfill:"
  },
  {
    "objectID": "Troubleshooting-8",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Backfill OpenSearch index from DynamoDB table",
    "depth": 2,
    "text": "|Parameter|Description|Required|\n|---------|-----------|--------|\n|--rn   | DynamoDB table region. See AWS Regions for available options |Yes|\n|--tn   | DynamoDB table name. Format: {@model type name}-{AppSync API ID}-{Amplify environment}|Yes|\n|--lf   | ARN of the \"DynamoDB to OpenSearch streaming\" Lambda function. Format: arn:aws:lambda:{region}:{AWS Account ID}:function:amplify-{Amplify app name}-{Amplify environment}-{Random string}-OpenSearchStreamingLambd-{Random string}|Yes|\n|--esarn| ARN of the DynamoDB table stream. Format: arn:aws:dynamodb:{region}:{AWS Account ID}:table/{@model type name}-{AppSync API ID}-{Amplify environment}/stream/{Table creation date}|Yes|\n|--ak   | AWS Access Key ID. This is used to authenticate with your AWS account in case no local AWS profile is set up. | No|\n|--sk   | AWS Secret Access Key. This is used to authenticate with your AWS account in case no local AWS profile is set up. | No|\n|--st   | AWS Session Token. This is used to authenticate with your AWS account in case no local AWS profile is set up. | No|"
  },
  {
    "objectID": "Troubleshooting-9",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Backfill OpenSearch index from DynamoDB table",
    "depth": 2,
    "text": "In the example below, the Post table data in us-west-2 gets backfilled in the OpenSearch index."
  },
  {
    "objectID": "Troubleshooting-10",
    "title": "Troubleshooting",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/troubleshooting",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Index with multiple sort key fields",
    "depth": 2,
    "text": "When you add an @index directive with 2 or more sort key fields, you will need to backfill the new composite sort key for existing data. With @index(sortKeyFields: [\"status\", \"date\"]), you will need to backfill the status#date field with composite key values made up of each object's status and date fields joined by a #. You do not need to backfill data for @index directives with zero to one sort key field(s)."
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-0",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Run the command above to override Amplify-generated GraphQL API resources including AWS AppSync API, Amazon DynamoDB table, Amazon OpenSearch domain, and more."
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-1",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you need to customize a specific Amplify-generated VTL resolver, review Override Amplify-generated resolvers first."
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-2",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The command creates a new overrides.ts file under amplify/backend/api/<resource-name>/ which provides you the Amplify-generated resources as CDK constructs."
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-3",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated AppSync GraphQL API resources",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. For example to enable X-Ray tracing for the AppSync GraphQL API:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-4",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated AppSync GraphQL API resources",
    "depth": 2,
    "text": "You can override the following GraphQL API resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-5",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated AppSync GraphQL API resources",
    "depth": 2,
    "text": "|Amplify-generated resource|Description|\n|-|-|\n|GraphQLAPI|AWS AppSync GraphQL API resource|\n|GraphQLAPIDefaultApiKey|API Key resource for the AppSync GraphQL API|\n|GraphQLAPITransformerSchema|The GraphQL schema that's being deployed. (The output of the GraphQL Transformer)|\n|GraphQLAPINONEDS|A \"none\" data source that is used for requests that don't exit the AppSync API|\n|AmplifyDataStore|The delta sync table used for Amplify DataStore's conflict resolution|\n|AmplifyDataStoreIAMRole|IAM role used to access the delta sync table for DataStore|\n|DynamoDBAccess|IAM policy to access the DynamoDB resources from AppSync|"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-6",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @model directive",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. Pass in the @model type name into resources.models[...] to modify the resources generated for that particular @model type. For example, to enable time-to-live on the Todo @model type's DynamoDB table:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-7",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @model directive",
    "depth": 2,
    "text": "You can override the following @model directive resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-8",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @model directive",
    "depth": 2,
    "text": "|Amplify-generated resource|Description|\n|-|-|\nmodelStack|The nested stack containing all resources for the @model type|\nmodelDDBTable|The DynamoDB table containing the data for this @model type|\nmodelIamRole|IAM role to access the DynamoDB table for this @model type|\nmodelIamRoleDefaultPolicy|IAM policy to access the delta sync table for this @model type in case DataStore is enabled|\ndynamoDBAccess|Default policy associated with the IAM role to access the DynamoDB table for this @model type|\nmodelDatasource|The AppSync DataSource to representing the DynamoDB table|\ninvokeLambdaFunction|IAM policy for Lambda-based conflict resolution function|"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-9",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @model directive",
    "depth": 2,
    "text": "For example, we can override a model generated DynamoDB table configuration."
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-10",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @searchable (OpenSearch) directive",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. For example, to modify the OpenSearch instance count:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-11",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @searchable (OpenSearch) directive",
    "depth": 2,
    "text": "You can override the following @searchable directive resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-12",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @searchable (OpenSearch) directive",
    "depth": 2,
    "text": "|Amplify-generated resource|Description|\n|-|-|\nOpenSearchDataSource|The AppSync data source representing the OpenSearch integration|\nOpenSearchAccessIAMRole|IAM role to access OpenSearch domain|\nOpenSearchAccessIAMRoleDefaultPolicy|IAM policy to access OpenSearch domain|\nOpenSearchDomain|OpenSearch domain containing the @searchable data|\nOpenSearchStreamingLambdaIAMRole|IAM role to stream DynamoDB data to OpenSearch domain|\nOpenSearchStreamingLambdaIAMRoleDefaultPolicy|IAM policy to stream DynamoDB data to OpenSearch domain|\nCloudwatchLogsAccess|IAM policy for granting CloudWatch logs access|\nOpenSearchStreamingLambdaFunction|Lambda function to stream DynamoDB data to OpenSearch domain|\nOpenSearchModelLambdaMapping|Event source mapping for DynamoDB table stream to Lambda function|"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-13",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @predictions directive",
    "depth": 2,
    "text": "Apply all the overrides in the override(...) function. For example, to add a Path to IAM role that facilitates text translation:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-14",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @predictions directive",
    "depth": 2,
    "text": "You can override the following @predictions directive resources that Amplify generates:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-15",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize Amplify-generated resources for @predictions directive",
    "depth": 2,
    "text": "|Amplify-generated resource|Description|\n|-|-|\n|RekognitionDataSource|AppSync HTTP data source to connect to Amazon Rekognition service|\n|RekognitionDataSourceServiceRole|AppSync service role to connect to Amazon Rekognition|\n|TranslateDataSource|AppSync HTTP data source to connect to Amazon Translate service|\n|translateTextAccess|IAM policy to connect to Amazon Translate|\n|LambdaDataSource|AppSync Lambda data source to connect to Amazon Polly|\n|LambdaDataSourceServiceRole|AppSync service role to connect to Lambda function calling Amazon Polly|\n|LambdaDataSourceServiceRoleDefaultPolicy|IAM policy for AppSync to connect to Lambda function calling Amazon Polly|\n|TranslateDataSourceServiceRole|AppSync service role to connect to Amazon Translate|\n|predictionsLambdaIAMRole|IAM role for Lambda function calling Amazon Polly|\n|predictionsLambdaFunction|Lambda function calling Amazon Polly|\n|PredictionsLambdaAccess|IAM policy for Lambda function to access Amazon Polly|\n|predictionsIAMRole|IAM role to access s3 bucket used by @predictions|\n|PredictionsStorageAccess|IAM policy to access S3 bucket used by @predictions|\n|identifyTextAccess|IAM policy to enable Identify Text|\n|identifyLabelsAccess|IAM policy to enable Identify Text|"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-16",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Place AppSync Resolvers in Custom-named Stacks",
    "depth": 2,
    "text": "If you have a particularly large GraphQL schema, you may run into issues with too many resources defined in a stack. The most common case where this happens is in the ConnectionStack which contains the resolvers for all of the relational directives in the schema."
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-17",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Place AppSync Resolvers in Custom-named Stacks",
    "depth": 2,
    "text": "Creating a stack mapping does not create an additional root stack for the Amplify environment. All mapped stacks will still be placed under the existing Amplify environment root stack.\nTo map a resolver to a different stack, update <project root>/amplify/api/<api name>/transform.conf.json with a \"StackMapping\" block. The StackMapping defines a map from resolver logical ID to stack name."
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-18",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Place AppSync Resolvers in Custom-named Stacks",
    "depth": 2,
    "text": "The easiest way to determine a resolver logical ID is to run amplify api gql-compile and note the resolver logical ID in the list of Resources in the generated CloudFormation stack.\nResolvers for model operations will be of the form <Get | List | Create | Update | Delete><model name>Resolver. Resolvers for relational directives are of the form <model name><field name>Resolver."
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-19",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example",
    "depth": 3,
    "text": "Given the following schema:"
  },
  {
    "objectID": "Override Amplify-generated AppSync resources-20",
    "title": "Override Amplify-generated AppSync resources",
    "description": "The \"amplify override api\" command generates a developer-configurable \"overrides\" TypeScript file which provides Amplify-generated AppSync resources as CDK constructs. For example, developers can set api settings that are not directly available in the Amplify CLI workflow, such as X-Ray tracing.",
    "slug": "/cli/graphql/override",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Example",
    "depth": 3,
    "text": "To map the CreatePostResolver and the relational resolvers to a stack named 'MyCustomStack', add the following in transform.conf.json:"
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-0",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "\"Codegen\" generates native code for Swift (iOS), Java (Android), and JavaScript that represent your GraphQL API's data models. It can also generate GraphQL statements (queries, mutations, and subscriptions) so that you don't have to hand code them."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-1",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The design of codegen functionality provides mechanisms to run at different points in your app development lifecycle, including when you create or update an API as well as independently when you want to just update the data fetching requirements of your app but leave your API alone. It additionally allows you to work in a team where the schema is updated or managed by another person. Finally, you can also include the codegen in your build process so that it runs automatically (such as from in Xcode)."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-2",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create API then automatically generate code",
    "depth": 2,
    "text": "You’ll see questions as before, but now it will also automatically ask you if you want to generate GraphQL statements and do codegen. It will also respect the ./app/src/main directory for Android projects. After the AppSync deployment finishes the Swift file will be automatically generated (Android you’ll need to kick off a Gradle Build step) and you can begin using in your app immediately."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-3",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create API then automatically generate code",
    "depth": 2,
    "text": "When you deploy your GraphQL API to the cloud, you are prompted to configure codegen. When a project is configured to generate code with codegen, it stores all the configuration .graphqlconfig.yml file in the root folder of your project. To make changes to the configuration, use amplify configure codegen."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-4",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Modify GraphQL schema, push, then automatically generate code",
    "depth": 2,
    "text": "During development, you might wish to update your GraphQL schema and generated code as part of an iterative dev/test cycle. Modify & save your schema in amplify/backend/api/<apiname>/schema.graphql then run:"
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-5",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Modify GraphQL schema, push, then automatically generate code",
    "depth": 2,
    "text": "Each time you will be prompted to update the code in your API and also ask you if you want to run codegen again as well, including regeneration of the GraphQL statements from the new schema."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-6",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "No API changes, just update GraphQL statements & generate code",
    "depth": 2,
    "text": "One of the benefits of GraphQL is the client can define it's data fetching requirements independently of the API. Amplify codegen supports this by allowing you to modify the selection set (e.g. add/remove fields inside the curly braces) for the GraphQL statements and running type generation again. This gives you fine-grained control over the network requests that your application is making. Modify your GraphQL statements (default in the ./graphql folder unless you changed it) then save the files and run:"
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-7",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "No API changes, just update GraphQL statements & generate code",
    "depth": 2,
    "text": "A new updated Swift file will be created (or run Gradle Build on Android for the same). You can then use the updates in your application code."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-8",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Shared schema, modified elsewhere (e.g. console or team workflows)",
    "depth": 2,
    "text": "Suppose you are working in a team and the schema is updated either from the AWS AppSync console or on another system. Your types are now out of date because your GraphQL statement was generated off an outdated schema. The easiest way to resolve this is to regenerate your GraphQL statements, update them if necessary, and then generate your types again. Modify the schema in the console or on a separate system, then run:"
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-9",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Shared schema, modified elsewhere (e.g. console or team workflows)",
    "depth": 2,
    "text": "You should have newly generated GraphQL statements and Swift code that matches the schema updates. If you ran the second command your types will be updated as well. Alternatively, if you run amplify codegen alone it will perform both of these actions."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-10",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Introspection Schema outside of an initialized project",
    "depth": 2,
    "text": "If you would like to generate statements and types without initializing an amplify project, you can do so by providing your introspection schema named schema.json in your project directory and adding codegen from the same directory. To download your introspection schema from an AppSync api, in the AppSync console go to the schema editor and under \"Export schema\" choose schema.json."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-11",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Introspection Schema outside of an initialized project",
    "depth": 2,
    "text": "Once codegen has been added you can update your introspection schema, then generate statements and types again without re-entering your project information."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-12",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Introspection Schema outside of an initialized project",
    "depth": 2,
    "text": "You can update your project and codegen configuration if required."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-13",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Introspection Schema outside of an initialized project",
    "depth": 2,
    "text": "When generating types, codegen uses GraphQL statements as input. It will generate only the types that are being used in the GraphQL statements."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-14",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify add codegen",
    "depth": 3,
    "text": "The amplify add codegen allows you to add AppSync API created using the AWS console. If you have your API is in a different region then that of your current region, the command asks you to choose the region. If you are adding codegen outside of an initialized amplify project, provide your introspection schema named schema.json in the same directory that you make the add codegen call from.\nNote: If you use the --apiId flag to add an externally created AppSync API, such as one created in the AWS console, you will not be able to manage this API from the Amplify CLI with commands such as amplify api update when performing schema updates. You cannot add an external AppSync API when outside of an initialized project."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-15",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify configure codegen",
    "depth": 3,
    "text": "The amplify configure codegen command allows you to update the codegen configuration after it is added to your project. When outside of an initialized project, you can use this to update your project configuration as well as the codegen configuration."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-16",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify codegen statements",
    "depth": 3,
    "text": "The amplify codegen statements command  generates GraphQL statements(queries, mutation and subscription) based on your GraphQL schema. This command downloads introspection schema every time it is run, but it can be forced to use previously downloaded introspection schema by passing --nodownload flag."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-17",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify codegen types",
    "depth": 3,
    "text": "The amplify codegen types [--nodownload] command generates GraphQL types for Flow and typescript and Swift class in an iOS project. This command downloads introspection schema every time it is run, but it can be forced to use previously downloaded introspection schema by passing --nodownload flag."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-18",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "amplify codegen",
    "depth": 3,
    "text": "The amplify codegen [--nodownload] generates GraphQL statements and types. This command downloads introspection schema every time it is run but it can be forced to use previously downloaded introspection schema by passing --nodownload flag. If you are running codegen outside of an initialized amplify project, the introspection schema named schema.json must be in the same directory that you run amplify codegen from. This command will not download the introspection schema when outside of an amplify project - it will only use the introspection schema provided."
  },
  {
    "objectID": "JavaScript, Java, Swift code generation-19",
    "title": "JavaScript, Java, Swift code generation",
    "description": "Amplify's codegen capabilities generates native code for iOS and Android, as well as the generation of types for Flow and TypeScript. It can also generate GraphQL statements(queries, mutations, and subscriptions).",
    "slug": "/cli/graphql/client-code-generation",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Statement depth",
    "depth": 2,
    "text": "In the below schema there are connections between Comment -> Post -> Blog -> Post -> Comments. When generating statements codegen has a default limit of 2 for depth traversal. But if you need to go deeper than 2 levels you can change the maxDepth parameter either when setting up your codegen or by passing  --maxDepth parameter to codegen"
  },
  {
    "objectID": "Evolving GraphQL schemas-0",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "GraphQL schemas change over the lifecycle of a project. Sometimes these changes include breaking API changes. One such change is renaming a model in the schema, which Amplify offers a way to do while retaining the underlying records for that model."
  },
  {
    "objectID": "Evolving GraphQL schemas-1",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "Amplify supports renaming models in a GraphQL schema by using the @mapsTo directive.\nNormally when renaming a model, Amplify will remove the underlying table for the model and create a new table with the new name. Once a table contains production data that cannot be deleted, @mapsTo can be used to specify the original name. Amplify will use the original name to ensure the underlying DynamoDB tables and other resources point to the existing data.\nOther GraphQL API references to the model will use the new name."
  },
  {
    "objectID": "Evolving GraphQL schemas-2",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "For example, a schema such as:"
  },
  {
    "objectID": "Evolving GraphQL schemas-3",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "becomes:"
  },
  {
    "objectID": "Evolving GraphQL schemas-4",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "Amplify will update all of the GraphQL operations and types to use the name Task, but the Task model will point to the table that Todo was originally using."
  },
  {
    "objectID": "Evolving GraphQL schemas-5",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "@mapsTo cannot be used to point a model to an arbitrarily named table. It can only be used to point a renamed model to it's original name."
  },
  {
    "objectID": "Evolving GraphQL schemas-6",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "@mapsTo can only be used on @model GraphQL types that are backed by a DynamoDB table."
  },
  {
    "objectID": "Evolving GraphQL schemas-7",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "When renaming a model that has relationships with other models, Amplify will automatically map auto-generated foreign key fields to their original name. For example, given:"
  },
  {
    "objectID": "Evolving GraphQL schemas-8",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "Amplify will automatically add a field named postCommentsId to the Comment model that contains the foreign key of the Post. If the Post type is renamed to Article:"
  },
  {
    "objectID": "Evolving GraphQL schemas-9",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Renaming models while retaining data",
    "depth": 2,
    "text": "The underlying table still contains records with postCommentsId as the foreign key field in the Comment table. In the new schema the foreign key field is now articleCommentsId.\nAmplify is aware of this and will automatically map incoming requests with articleCommentsId to postCommentsId and do the reverse mapping for results."
  },
  {
    "objectID": "Evolving GraphQL schemas-10",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Constraint on relationship field names with @mapsTo",
    "depth": 3,
    "text": "In the above example if you renamed Comment to Reaction:"
  },
  {
    "objectID": "Evolving GraphQL schemas-11",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Constraint on relationship field names with @mapsTo",
    "depth": 3,
    "text": "The @hasMany field comments cannot be renamed to reactions. This is because the foreign key field in Reaction uses the parent field name as part of the name. Amplify cannot determine the original name if this is changed."
  },
  {
    "objectID": "Evolving GraphQL schemas-12",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Constraint on relationship field names with @mapsTo",
    "depth": 3,
    "text": "If a model is renamed multiple times, the value specified in @mapsTo must be the original name, not the previous name."
  },
  {
    "objectID": "Evolving GraphQL schemas-13",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Constraints to prevent naming conflicts",
    "depth": 3,
    "text": "A model in the schema cannot have the same name as the name another type maps to. For example, the following schema is invalid:"
  },
  {
    "objectID": "Evolving GraphQL schemas-14",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Constraints to prevent naming conflicts",
    "depth": 3,
    "text": "This schema would create a conflict on the Post table."
  },
  {
    "objectID": "Evolving GraphQL schemas-15",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Constraints to prevent naming conflicts",
    "depth": 3,
    "text": "Furthermore, even if the Post model is mapped to a different name, it is still not allowed. While this scenario technically does not pose a conflict, it is disallowed to prevent confusion."
  },
  {
    "objectID": "Evolving GraphQL schemas-16",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Constraints to prevent naming conflicts",
    "depth": 3,
    "text": "If you are accessing the table of a renamed model directly (ie. without going through AppSync), your access patterns will need to be aware that foreign key fields of records in the database are not renamed. See \"How it works\" below."
  },
  {
    "objectID": "Evolving GraphQL schemas-17",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "@mapsTo does not modify any existing tables or records. Instead, it points AppSync resolvers for the new name to the existing DynamoDB table for the original name."
  },
  {
    "objectID": "Evolving GraphQL schemas-18",
    "title": "Evolving GraphQL schemas",
    "description": "Evolve your GraphQL schema over time using the @mapsTo directive to retain tables while renaming models",
    "slug": "/cli/graphql/schema-evolution",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "To handle renamed autogenerated foreign key fields when using relational directives, Amplify adds additional AppSync pipeline resolvers before and after fetching data from the database.\nThe resolvers before the fetch map any occurrence of the renamed foreign keys in the request to the original name. Then the resolvers after the fetch map any occurrence of the original name to the current name before returning the result."
  },
  {
    "objectID": "Connect to machine learning services-0",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify allows you to identify text on an image, identify labels on an image, translate text, and synthesize speech from text with the @predictions directive."
  },
  {
    "objectID": "Connect to machine learning services-1",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Note: The @predictions directive requires a S3 storage bucket configured via amplify add storage."
  },
  {
    "objectID": "Connect to machine learning services-2",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Identify text on an image",
    "depth": 2,
    "text": "To configure text recognition on an image use the identifyText action in the @predictions directive."
  },
  {
    "objectID": "Connect to machine learning services-3",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Identify text on an image",
    "depth": 2,
    "text": "In your GraphQL query, can pass in a S3 key for the image. At the moment, this directive works only with objects located within the public/ folder of your S3 bucket. The public/ prefix is automatically added to the key input. For instance, in the example below, public/myimage.jpg will be used as the input."
  },
  {
    "objectID": "Connect to machine learning services-4",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Identify labels on an image",
    "depth": 2,
    "text": "To configure label recognition on an image use the identifyLabels action in the @predictions directive."
  },
  {
    "objectID": "Connect to machine learning services-5",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Identify labels on an image",
    "depth": 2,
    "text": "In your GraphQL query, you can pass in a S3 key for the image. At the moment, this directive works only with objects located within public/ folder in your S3 bucket. The public/ prefix is automatically added to the key input. For instance, in the example below, public/myimage.jpg will be used as the input."
  },
  {
    "objectID": "Connect to machine learning services-6",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Identify labels on an image",
    "depth": 2,
    "text": "The query below will return a list of identified labels. Review Detecting Labels in the Amazon Rekognition documentation for the full list of supported labels."
  },
  {
    "objectID": "Connect to machine learning services-7",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Translate text",
    "depth": 2,
    "text": "To configure text translation use the identifyLabels action in the @predictions directive."
  },
  {
    "objectID": "Connect to machine learning services-8",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Translate text",
    "depth": 2,
    "text": "The query below will return the translated string. Populate the sourceLanguage and targetLanguage parameters with one of the Supported Language Codes. Pass in the text to translate via the text parameter."
  },
  {
    "objectID": "Connect to machine learning services-9",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Synthesize speech from text",
    "depth": 2,
    "text": "To configure Text-to-Speech synthesis use the convertTextToSpeech action in the @predictions directive."
  },
  {
    "objectID": "Connect to machine learning services-10",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Synthesize speech from text",
    "depth": 2,
    "text": "The query below will return a presigned URL with the synthesized speech. Populate the voiceID parameter with one of the Supported Voice IDs. Pass in the text to synthesize via the text parameter."
  },
  {
    "objectID": "Connect to machine learning services-11",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining Predictions actions",
    "depth": 2,
    "text": "You can also combine multiple Predictions actions together into a sequence. The following action sequences are supported:"
  },
  {
    "objectID": "Connect to machine learning services-12",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining Predictions actions",
    "depth": 2,
    "text": "identifyText -> translateText -> convertTextToSpeech"
  },
  {
    "objectID": "Connect to machine learning services-13",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining Predictions actions",
    "depth": 2,
    "text": "identifyLabels -> translateText -> convertTextToSpeech"
  },
  {
    "objectID": "Connect to machine learning services-14",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining Predictions actions",
    "depth": 2,
    "text": "translateText -> convertTextToSpeech"
  },
  {
    "objectID": "Connect to machine learning services-15",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining Predictions actions",
    "depth": 2,
    "text": "In the example below, speakTranslatedImageText identifies text from an image, then translates it into another language, and finally converts the translated text to speech."
  },
  {
    "objectID": "Connect to machine learning services-16",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining Predictions actions",
    "depth": 2,
    "text": "An example of that query will look like:"
  },
  {
    "objectID": "Connect to machine learning services-17",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Combining Predictions actions",
    "depth": 2,
    "text": "A code example of this using the JS Library is shown below:"
  },
  {
    "objectID": "Connect to machine learning services-18",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "Definition of the @predictions directive:"
  },
  {
    "objectID": "Connect to machine learning services-19",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "@predictions creates resources to communicate with Amazon Rekognition, Translate, and Polly.\nFor each action the following is created:"
  },
  {
    "objectID": "Connect to machine learning services-20",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "IAM Policy for each service (e.g. Amazon Rekognition detectText Policy)"
  },
  {
    "objectID": "Connect to machine learning services-21",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "An AppSync VTL function"
  },
  {
    "objectID": "Connect to machine learning services-22",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "An AppSync DataSource"
  },
  {
    "objectID": "Connect to machine learning services-23",
    "title": "Connect to machine learning services",
    "description": "Add AI/ML capabilities such as text recognition, image labeling, text-to-speech, and translation to your GraphQL API.",
    "slug": "/cli/graphql/connect-to-machine-learning-services",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "Finally, a pipeline resolver is created for the query or field. The pipeline resolver is composed of AppSync functions which are defined by the action list provided in the directive."
  },
  {
    "objectID": "Search and result aggregations-0",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Add the @searchable directive to an @model type to enable OpenSearch-based data search and result aggregations. This gives you the ability to:"
  },
  {
    "objectID": "Search and result aggregations-1",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "search for data using advanced filters, such as substring matching, wildcards, regex, and/or/not conditions"
  },
  {
    "objectID": "Search and result aggregations-2",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "get aggregation values, such as sum, average, min, max, terms"
  },
  {
    "objectID": "Search and result aggregations-3",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "retrieve total search result count"
  },
  {
    "objectID": "Search and result aggregations-4",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "sort the search results across one or multiple fields"
  },
  {
    "objectID": "Search and result aggregations-5",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Once the @searchable directive is added, all new records added to the model are streamed to OpenSearch. To backfill existing data, see Backfill OpenSearch index from DynamoDB table."
  },
  {
    "objectID": "Search and result aggregations-6",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Search and filter data",
    "depth": 2,
    "text": "Every model with a @searchable directive attached generates a new \"search\" GraphQL query to search and filter for records. The example above provides you the ability to search for \"Student\" records using a \"searchStudents\" query."
  },
  {
    "objectID": "Search and result aggregations-7",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Search and filter data",
    "depth": 2,
    "text": "The filter parameter allows you to filter for records based on their field values."
  },
  {
    "objectID": "Search and result aggregations-8",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Search and filter data",
    "depth": 2,
    "text": "In the example above, the search result consists of students with the name \"Rene Brandel\""
  },
  {
    "objectID": "Search and result aggregations-9",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Supported search operations",
    "depth": 3,
    "text": "|Field type|Supported search operations|\n|-|-|\n|String|ne, eq, match, matchPhrase, matchPhrasePrefix, multiMatch, exists, wildcard, regexp|\n|Int|ne, gt, lt, gte, lte, eq, range|\n|Float|ne, gt, lt, gte, lte, eq, range|\n|Boolean|eq, ne|\n|Enum|ne, eq, match, matchPhrase, matchPhrasePrefix, multiMatch, exists, wildcard, regexp|"
  },
  {
    "objectID": "Search and result aggregations-10",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Nested search conditions (and, or, not)",
    "depth": 3,
    "text": "Use the filter parameter to pass a nested and/or/not condition."
  },
  {
    "objectID": "Search and result aggregations-11",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Nested search conditions (and, or, not)",
    "depth": 3,
    "text": "By default, every operation in the filter properties is anded. Use the or or not properties in the search query's filter parameter to override this behavior."
  },
  {
    "objectID": "Search and result aggregations-12",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Nested search conditions (and, or, not)",
    "depth": 3,
    "text": "The query above returns a \"Student\" if:"
  },
  {
    "objectID": "Search and result aggregations-13",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Nested search conditions (and, or, not)",
    "depth": 3,
    "text": "their name ends with \"Brandel\""
  },
  {
    "objectID": "Search and result aggregations-14",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Nested search conditions (and, or, not)",
    "depth": 3,
    "text": "and"
  },
  {
    "objectID": "Search and result aggregations-15",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Nested search conditions (and, or, not)",
    "depth": 3,
    "text": "their date of birth is earlier than 2000-01-01"
  },
  {
    "objectID": "Search and result aggregations-16",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Nested search conditions (and, or, not)",
    "depth": 3,
    "text": "or"
  },
  {
    "objectID": "Search and result aggregations-17",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Nested search conditions (and, or, not)",
    "depth": 3,
    "text": "their email exists."
  },
  {
    "objectID": "Search and result aggregations-18",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Sort search results",
    "depth": 2,
    "text": "Use the sort parameter to sort your search results by a field in ascending or descending order. The field argument accepts any field available on the model. The direction accepts either asc or desc."
  },
  {
    "objectID": "Search and result aggregations-19",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Sort search results",
    "depth": 2,
    "text": "In the example above, the search result is sorted based on their name in a descending order."
  },
  {
    "objectID": "Search and result aggregations-20",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Sort search result over multiple fields",
    "depth": 3,
    "text": "To sort over multiple fields, provide array of sort conditions. When sorting over multiple fields, the sort conditions are applied in the sort array's order."
  },
  {
    "objectID": "Search and result aggregations-21",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Sort search result over multiple fields",
    "depth": 3,
    "text": "In the example above, the search result is first sorted by name in a descending order and then by dateOfBirth in an ascending order."
  },
  {
    "objectID": "Search and result aggregations-22",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Paginate over search results",
    "depth": 2,
    "text": "By default, the search result page size is 100. To customize the page size modify the limit parameter. Query for the nextToken and use it in your subsequent pagination requests:"
  },
  {
    "objectID": "Search and result aggregations-23",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Total count of search results",
    "depth": 2,
    "text": "Add the total field in your query response to get the total count of search result hits."
  },
  {
    "objectID": "Search and result aggregations-24",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Total count of search results",
    "depth": 2,
    "text": "In the example above, the response's total field contains the total search result count for \"Students\" whose name ends with \"Brandel\".\nNote: total is calculated based on all records, irrespective of pagination configurations."
  },
  {
    "objectID": "Search and result aggregations-25",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "Use the aggregates parameter to get aggregate values such as \"minimum\", \"maximum\", \"average\", and \"sum\" returned in the aggregateItems field.\nNote: aggregates are calculated based on all records, irrespective of pagination configurations."
  },
  {
    "objectID": "Search and result aggregations-26",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "Provide the min value as the aggregate type and specify the aggregateItems in the response field."
  },
  {
    "objectID": "Search and result aggregations-27",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "In the example above, the response includes the minimum value of \"examsCompleted\" for all Students whose name starts with \"Rene\"."
  },
  {
    "objectID": "Search and result aggregations-28",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "Provide the max value as the aggregate type and specify the aggregateItems in the response field."
  },
  {
    "objectID": "Search and result aggregations-29",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "In the example above, the response includes the maximum value of \"examsCompleted\" for all Students whose name starts with \"Rene\"."
  },
  {
    "objectID": "Search and result aggregations-30",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "Provide the avg value as the aggregate type and specify the aggregateItems in the response field."
  },
  {
    "objectID": "Search and result aggregations-31",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "In the example above, the response includes the average value of \"examsCompleted\" for all Students whose name starts with \"Rene\"."
  },
  {
    "objectID": "Search and result aggregations-32",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "Provide the sum value as the aggregate type and specify the aggregateItems in the response field."
  },
  {
    "objectID": "Search and result aggregations-33",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "In the example above, the response includes the sum of all \"examsCompleted\" values for all Students whose name starts with \"Rene\"."
  },
  {
    "objectID": "Search and result aggregations-34",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "Provide the terms value as the aggregate type and specify the aggregateItems in the response field."
  },
  {
    "objectID": "Search and result aggregations-35",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Aggregate values for search result (minimum, maximum, average, sum, terms)",
    "depth": 2,
    "text": "In the example above, the response includes the terms for the description and their count:"
  },
  {
    "objectID": "Search and result aggregations-36",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Set up OpenSearch for production environments",
    "depth": 2,
    "text": "By default, Amplify CLI will configure a t2.small instance type. This is great for getting started and prototyping but not recommended to be used in the production environment per the OpenSearch best practices."
  },
  {
    "objectID": "Search and result aggregations-37",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Set up OpenSearch for production environments",
    "depth": 2,
    "text": "To configure the OpenSearch instance type per environment:"
  },
  {
    "objectID": "Search and result aggregations-38",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Set up OpenSearch for production environments",
    "depth": 2,
    "text": "Run amplify env add to create a new environment (e.g. \"prod\")"
  },
  {
    "objectID": "Search and result aggregations-39",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Set up OpenSearch for production environments",
    "depth": 2,
    "text": "Edit the amplify/team-provider-info.json file and set OpenSearchInstanceType to the instance type that works for your application"
  },
  {
    "objectID": "Search and result aggregations-40",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Set up OpenSearch for production environments",
    "depth": 2,
    "text": "Deploy your changes with amplify push"
  },
  {
    "objectID": "Search and result aggregations-41",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Set up OpenSearch for production environments",
    "depth": 2,
    "text": "Learn more about Amazon OpenSearch Service instance types here."
  },
  {
    "objectID": "Search and result aggregations-42",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "The @searchable directive streams the data of an @model type to Amazon OpenSearch Service and configures search resolvers to query against OpenSearch."
  },
  {
    "objectID": "Search and result aggregations-43",
    "title": "Search and result aggregations",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/search-and-result-aggregations",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "Type definition of the @searchable directive:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-0",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Define your custom business logic in a Lambda function resolver, HTTP resolver, or VTL resolver and expose them in a GraphQL query or mutation. Extend or override Amplify-generated GraphQL resolvers to optimize for your specific use cases."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-1",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a custom query or mutation",
    "depth": 2,
    "text": "While @model automatically generates dedicated \"create\", \"read\", \"update\", \"delete\", and \"subscription\" queries or mutations for you, there are some cases where you want to define a stand-alone query or mutation."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-2",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a custom query or mutation",
    "depth": 2,
    "text": "Define your custom query or mutation"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-3",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a custom query or mutation",
    "depth": 2,
    "text": "Use one of these resolver choices to handle the query or mutation request:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-4",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a custom query or mutation",
    "depth": 2,
    "text": "Lambda function resolver: use a custom Lambda function to handle query or mutation"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-5",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a custom query or mutation",
    "depth": 2,
    "text": "HTTP resolver: call an HTTP endpoint upon a query or mutation"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-6",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a custom query or mutation",
    "depth": 2,
    "text": "VTL resolver (most advanced): use VTL mapping templates to customize the query and mutation logic"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-7",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a custom query or mutation",
    "depth": 2,
    "text": "Secure your custom query or mutation with field-level authorization rules"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-8",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create a custom query or mutation",
    "depth": 2,
    "text": "Note: Dynamic authorization rules are not supported on a custom query or mutation."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-9",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda function resolver",
    "depth": 2,
    "text": "The @function directive allows you to quickly & easily configure a AWS Lambda resolvers with your GraphQL API. You can use any AWS Lambda functions that was created with the Amplify CLI, AWS Lambda console, or any other tool."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-10",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda function resolver",
    "depth": 2,
    "text": "For example, use amplify add function to add a Lambda function called \"echofunction\" with the following handler:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-11",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda function resolver",
    "depth": 2,
    "text": "To connect an AWS Lambda resolver to the GraphQL API, add the @function directive to a field in your schema."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-12",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda function resolver",
    "depth": 2,
    "text": "The Amplify CLI provides support for maintaining multiple environments. When you deploy a function via amplify add function, it will automatically add the environment suffix to your Lambda function name. For example, if you create a function named echofunction using amplify add function in the dev environment, the deployed function will be named echofunction-dev. The @function directive allows you to use ${env} to reference the current Amplify CLI environment."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-13",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Lambda function resolver",
    "depth": 2,
    "text": "If you deployed your Lambda function without Amplify CLI then you must provide the full Lambda function name in the name parameter. If you deployed the same function with the name echofunction then you would have:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-14",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Structure of the function event",
    "depth": 3,
    "text": "When writing Lambda functions that are connected via the @function directive, you can expect the following structure for the AWS Lambda event object."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-15",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Structure of the function event",
    "depth": 3,
    "text": "| Key  | Description  |\n|---|---|\n| typeName  | The name of the parent object type of the field being resolver.  |\n| fieldName  | The name of the field being resolved.  |\n| arguments  | A map containing the arguments passed to the field being resolved.  |\n| identity  | A map containing identity information for the request. Contains a nested key 'claims' that will contains the JWT claims if they exist. |\n| source  | When resolving a nested field in a query, the source contains parent value at runtime. For example when resolving Post.comments, the source will be the Post object.  |\n| request   | The AppSync request object. Contains header information.  |\n| prev | When using pipeline resolvers, this contains the object returned by the previous function. You can return the previous value for auditing use cases. |"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-16",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Structure of the function event",
    "depth": 3,
    "text": "Your function should follow the Lambda handler guidelines for your specific language. See the developer guides from the\nAWS Lambda documentation for your chosen language. If you choose to use structured types, your type should serialize\nthe AWS Lambda event object outlined above. For example, if using Golang, you should define a struct with the above fields."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-17",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Calling functions in different regions",
    "depth": 3,
    "text": "By default, you expect the function to be in the same region as the Amplify project. If you need to call a function in a different or a specific region, you can provide the region argument."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-18",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Calling functions in different regions",
    "depth": 3,
    "text": "Calling functions in different AWS accounts is not supported via the @function directive but is supported by AWS AppSync."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-19",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Chaining functions",
    "depth": 3,
    "text": "You can chain together multiple @function resolvers such that they are invoked in series when your field's resolver is invoked. To create a pipeline resolver that calls to multiple AWS Lambda functions in series, use multiple @function directives on the field.\nSimilarly, @function can be combined with field-level @auth. When combining these field directives, the ordering in the schema matches the ordering in the pipeline resolver. You can choose to have functions before and/or after field level authorization is applied."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-20",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Chaining functions",
    "depth": 3,
    "text": "Note: Be careful when using @auth directives on a field in a root type. @auth directives on field definitions use the source object to perform authorization logic and the source will be an empty object for fields on root types. Static group authorization should perform as expected."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-21",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Chaining functions",
    "depth": 3,
    "text": "In the example above when you run a mutation that calls the Mutation.doSomeWork field, the worker-function will be invoked first then the audit-function will be invoked with an event that contains the results of the worker-function under the event.prev.result key. The audit-function would need to return event.prev.result if you want the result of worker-function to be returned for the field."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-22",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "Definition of @function directive:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-23",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "Under the hood, Amplify creates an AppSync::FunctionConfiguration for each unique instance of @function in a document and a pipeline resolver containing a pointer to a function for each @function on a given field."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-24",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "The @function directive generates these resources as necessary:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-25",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "An AWS IAM role that has permission to invoke the function as well as a trust policy with AWS AppSync."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-26",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "An AWS AppSync data source that registers the new role and existing function with your AppSync API."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-27",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "An AWS AppSync pipeline function that prepares the lambda event and invokes the new data source."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-28",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "An AWS AppSync resolver that attaches to the GraphQL field and invokes the new pipeline functions."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-29",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "HTTP resolver",
    "depth": 2,
    "text": "The @http directive allows you to quickly configure HTTP resolvers within your GraphQL API."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-30",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "HTTP resolver",
    "depth": 2,
    "text": "To connect to an endpoint, add the @http directive to a field in your GraphQL schema. The directive allows you to define URL path parameters, and specify a query string and/or specify a request body. For example, given the definition of a Post type:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-31",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "HTTP resolver",
    "depth": 2,
    "text": "Amplify generates the definition below that sends a request to the url when the listPosts query is used."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-32",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Request headers",
    "depth": 3,
    "text": "The @http directive generates resolvers that can handle XML and JSON responses. If an HTTP method is not defined, GET is used. You can specify a list of static headers to be passed with the HTTP requests to your backend in your directive definition."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-33",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Path parameters",
    "depth": 3,
    "text": "You can create dynamic paths by specifying parameters in the directive URL by using the special :<parameter> notation. Your set of parameters can then be specified in the params input object of the query. Note that path parameters are not added to the request body or query string. You can define multiple parameters."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-34",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Path parameters",
    "depth": 3,
    "text": "In the example above, the :id parameter will generate the appropriate query input as shown below:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-35",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Path parameters",
    "depth": 3,
    "text": "You can fetch a specific post by enclosing the id in the params input object."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-36",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Path parameters",
    "depth": 3,
    "text": "This executes the following request:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-37",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query String",
    "depth": 3,
    "text": "You can send a query string with your request by specifying variables for your query. The query string is supported with all request methods."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-38",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query String",
    "depth": 3,
    "text": "Given the definition"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-39",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query String",
    "depth": 3,
    "text": "Amplify generates"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-40",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query String",
    "depth": 3,
    "text": "You can query for posts using the query input object"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-41",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query String",
    "depth": 3,
    "text": "which sends the following request:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-42",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Request Body",
    "depth": 3,
    "text": "The @http directive also allows you to specify the body of a request, which is used for POST, PUT, and PATCH requests. To create a new post, you can define the following."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-43",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Request Body",
    "depth": 3,
    "text": "Amplify generates the addPost query field with the query and body input objects since this type of request also supports a query string. The generated resolver verifies that non-null arguments (e.g.: the title and description) are passed in at least one of the input objects; if not, an error is returned."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-44",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Request Body",
    "depth": 3,
    "text": "You can add a post by using the body input object:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-45",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Request Body",
    "depth": 3,
    "text": "which will send"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-46",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "The @http directive allows you to use ${env} to reference the current Amplify CLI environment."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-47",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "which, in the DEV environment, will send"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-48",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "Combining the different components"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-49",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "You can use a combination of parameters, query, body, headers, and environments in your @http directive definition."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-50",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "Given the definition"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-51",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "you can update a post with"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-52",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference Amplify environment name",
    "depth": 3,
    "text": "which, in the DEV environment, will send"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-53",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference existing field data",
    "depth": 3,
    "text": "In some cases, you may want to send a request based on existing field data. Take a scenario where you have a post and want to fetch comments associated with the post in a single query. Let's use the previous definition of Post and Comment."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-54",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference existing field data",
    "depth": 3,
    "text": "A post can be fetched at /posts/:id and a post's comments at /posts/:id/comments. You can fetch the comments based on the post id with the following updated definition. $ctx.source is a map that contains the resolution of the parent field (Post) and gives access to id."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-55",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference existing field data",
    "depth": 3,
    "text": "You can retrieve the comments of a specific post with the following query and selection set."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-56",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference existing field data",
    "depth": 3,
    "text": "Assuming that getPost retrieves a post with the id POST_ID, the comments field is resolved by sending this request to the endpoint"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-57",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Reference existing field data",
    "depth": 3,
    "text": "Note that there is no check to ensure that the reference variable (here the post ID) exists. When using this technique, it is recommended to make sure the referenced field is non-null."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-58",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "Definition of @http directive:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-59",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "The @http transformer will create one HTTP datasource for each identified base URL. For example, if multiple HTTP resolvers are created that interact with the \"https://www.example.com\" endpoint, only a single datasource is created. Each directive generates one resolver. Depending on the definition, the appropriate body, params, and query input types are created. Note that @http transformer does not support calling other AWS services where Signature Version 4 signing process is required."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-60",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "VTL resolver",
    "depth": 2,
    "text": "You can use AWS Cloud Development Kit (CDK) to define custom VTL resolvers for your GraphQL API."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-61",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "VTL resolver",
    "depth": 2,
    "text": "Next, install the AppSync dependencies for your custom resource:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-62",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "VTL resolver",
    "depth": 2,
    "text": "Note: Installations using the '~' character do not modify the package.json. To use '~' for default npm configurations, make sure your package.json reflects the right dependency to avoid compatibility errors in CDK."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-63",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "VTL resolver",
    "depth": 2,
    "text": "Finally, add your custom resolvers into the cdk-stack.ts file. You can either add the VTL inline into your cdk-stack.ts file or define them externally in another file. Review the Resolver Mapping Template Programming Guide to learn more about the VTL template."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-64",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "VTL resolver",
    "depth": 2,
    "text": "Note: Users moving from ElasticSearch to OpenSearch will need to change the datasource name from ElasticSearchDomain to OpenSearchDataSource if the upgrade process changes the source name. For new @searchable models the datasource name will default to OpenSearchDataSource."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-65",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "VTL resolver",
    "depth": 2,
    "text": "You can alternatively define the VTL templates in another file such as Query.querySomething.req.vtl or Query.querySomething.res.vtl in amplify/backend/custom/MyCustomResolvers/. Then use the following code snippets to retrieve them:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-66",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "VTL resolver",
    "depth": 2,
    "text": "Note: the .. is added to the path because the path is always relative to the build folder of the custom resource."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-67",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Override Amplify-generated resolvers",
    "depth": 2,
    "text": "Amplify generates AWS AppSync pipeline resolver for your queries and mutations. The resolvers are listed the following API resource's folder amplify/backend/api/<resource_name>/build/resolvers/."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-68",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Override Amplify-generated resolvers",
    "depth": 2,
    "text": "To override an Amplify-generated resolver:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-69",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Override Amplify-generated resolvers",
    "depth": 2,
    "text": "Find the resolver file name you want to override under build/resolvers"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-70",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Override Amplify-generated resolvers",
    "depth": 2,
    "text": "Place a .vtl with the same file name the resource's resolvers/ (not under build/)"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-71",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Override Amplify-generated resolvers",
    "depth": 2,
    "text": "Upon the next amplify api gql-compile or amplify push the Amplify-generated resolver file will be replaced with your overwritten resolver file"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-72",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Override Amplify-generated resolvers",
    "depth": 2,
    "text": "The example above shows how the Query.searchTodos.req.vtl is overwritten with a custom resolver. Review the Resolver Mapping Template Programming Guide to learn more about the VTL template."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-73",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Extend Amplify-generated resolvers",
    "depth": 2,
    "text": "Amplify generates AWS AppSync pipeline resolvers for your queries and mutations. You can \"slot\" in your custom business logic between Amplify-generated resolvers. You can find Amplify-generated resolvers under your API resources' build/resolvers/ folder. The resolver functions file name determines its placement within the slot sequence."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-74",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Extend Amplify-generated resolvers",
    "depth": 2,
    "text": "To extend an Amplify-generated resolver:"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-75",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Extend Amplify-generated resolvers",
    "depth": 2,
    "text": "Find the resolver slot you want to add your custom business logic to"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-76",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Extend Amplify-generated resolvers",
    "depth": 2,
    "text": "Place a .vtl file with the correct the file naming convention into resolvers/ (not under build/)"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-77",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Extend Amplify-generated resolvers",
    "depth": 2,
    "text": "Upon the next amplify api gql-compile or amplify push the Amplify-generated resolver file will be replaced within the desired slot within the resolver sequence."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-78",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Extend Amplify-generated resolvers",
    "depth": 2,
    "text": "For example, the a resolver function file named Mutation.createTodo.postAuth.2.req.vtl will be slotted in right after the Mutation.createTodo.postAuth.1.req.vtl resolver. Review the Resolver Mapping Template Programming Guide to learn more about the VTL template."
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-79",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query",
    "depth": 4,
    "text": "| Sequence | Slot name    | Description                                                                                |\n| -------- | ------------ | ------------------------------------------------------------------------------------------ |\n| 1        | init         | Initial resolvers that are run. Usually used for initializing default values.              |\n| 2        | preAuth      | Resolvers that are intended to run before authorization rule checks are applied.           |\n| 3        | auth         | Resolvers that implement authorization rule checks.                                        |\n| 4        | postAuth     | Resolvers that are run after authorization rule checks.                                    |\n| 5        | preDataLoad  | Resolvers to configure values to make a request to the data source.                        |\n| 6        | postDataLoad | Resolvers for post-processing after request to data source.                                |\n| 7        | finish       | Final set of resolvers before response is returned to client. Typically used for clean-up. |"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-80",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Mutation",
    "depth": 4,
    "text": "| Sequence | Slot name  | Description                                                                                |\n| -------- | ---------- | ------------------------------------------------------------------------------------------ |\n| 1        | init       | Initial resolvers that are run. Usually used for initializing default values.              |\n| 2        | preAuth    | Resolvers that are intended to run before authorization rule checks are applied.           |\n| 3        | auth       | Resolvers that implement authorization rule checks.                                        |\n| 4        | postAuth   | Resolvers that are run after authorization rule checks.                                    |\n| 5        | preUpdate  | Resolvers to configure values to make a request to the data source.                        |\n| 6        | postUpdate | Resolvers for post-processing after request to data source.                                |\n| 7        | finish     | Final set of resolvers before response is returned to client. Typically used for clean-up. |"
  },
  {
    "objectID": "Custom business logic (Lambda function, HTTP, VTL resolvers)-81",
    "title": "Custom business logic (Lambda function, HTTP, VTL resolvers)",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/custom-business-logic",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Subscription",
    "depth": 4,
    "text": "| Sequence | Slot name    | Description                                                                      |\n| -------- | ------------ | -------------------------------------------------------------------------------- |\n| 1        | init         | Initial resolvers that are run. Usually used for initializing default values.    |\n| 2        | preAuth      | Resolvers that are intended to run before authorization rule checks are applied. |\n| 3        | auth         | Resolvers that implement authorization rule checks.                              |\n| 4        | postAuth     | Resolvers that are run after authorization rule checks.                          |\n| 5        | preSubscribe | Resolver slot that executes after auth but before the subscription returns       |"
  },
  {
    "objectID": "Authorization rules-0",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Use the @auth directive to configure authorization rules for public, sign-in user, per user, and per user group data access. Authorization rules operate on the deny-by-default principle. Meaning that if an authorization rule is not specifically configured, it is denied."
  },
  {
    "objectID": "Authorization rules-1",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In the example above, each signed-in user, or also known as \"owner\", of a Todo can create, read, update, and delete their own Todos."
  },
  {
    "objectID": "Authorization rules-2",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify also allows you to restrict the allowed operations, combine multiple authorization rules, and apply fine-grained field-level authorization."
  },
  {
    "objectID": "Authorization rules-3",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "In the example above, everyone (public) can read every Todo but owner (authenticated users) can create, read, update, and delete their own Todos."
  },
  {
    "objectID": "Authorization rules-4",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Global authorization rule (only for getting started)",
    "depth": 3,
    "text": "To help you get started, there's a global authorization rule defined when you create a new GraphQL schema. For production environments, remove the global authorization rule and apply rules on each model instead."
  },
  {
    "objectID": "Authorization rules-5",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Global authorization rule (only for getting started)",
    "depth": 3,
    "text": "The global authorization rule (in this case { allow: public } - allows anyone to create, read, update, and delete) is applied to every data model in the GraphQL schema."
  },
  {
    "objectID": "Authorization rules-6",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Global authorization rule (only for getting started)",
    "depth": 3,
    "text": "Currently, only { allow: public } is supported as a global authorization rule."
  },
  {
    "objectID": "Authorization rules-7",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorization strategies",
    "depth": 2,
    "text": "Use the guide below to select the correct authorization strategy for your use case:"
  },
  {
    "objectID": "Authorization rules-8",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Authorization strategies",
    "depth": 2,
    "text": "| Recommended use case | Strategy | Provider |\n|---|---|---|\n| Public data access where users or devices are anonymous. Anyone with the AppSync API key is granted access. | public | apiKey |\n| Recommended for production environment's public data access. Public data access where unauthenticated users or devices are granted permissions using AWS IAM controls. | public | iam |\n| Per user data access. Access is restricted to the \"owner\" of a record. Leverages amplify add auth Cognito user pool by default. | owner | userPools / oidc |\n| Any signed-in data access. Unlike owner-based access, any signed-in user has access. | private | userPools / oidc / iam |\n| Per user group data access. A specific or dynamically configured group of users have access | group | userPools / oidc |\n| Define your own custom authorization rule within a Lambda function | custom | function |"
  },
  {
    "objectID": "Authorization rules-9",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Public data access",
    "depth": 3,
    "text": "To grant everyone access, use the public authorization strategy. Behind the scenes, the API will be protected with an API Key."
  },
  {
    "objectID": "Authorization rules-10",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Public data access",
    "depth": 3,
    "text": "You can also override the authorization provider. In the example below, iam is specified as the provider which allows you to use an \"Unauthenticated Role\" from the Cognito identity pool for public access instead of an API Key. When you run amplify add auth, the  Amplify CLI generates scoped down IAM policies for the \"Unauthenticated role\" in Cognito identity pool automatically."
  },
  {
    "objectID": "Authorization rules-11",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "To restrict a record's access to a specific user, use the owner authorization strategy. When owner authorization is configured, only the record's owner is allowed the specified operations."
  },
  {
    "objectID": "Authorization rules-12",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "Behind the scenes, Amplify will automatically add a owner: String field to each record which contains the record owner's identity information upon record creation."
  },
  {
    "objectID": "Authorization rules-13",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "By default, the Cognito user pool's user information is populated into the owner field. The value saved includes sub and username in the format <sub>::<username>. The API will authorize against the full value of <sub>::<username> or sub / username separately and return username. You can alternatively configure OpenID Connect as an authorization provider."
  },
  {
    "objectID": "Authorization rules-14",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "You can override the owner field to your own preferred field, by specifying a custom ownerField in the authorization rule."
  },
  {
    "objectID": "Authorization rules-15",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "By default, owners can reassign the owner of their existing record to another user."
  },
  {
    "objectID": "Authorization rules-16",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "To prevent an owner from reassigning their record to another user, protect the owner field (by default owner: String) with a field-level authorization rule. For example, in a social media app, you would want to prevent Alice from being able to reassign Alice's Post to Bob."
  },
  {
    "objectID": "Authorization rules-17",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "By default, only one user can be an owner of a record. If you want to grant a set of users access to a record, you can override the ownerField to a list of owners. Use this if you want a dynamic set of users to have access to a record."
  },
  {
    "objectID": "Authorization rules-18",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "In the example above, upon record creation, the authors list is populated with the creator of the record. The creator can then update the authors field with additional users. Any user listed in the authors field can access the record."
  },
  {
    "objectID": "Authorization rules-19",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Per-user / owner-based data access",
    "depth": 3,
    "text": "Known limitation: Real-time subscriptions are not supported when owner authorization is configured with a list of owners."
  },
  {
    "objectID": "Authorization rules-20",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Signed-in user data access",
    "depth": 3,
    "text": "To restrict a record's access to every signed-in user, use the private authorization strategy."
  },
  {
    "objectID": "Authorization rules-21",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Signed-in user data access",
    "depth": 3,
    "text": "If you want to restrict a record's access to a specific user, see Per-user / owner-based data access. private authorization applies the authorization rule to every signed-in user access."
  },
  {
    "objectID": "Authorization rules-22",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Signed-in user data access",
    "depth": 3,
    "text": "In the example above, anyone with a valid JWT token from Cognito user pool are allowed to access all Todos."
  },
  {
    "objectID": "Authorization rules-23",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Signed-in user data access",
    "depth": 3,
    "text": "You can also override the authorization provider. In the example below, iam is specified as the provider which allows you to use an \"Authenticated Role\" from the Cognito identity pool for public access instead of an API Key. When you run amplify add auth, the  Amplify CLI generates scoped down IAM policies for the \"Authenticated role\" in Cognito identity pool automatically."
  },
  {
    "objectID": "Authorization rules-24",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Signed-in user data access",
    "depth": 3,
    "text": "In addition, you can also use OpenID Connect with private authorization. See OpenID Connect as an authorization provider."
  },
  {
    "objectID": "Authorization rules-25",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Signed-in user data access",
    "depth": 3,
    "text": "Note: If you have a connected child model that allows private level access, any user authorized to fetch it from the parent model will be able to read the connected child model.\nFor example,"
  },
  {
    "objectID": "Authorization rules-26",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Signed-in user data access",
    "depth": 3,
    "text": "In the above relationship, the owner of a Todo record can query all the tasks connected to it, since the Task model allows private read access."
  },
  {
    "objectID": "Authorization rules-27",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "User group-based data access",
    "depth": 3,
    "text": "To restrict access based on user groups, use the group authorization strategy."
  },
  {
    "objectID": "Authorization rules-28",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "User group-based data access",
    "depth": 3,
    "text": "Static group authorization: When you want to restrict access to a specific set of user groups, provide the group names in the groups parameter."
  },
  {
    "objectID": "Authorization rules-29",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "User group-based data access",
    "depth": 3,
    "text": "In the example above, only users that are part of the \"Admin\" user group are granted access to the Salary model."
  },
  {
    "objectID": "Authorization rules-30",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "User group-based data access",
    "depth": 3,
    "text": "Dynamic group authorization: When you want to restrict access to a set of user groups."
  },
  {
    "objectID": "Authorization rules-31",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "User group-based data access",
    "depth": 3,
    "text": "With dynamic group authorization, each record contains an attribute specifying what Cognito groups should be able to access it. Use the groupsField argument to specify which attribute in the underlying data store holds this group information. To specify that a single group should have access, use a field of type String. To specify that multiple groups should have access, use a field of type [String]."
  },
  {
    "objectID": "Authorization rules-32",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "User group-based data access",
    "depth": 3,
    "text": "By default, group authorization leverages Amazon Cognito user pool groups but you can also use OpenID Connect with group authorization. See OpenID Connect as an authorization provider."
  },
  {
    "objectID": "Authorization rules-33",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "User group-based data access",
    "depth": 3,
    "text": "Known limitation: Real-time subscriptions are not supported for dynamic group authorization."
  },
  {
    "objectID": "Authorization rules-34",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom authorization rule",
    "depth": 3,
    "text": "You can define your own custom authorization rule with a Lambda function."
  },
  {
    "objectID": "Authorization rules-35",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom authorization rule",
    "depth": 3,
    "text": "The Lambda function of choice will receive an authorization token from the client and execute the desired authorization logic. The AppSync GraphQL API will receive a payload from Lambda after invocation to allow or deny the API call accordingly."
  },
  {
    "objectID": "Authorization rules-36",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom authorization rule",
    "depth": 3,
    "text": "Configure the GraphQL API with the Lambda authorization mode:"
  },
  {
    "objectID": "Authorization rules-37",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom authorization rule",
    "depth": 3,
    "text": "You can use the default Amplify provided template as a starting point for your custom authorization rule. The authorization Lambda function receives:"
  },
  {
    "objectID": "Authorization rules-38",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom authorization rule",
    "depth": 3,
    "text": "Your Lambda authorization function needs to return the following JSON:"
  },
  {
    "objectID": "Authorization rules-39",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Custom authorization rule",
    "depth": 3,
    "text": "Review the Amplify Library documentation to set the custom authorization token for GraphQL API and DataStore."
  },
  {
    "objectID": "Authorization rules-40",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure multiple authorization rules",
    "depth": 2,
    "text": "When combining multiple authorization rules, they are \"logically OR\"-ed."
  },
  {
    "objectID": "Authorization rules-41",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure multiple authorization rules",
    "depth": 2,
    "text": "In the example above:"
  },
  {
    "objectID": "Authorization rules-42",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure multiple authorization rules",
    "depth": 2,
    "text": "any user (signed in or not, verified by IAM) is allowed to read all posts"
  },
  {
    "objectID": "Authorization rules-43",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure multiple authorization rules",
    "depth": 2,
    "text": "owners are allowed to create, read, update, and delete their own posts."
  },
  {
    "objectID": "Authorization rules-44",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "When an authorization rule is added to a field, it'll strictly define the authorization rules applied on the field. Field-level authorization rules do not inherit model-level authorization rules. Meaning, only the specified field-level authorization rule is applied."
  },
  {
    "objectID": "Authorization rules-45",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "In the example above:"
  },
  {
    "objectID": "Authorization rules-46",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "Owners are allowed to create, read, update, and delete Employee records they own"
  },
  {
    "objectID": "Authorization rules-47",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "Any signed in user has read access"
  },
  {
    "objectID": "Authorization rules-48",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "Any signed in user can read data with the exception of the ssn field. This field only has owner auth applied, the field-level auth rule means that model-level auth rules are not applied"
  },
  {
    "objectID": "Authorization rules-49",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "To prevent sensitive data from being sent over subscriptions, the GraphQL Transformer needs to alter the response of mutations for those fields by setting them to null. Therefore, to facilitate field-level authorization with subscriptions, you need to either apply field-level authorization rules to all required fields, make the other fields nullable, or disable subscriptions by setting it to public or off."
  },
  {
    "objectID": "Authorization rules-50",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "In the example above:"
  },
  {
    "objectID": "Authorization rules-51",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "any signed in user is allowed to read the list of employees' name and email fields"
  },
  {
    "objectID": "Authorization rules-52",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Field-level authorization rules",
    "depth": 2,
    "text": "only the employee/owner themselves have CRUD access to their ssn field"
  },
  {
    "objectID": "Authorization rules-53",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Review and print access control matrix",
    "depth": 3,
    "text": "Verify your API's access control matrix, by running the following command:"
  },
  {
    "objectID": "Authorization rules-54",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Use IAM authorization within the AppSync console",
    "depth": 3,
    "text": "IAM-based @auth rules are scoped down to only work with Amplify-generated IAM roles. To access the GraphQL API with IAM authorization within your AppSync console, you need to explicitly allow list the IAM user's name by adding them to amplify/backend/api/<your-api-name>/custom-roles.json. (Create the custom-roles.json file if it doesn't exist). Append the adminRoleNames array with the IAM role or user names:"
  },
  {
    "objectID": "Authorization rules-55",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Use IAM authorization within the AppSync console",
    "depth": 3,
    "text": "These \"Admin Roles\" have special access privileges that are scoped based on their IAM policy instead of any particular @auth rule."
  },
  {
    "objectID": "Authorization rules-56",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Using OIDC authorization provider",
    "depth": 3,
    "text": "private, owner, and group authorization can be configured with an OpenID Connect (OIDC) authorization mode. Add provider: oidc to the authorization rule. Upon the next amplify push, Amplify CLI prompts you for the OpenID Connect provider domain, Client ID, Issued at TTL, and Auth Time TTL."
  },
  {
    "objectID": "Authorization rules-57",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Using OIDC authorization provider",
    "depth": 3,
    "text": "The example above highlights the supported authorization strategies with oidc authorization provider. For owner and group authorization, you also need to specify a custom identity and group claim."
  },
  {
    "objectID": "Authorization rules-58",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure custom identity and group claims",
    "depth": 3,
    "text": "@auth supports using custom claims if you do not wish to use the default Amazon Cognito-provided \"cognito:groups\" or the double-colon-delimited claims, \"sub::username\", from your JWT token. This can be helpful if you are using tokens from a 3rd party OIDC system or if you wish to populate a claim with a list of groups from an external system, such as when using a Pre Token Generation Lambda Trigger which reads from a database. To use custom claims specify identityClaim or groupClaim as appropriate like in the example below:"
  },
  {
    "objectID": "Authorization rules-59",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure custom identity and group claims",
    "depth": 3,
    "text": "In this example the record owner will check against a user_id claim. Similarly, if the user_groups claim contains a \"Moderator\" string then access will be granted."
  },
  {
    "objectID": "Authorization rules-60",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Grant Lambda function access to GraphQL API",
    "depth": 3,
    "text": "If you grant a Lambda function in your Amplify project access to the GraphQL API via amplify update function, then the Lambda function's IAM execution role is allow-listed to honor the permissions granted on the Query, Mutation, and Subscription types."
  },
  {
    "objectID": "Authorization rules-61",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Grant Lambda function access to GraphQL API",
    "depth": 3,
    "text": "Therefore, these functions have special access privileges that are scoped based on their IAM policy instead of any particular @auth rule."
  },
  {
    "objectID": "Authorization rules-62",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Grant Lambda function access to GraphQL API",
    "depth": 3,
    "text": "To grant an external Lambda function or an IAM role access to this GraphQL API, you need to explicitly allow list the IAM role's name by adding them to amplify/backend/api/<your-api-name>/custom-roles.json. (Create the custom-roles.json file if it doesn't exist). Append the adminRoleNames array with the IAM role names:"
  },
  {
    "objectID": "Authorization rules-63",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Grant Lambda function access to GraphQL API",
    "depth": 3,
    "text": "These \"Admin Roles\" have special access privileges that are scoped based on their IAM policy instead of any particular @auth rule."
  },
  {
    "objectID": "Authorization rules-64",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "Definition of the @auth directive:"
  },
  {
    "objectID": "Authorization rules-65",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "Authorization rules consists of:"
  },
  {
    "objectID": "Authorization rules-66",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "authorization strategy (allow): who the authorization rule applies to"
  },
  {
    "objectID": "Authorization rules-67",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "authorization provider (provider): which mechanism is used to apply the authorization rule (API Key, IAM, Amazon Cognito user pool, OIDC)"
  },
  {
    "objectID": "Authorization rules-68",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "authorized operations (operations): which operations are allowed for the given strategy and provider. If not specified, create, read, update, and delete operations are allowed."
  },
  {
    "objectID": "Authorization rules-69",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "read operation: read operation can be replaced with get, list, sync, listen, and search for a more granular query access"
  },
  {
    "objectID": "Authorization rules-70",
    "title": "Authorization rules",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/authorization-rules",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 3,
    "text": "API Keys are best used for public APIs (or parts of your schema which you wish to be public) or prototyping, and you must specify the expiration time before deploying. IAM authorization uses Signature Version 4 to make request with policies attached to Roles. OIDC tokens provided by Amazon Cognito user pool or 3rd party OpenID Connect providers can also be used for authorization, and enabling this provides a simple access control requiring users to authenticate to be granted top level access to API actions."
  },
  {
    "objectID": "Data modeling-0",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify automatically creates Amazon DynamoDB database tables for GraphQL types annotated with the @model directive in your GraphQL schema. You can create relations between the data models via the @hasOne, @hasMany, @belongsTo, and @manyToMany directives."
  },
  {
    "objectID": "Data modeling-1",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup database tables",
    "depth": 2,
    "text": "The following GraphQL schema automatically creates a database table for \"Todo\". @model will also automatically add an id field as a primary key to the database table. See Configure a primary key to learn how to customize the primary key."
  },
  {
    "objectID": "Data modeling-2",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup database tables",
    "depth": 2,
    "text": "The Amplify CLI generates the Todo database table upon amplify push and generates a GraphQL API to perform create, read, update, delete, and list operations for the Todo model."
  },
  {
    "objectID": "Data modeling-3",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup database tables",
    "depth": 2,
    "text": "In addition, @model also adds the helper fields createdAt and updatedAt to your type. The values for those fields are read-only by clients unless explicitly overwritten. See Customize creation and update timestamps to learn more."
  },
  {
    "objectID": "Data modeling-4",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup database tables",
    "depth": 2,
    "text": "Try listing all the todos by executing the following query:"
  },
  {
    "objectID": "Data modeling-5",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a primary key",
    "depth": 3,
    "text": "Every GraphQL type with the @model directive will automatically have an id field set as the primary key. You can override this behavior by marking another required field with the @primaryKey directive."
  },
  {
    "objectID": "Data modeling-6",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a primary key",
    "depth": 3,
    "text": "In the example below, todoId is the database's primary key and an id field will no longer be created automatically anymore by the @model directive."
  },
  {
    "objectID": "Data modeling-7",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a primary key",
    "depth": 3,
    "text": "Without any further configuration, you'll only be able to query for a Todo via an exact equality match of its primary key field. In the example above, this is the todoId field."
  },
  {
    "objectID": "Data modeling-8",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a primary key",
    "depth": 3,
    "text": "Note: After a primary key is configured and deployed, you can't change it without deleting and recreating your database table."
  },
  {
    "objectID": "Data modeling-9",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a primary key",
    "depth": 3,
    "text": "You can also specify \"sort keys\" to use a combination of different fields as a primary key. This also allows you to apply more advanced sorting and filtering conditions on the specified \"sort key fields\"."
  },
  {
    "objectID": "Data modeling-10",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a primary key",
    "depth": 3,
    "text": "The schema above will allow you to pass different conditions to query the correct inventory item:"
  },
  {
    "objectID": "Data modeling-11",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a secondary index",
    "depth": 3,
    "text": "Amplify uses Amazon DynamoDB tables as the underlying data source for @model types. For key-value databases, it is critical to model your access patterns with \"secondary indexes\". Use the @index directive to configure a secondary index."
  },
  {
    "objectID": "Data modeling-12",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a secondary index",
    "depth": 3,
    "text": "Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale but making it work for your access patterns requires a bit of forethought. DynamoDB query operations may use at most two attributes to efficiently query data. The first query argument passed to a query (the hash key) must use strict equality and the second attribute (the sort key) may use gt, ge, lt, le, eq, beginsWith, and between. DynamoDB can effectively implement a wide variety of access patterns that are powerful enough for the majority of applications."
  },
  {
    "objectID": "Data modeling-13",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a secondary index",
    "depth": 3,
    "text": "A secondary index consists of a \"hash key\" and, optionally, a \"sort key\". Use the \"hash key\" to perform strict equality and the \"sort key\" for greater than (gt), greater than or equal to (ge), less than (lt), less than or equal to (le), equals (eq), begins with, and between operations."
  },
  {
    "objectID": "Data modeling-14",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a secondary index",
    "depth": 3,
    "text": "The example client query below allows you to query for \"Customer\" based on their accountRepresentativeID:"
  },
  {
    "objectID": "Data modeling-15",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a secondary index",
    "depth": 3,
    "text": "To optionally configure sort keys, provide the additional fields in the sortKeyFields parameter:"
  },
  {
    "objectID": "Data modeling-16",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Configure a secondary index",
    "depth": 3,
    "text": "The example client query below allows you to query for \"Customer\" based on their name and filter based on phoneNumber:"
  },
  {
    "objectID": "Data modeling-17",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup relationships between models",
    "depth": 2,
    "text": "Create \"has one\", \"has many\", \"belongs to\", and \"many to many\" relationships between @model types."
  },
  {
    "objectID": "Data modeling-18",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup relationships between models",
    "depth": 2,
    "text": "|Relationship|Description|\n|------------|--------|\n|@hasOne|Create a one-directional one-to-one relationship between two models. For example, a Project \"has one\" Team. This allows you to query the team from the project record.\n|@hasMany|Create a one-directional one-to-many relationship between two models. For example, a Post has many comments. This allows you to query all the comments from the post record.\n|@belongsTo|Use a \"belongs to\" relationship to make a \"has one\" or \"has many\" relationship bi-directional. For example, a Project has one Team and a Team belongs to a Project. This allows you to query the team from the project record and vice versa.\n|@manyToMany|Configures a \"join table\" between two models to facilitate a many-to-many relationship. For example, a Blog has many Tags and a Tag has many Blogs."
  },
  {
    "objectID": "Data modeling-19",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has One relationship",
    "depth": 3,
    "text": "Create a one-directional one-to-one relationship between two models using the @hasOne directive."
  },
  {
    "objectID": "Data modeling-20",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has One relationship",
    "depth": 3,
    "text": "In the example below, a Project has a Team."
  },
  {
    "objectID": "Data modeling-21",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has One relationship",
    "depth": 3,
    "text": "This generates queries and mutations that allow you to retrieve the related record from the source record:"
  },
  {
    "objectID": "Data modeling-22",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has One relationship",
    "depth": 3,
    "text": "To customize the field to be used for storing the relationship information, set the fields array argument and matching it to a field on the type:"
  },
  {
    "objectID": "Data modeling-23",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has One relationship",
    "depth": 3,
    "text": "In this case, the Project type has a teamID field added as an identifier for the team. @hasOne can then get the connected Team object by querying the Team table with this teamID:"
  },
  {
    "objectID": "Data modeling-24",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has One relationship",
    "depth": 3,
    "text": "A @hasOne relationship always uses a reference to the primary key of the related model, by default id unless overridden with the @primaryKey directive."
  },
  {
    "objectID": "Data modeling-25",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has Many relationship",
    "depth": 3,
    "text": "Create a one-directional one-to-many relationship between two models using the @hasMany directive."
  },
  {
    "objectID": "Data modeling-26",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has Many relationship",
    "depth": 3,
    "text": "This generates queries and mutations that allow you to retrieve the related Comment records from the source Post record:"
  },
  {
    "objectID": "Data modeling-27",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has Many relationship",
    "depth": 3,
    "text": "Under the hood, @hasMany configures a default secondary index on the related table to enable you to query the related model from the source model."
  },
  {
    "objectID": "Data modeling-28",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has Many relationship",
    "depth": 3,
    "text": "To customize the specific secondary index used for the \"has many\" relationship, create an @index directive on the field in the related table where you want to assign the secondary index."
  },
  {
    "objectID": "Data modeling-29",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has Many relationship",
    "depth": 3,
    "text": "Next, provide the secondary index with a name attribute and a value. Optionally, you can configure a “sort key” on the secondary index by providing a sortKeyFields attribute and a designated field as its value."
  },
  {
    "objectID": "Data modeling-30",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has Many relationship",
    "depth": 3,
    "text": "On the @hasMany configuration, pass in the name value from your secondary index as the value for the indexName parameter. Then, pass in the respective fields that match the connected index."
  },
  {
    "objectID": "Data modeling-31",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Has Many relationship",
    "depth": 3,
    "text": "In this case, the Comment type has a postID field added to store the reference of Post record. The id field referenced by @hasMany is the id on the Post type. @hasMany can then get the connected Comment object by querying the Comment table's secondary index \"byPost\" with this postID:"
  },
  {
    "objectID": "Data modeling-32",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs To relationship",
    "depth": 3,
    "text": "Bi-directional \"has one\" relationships currently cannot be represented on iOS due to Swift language limitations."
  },
  {
    "objectID": "Data modeling-33",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs To relationship",
    "depth": 3,
    "text": "Make a \"has one\" or \"has many\" relationship bi-directional with the @belongsTo directive."
  },
  {
    "objectID": "Data modeling-34",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs To relationship",
    "depth": 3,
    "text": "This generates queries and mutations that allow you to retrieve the related Comment records from the source Post record and vice versa:"
  },
  {
    "objectID": "Data modeling-35",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs To relationship",
    "depth": 3,
    "text": "This generates queries and mutations that allow you to retrieve the related Comment records from the source Post record and vice versa:"
  },
  {
    "objectID": "Data modeling-36",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs To relationship",
    "depth": 3,
    "text": "@belongsTo can be used without the fields argument. In those cases, a field is automatically generated to reference the parent’s primary key."
  },
  {
    "objectID": "Data modeling-37",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs To relationship",
    "depth": 3,
    "text": "Alternatively, you set up a custom field to store the reference of the parent object. An example bidirectional “has many” relationship is shown below."
  },
  {
    "objectID": "Data modeling-38",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Belongs To relationship",
    "depth": 3,
    "text": "Note: The @belongsTo directive requires that a @hasOne or @hasMany relationship already exists from parent to the related model."
  },
  {
    "objectID": "Data modeling-39",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Many-to-many relationship",
    "depth": 3,
    "text": "Create a many-to-many relationship between two models with the @manyToMany directive. Provide a common relationName on both models to join them into a many-to-many relationship."
  },
  {
    "objectID": "Data modeling-40",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Many-to-many relationship",
    "depth": 3,
    "text": "Under the hood, the @manyToMany directive will create a \"join table\" named after the relationName to facilitate the many-to-many relationship. This generates queries and mutations that allow you to retrieve the related Comment records from the source Post record and vice versa:"
  },
  {
    "objectID": "Data modeling-41",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Assign default values for fields",
    "depth": 2,
    "text": "You can use the @default directive to specify a default value for optional scalar type fields such as Int, String, and more."
  },
  {
    "objectID": "Data modeling-42",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Assign default values for fields",
    "depth": 2,
    "text": "If you create a new Todo and don't supply a content input, Amplify will ensure that My new Todo is auto populated as a value.\nWhen @default is applied, non-null assertions using ! are disregarded. For example, String! is treated the same as String."
  },
  {
    "objectID": "Data modeling-43",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Rename generated queries, mutations, and subscriptions",
    "depth": 3,
    "text": "You can override the names of any @model-generated GraphQL queries, mutations, and subscriptions by supplying the desired name."
  },
  {
    "objectID": "Data modeling-44",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Rename generated queries, mutations, and subscriptions",
    "depth": 3,
    "text": "In the example above, we will be able to run a queryForTodo query to get a single Todo element."
  },
  {
    "objectID": "Data modeling-45",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Disable generated queries, mutations, and subscriptions",
    "depth": 3,
    "text": "We can disable specific operations by assigning their value to null."
  },
  {
    "objectID": "Data modeling-46",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Disable generated queries, mutations, and subscriptions",
    "depth": 3,
    "text": "The example above disables the getTodo query, all mutations, and all subscriptions while allowing the generation of other queries such as listTodo."
  },
  {
    "objectID": "Data modeling-47",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a custom query",
    "depth": 3,
    "text": "We can disable the get query and create a custom query that enables us to retrieve a single Todo model."
  },
  {
    "objectID": "Data modeling-48",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a custom query",
    "depth": 3,
    "text": "The example above creates a custom query that utilizes the @function directive to call a Lambda function for this query."
  },
  {
    "objectID": "Data modeling-49",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating a custom query",
    "depth": 3,
    "text": "For the type definitions of queries, mutations, and subscriptions, see Type Definitions of the @model Directive."
  },
  {
    "objectID": "Data modeling-50",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize creation and update timestamps",
    "depth": 3,
    "text": "The @model directive automatically adds createdAt and updatedAt timestamps to each entity. The timestamp field names can be changed by passing timestamps attribute to the directive."
  },
  {
    "objectID": "Data modeling-51",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Customize creation and update timestamps",
    "depth": 3,
    "text": "For example, the schema above will allow you to query for the following contents:"
  },
  {
    "objectID": "Data modeling-52",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Modify subscriptions (real-time updates) access level",
    "depth": 3,
    "text": "By default, real-time updates are on for all @model types, which means customers receive real-time updates and authorization rules are applied during initial connection time. You can also turn off subscriptions for that model or make the real-time updates public, receivable by all subscribers."
  },
  {
    "objectID": "Data modeling-53",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Create multiple relationships between two models",
    "depth": 3,
    "text": "You need to explicitly specify the connection field names if relational directives are used to create two connections of the same type between the two models."
  },
  {
    "objectID": "Data modeling-54",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "The @model directive will generate:"
  },
  {
    "objectID": "Data modeling-55",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "An Amazon DynamoDB table with PAY_PER_REQUEST billing mode enabled by default."
  },
  {
    "objectID": "Data modeling-56",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "An AWS AppSync DataSource configured to access the table above."
  },
  {
    "objectID": "Data modeling-57",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "An AWS IAM role attached to the DataSource that allows AWS AppSync to call the above table on your behalf."
  },
  {
    "objectID": "Data modeling-58",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "Up to 8 resolvers (create, update, delete, get, list, onCreate, onUpdate, onDelete) but this is configurable via the queries, mutations, and subscriptions arguments on the @model directive."
  },
  {
    "objectID": "Data modeling-59",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "Input objects for create, update, and delete mutations."
  },
  {
    "objectID": "Data modeling-60",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "Filter input objects that allow you to filter objects in list queries and relationship fields."
  },
  {
    "objectID": "Data modeling-61",
    "title": "Data modeling",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/data-modeling",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "How it works",
    "depth": 2,
    "text": "For list queries the default number of objects returned is 100. You can override this behavior by setting the limit argument."
  },
  {
    "objectID": "Overview-0",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Amplify CLI's GraphQL API category makes it easy for you to create a new GraphQL API backed by a database. Just define a GraphQL schema and Amplify CLI will automatically transform the schema into a fully functioning GraphQL API powered by AWS AppSync, Amazon DynamoDB, and more."
  },
  {
    "objectID": "Overview-1",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating your first table",
    "depth": 2,
    "text": "First, set up your GraphQL API by running:"
  },
  {
    "objectID": "Overview-2",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating your first table",
    "depth": 2,
    "text": "Accept the default values and your code editor should show a GraphQL schema for a Todo app."
  },
  {
    "objectID": "Overview-3",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating your first table",
    "depth": 2,
    "text": "Every GraphQL type with the @model directive is automatically backed by a new DynamoDB database table."
  },
  {
    "objectID": "Overview-4",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating your first table",
    "depth": 2,
    "text": "input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } allows you to get started quickly without worrying about authorization rules. Review the Authorization rules section to setup the appropriate access control for your GraphQL API."
  },
  {
    "objectID": "Overview-5",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating your first table",
    "depth": 2,
    "text": "Now let's deploy your changes to the cloud:"
  },
  {
    "objectID": "Overview-6",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Creating your first table",
    "depth": 2,
    "text": "That's it! Your API and database tables are set up."
  },
  {
    "objectID": "Overview-7",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup your app code",
    "depth": 2,
    "text": "Use Amplify libraries to connect your app with your GraphQL endpoint."
  },
  {
    "objectID": "Overview-8",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup your app code",
    "depth": 2,
    "text": "Add the Amplify library to your app with yarn or npm:"
  },
  {
    "objectID": "Overview-9",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Setup your app code",
    "depth": 2,
    "text": "In your app's entry point i.e. App.js, import and load the configuration file:"
  },
  {
    "objectID": "Overview-10",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add your first record",
    "depth": 2,
    "text": "Next, let's try to query from the GraphQL API. Follow along the steps below to make a query from a React app:"
  },
  {
    "objectID": "Overview-11",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Add your first record",
    "depth": 2,
    "text": "Then, create your first todo item with the a GraphQL API call:"
  },
  {
    "objectID": "Overview-12",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query records from the table",
    "depth": 2,
    "text": "Use the GraphQL query statement to list all todos in your app:"
  },
  {
    "objectID": "Overview-13",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Query records from the table",
    "depth": 2,
    "text": "You should see the record created above: My first todo!."
  },
  {
    "objectID": "Overview-14",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update the record",
    "depth": 2,
    "text": "To update the record use the GraphQL update mutation:"
  },
  {
    "objectID": "Overview-15",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update the record",
    "depth": 2,
    "text": "The result should contain the updated value: My first updated todo!."
  },
  {
    "objectID": "Overview-16",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Delete a record",
    "depth": 2,
    "text": "Let's clean up our database! Delete the todo by using the delete mutation:"
  },
  {
    "objectID": "Overview-17",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Delete a record",
    "depth": 2,
    "text": "The result output should indicate to you that the record was successfully deleted!"
  },
  {
    "objectID": "Overview-18",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "If you want to update your API, open your project's amplify/backend/api/<api-name>/schema.graphql file (NOT the one in the amplify/backend/api/<api-name>/build folder) and edit it in your favorite code editor. You can compile the amplify/backend/api/<api-name>/schema.graphql file by running:"
  },
  {
    "objectID": "Overview-19",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "and view the compiled schema output in backend/api/~apiname~/build/schema.graphql."
  },
  {
    "objectID": "Overview-20",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "You can then push updated changes with:"
  },
  {
    "objectID": "Overview-21",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "The following schema updates require replacement of the underlying DynamoDB table:"
  },
  {
    "objectID": "Overview-22",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "Removing or renaming a model"
  },
  {
    "objectID": "Overview-23",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "Modifying the primary key of a model"
  },
  {
    "objectID": "Overview-24",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "Modifying a Local Secondary Index of a model (only applies to projects with secondaryKeyAsGSI turned off)"
  },
  {
    "objectID": "Overview-25",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "When trying to push a schema change with one or more of these updates you will see an error message explaining that you will lose ALL DATA in any table that requires replacement. To confirm you want to continue with the deployment, run:"
  },
  {
    "objectID": "Overview-26",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "In general, this command should only be used during development."
  },
  {
    "objectID": "Overview-27",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Update schema",
    "depth": 2,
    "text": "If you are making a breaking change to a production API but you want to retain the data in the affected table(s), you can create a backup before running amplify push --allow-destructive-graphql-schema-updates"
  },
  {
    "objectID": "Overview-28",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Rebuild GraphQL API",
    "depth": 2,
    "text": "Rebuild should NEVER be used in a production environment!"
  },
  {
    "objectID": "Overview-29",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Rebuild GraphQL API",
    "depth": 2,
    "text": "When in development, sometimes test data gets in a bad state or you want to make many changes to your schema all at once. In these cases, you may wish to \"rebuild\" all of the tables backing your schema. To do this, run:"
  },
  {
    "objectID": "Overview-30",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Rebuild GraphQL API",
    "depth": 2,
    "text": "This will recreate ALL of the tables backing models in your schema. ALL DATA in ALL TABLES will be deleted."
  },
  {
    "objectID": "Overview-31",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Success! You've learned how to create a GraphQL API backed by a database table and also how to run queries and mutations from your app."
  },
  {
    "objectID": "Overview-32",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "There's so much more to discover with Amplify's GraphQL API capabilities. Learn more about:"
  },
  {
    "objectID": "Overview-33",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "How to model your database table and their access patterns"
  },
  {
    "objectID": "Overview-34",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Secure your API with fine-grained authorization rules"
  },
  {
    "objectID": "Overview-35",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Create relationships between different database model"
  },
  {
    "objectID": "Overview-36",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Add custom business logic to the GraphQL API"
  },
  {
    "objectID": "Overview-37",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Run search and result aggregation queries"
  },
  {
    "objectID": "Overview-38",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Connect to machine learning services"
  },
  {
    "objectID": "Overview-39",
    "title": "Overview",
    "description": "Add authorization rules to your GraphQL schema to control access to your data.",
    "slug": "/cli/graphql/overview",
    "category": "Amplify CLI",
    "subcategory": "API (GraphQL)",
    "type": "article",
    "heading": "Next steps",
    "depth": 2,
    "text": "Examples and solutions"
  },
  {
    "objectID": "Typical workflows-0",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "To initialize a new Amplify project, run the following command from the root directory of your frontend app."
  },
  {
    "objectID": "Typical workflows-1",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "The init command goes through the following steps:"
  },
  {
    "objectID": "Typical workflows-2",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "Analyzes the project and confirms the frontend settings"
  },
  {
    "objectID": "Typical workflows-3",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "Carries out the initialization logic of the selected frontend"
  },
  {
    "objectID": "Typical workflows-4",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "If there are multiple provider plugins, prompts to select the plugins that will provide accesses to cloud resources"
  },
  {
    "objectID": "Typical workflows-5",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "Carries out, in sequence, the initialization logic of the selected plugin(s)"
  },
  {
    "objectID": "Typical workflows-6",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "Insert amplify folder structure into the project's root directory, with the initial project configuration"
  },
  {
    "objectID": "Typical workflows-7",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "Generate the project metadata files, with the outputs of the above-selected plugin(s)"
  },
  {
    "objectID": "Typical workflows-8",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Initialize new project",
    "depth": 2,
    "text": "Creates a cloud project in the AWS Amplify Console to view and manage resources for all backend environments."
  },
  {
    "objectID": "Typical workflows-9",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Clone sample Amplify project",
    "depth": 2,
    "text": "To clone a sample amplify fullstack project, execute the following command inside an empty directory:"
  },
  {
    "objectID": "Typical workflows-10",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Clone sample Amplify project",
    "depth": 2,
    "text": "amplify init --app <github-url>"
  },
  {
    "objectID": "Typical workflows-11",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Clone sample Amplify project",
    "depth": 2,
    "text": "where <github-url> is a valid sample Amplify project repository. Click here for more details."
  },
  {
    "objectID": "Typical workflows-12",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify init",
    "depth": 3,
    "text": "The init command can determine defaults for the project based on the contents of the directory. To accept the defaults offered, answer yes to:"
  },
  {
    "objectID": "Typical workflows-13",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify init",
    "depth": 3,
    "text": "Initialize the project with the above configuration?"
  },
  {
    "objectID": "Typical workflows-14",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify init",
    "depth": 3,
    "text": "During the init process, the root stack is created with three resources:"
  },
  {
    "objectID": "Typical workflows-15",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify init",
    "depth": 3,
    "text": "IAM role for unauthenticated users"
  },
  {
    "objectID": "Typical workflows-16",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify init",
    "depth": 3,
    "text": "IAM role for authenticated users"
  },
  {
    "objectID": "Typical workflows-17",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify init",
    "depth": 3,
    "text": "S3 bucket, the deployment bucket, to support this provider's workflow"
  },
  {
    "objectID": "Typical workflows-18",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify init",
    "depth": 3,
    "text": "The provider logs the information of the root stack and the resources into the project metadata file (amplify/backend/amplify-meta.json)."
  },
  {
    "objectID": "Typical workflows-19",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify <category> add",
    "depth": 3,
    "text": "Once init is complete, run the command amplify <category> add to add resources of a category to the cloud. This will place a CloudFormation template for the resources of this category in the category's subdirectory amplify/backend/<category> and insert its reference into the above-mentioned root stack as the nested child stack. When working in teams, it is good practice to run an amplify pull before modifying the backend categories."
  },
  {
    "objectID": "Typical workflows-20",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify push",
    "depth": 3,
    "text": "Once you have made your category updates, run the command amplify push to update the cloud resources. The CLI will first upload the latest versions of the category nested stack templates to the S3 deployment bucket, and then call the AWS CloudFormation API to create / update resources in the cloud. Based upon the resources added/updated, the aws-exports.js file (for JS projects) and the awsconfiguration.json file (for native projects) gets created/updated. The root stack's template can be found in amplify/backend/awscloudformation."
  },
  {
    "objectID": "Typical workflows-21",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "The amplify pull command operates similar to a git pull, fetching upstream backend environment definition changes from the cloud* and update the local environment to match that definition. The command is particularly helpful in team scenarios when multiple team members are editing the same backend, pulling a backend into a new project, or when connecting to multiple frontend projects that share the same Amplify backend environment."
  },
  {
    "objectID": "Typical workflows-22",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "* The CLI will use the S3 deployment bucket to retrieve your project information including the CloudFormation templates from the last successful amplify push."
  },
  {
    "objectID": "Typical workflows-23",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "To generate client configuration files (aws-exports.js, amplifyconfiguration.json, or amplifyconfiguration.dart) for an existing project that is listed in the Amplify Hosting console, or to checkout a backend environment that has not been pulled locally:"
  },
  {
    "objectID": "Typical workflows-24",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "Log in to the AWS console"
  },
  {
    "objectID": "Typical workflows-25",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "Choose AWS Amplify"
  },
  {
    "objectID": "Typical workflows-26",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "Click your app"
  },
  {
    "objectID": "Typical workflows-27",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "Go to Backend environments"
  },
  {
    "objectID": "Typical workflows-28",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "Find the backend environment you wish to pull"
  },
  {
    "objectID": "Typical workflows-29",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "Click Edit backend"
  },
  {
    "objectID": "Typical workflows-30",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify pull",
    "depth": 3,
    "text": "Run the command that is listed (amplify pull --appId YOUR_APP_ID --envName YOUR_ENV_NAME)"
  },
  {
    "objectID": "Typical workflows-31",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify console",
    "depth": 3,
    "text": "The amplify console command launches the browser directing you to your cloud project in the AWS Amplify Console. The Amplify Console provides a central location for development teams to view and manage their backend environments, status of the backend deployment, deep-links to the backend resources by Amplify category, and instructions on how to pull, clone, update, or delete environments."
  },
  {
    "objectID": "Typical workflows-32",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify configure project",
    "depth": 3,
    "text": "The amplify configure project command is an advanced command and not commonly used for initial getting started projects. The command should be used to modify the project configuration present in the .config/ directory and re-configuring AWS credentials (based on profile on your local machine) set up during the amplify init step. The .config/ directory is generated in the amplify/ directory, if not already present, and the local-aws-info.json, local-env-info.json and project-info.json files are configured to reflect the selections made as a part of the amplify configure project command."
  },
  {
    "objectID": "Typical workflows-33",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify configure project",
    "depth": 3,
    "text": "amplify configure project is also used to enable Serverless Container options in your project with Amazon Elastic Container Service. When enabled, you will be able to build APIs with both AWS Lambda and AWS Fargate using a Dockerfile or a Docker Compose file. See Serverless Containers for more information."
  },
  {
    "objectID": "Typical workflows-34",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "amplify logout --appId <Amplify App Id>",
    "depth": 3,
    "text": "When Amplify CLI is authenticated with Amplify Studio, JSON Web Tokens (JWTs) are stored on the developer's machine. This command will remove the JWTs associated with a particular Amplify app. The CLI will also prompt if you want to logout from all sessions. 'Yes' will remove the JWTs and ensure they are invalidated globally. 'No' will still remove the locally-stored JWTs but the tokens will remain valid until they expire."
  },
  {
    "objectID": "Typical workflows-35",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Upgrade Amplify CLI",
    "depth": 2,
    "text": "The Amplify CLI team continuously pushes new features, enhancements and security improvements and it is recommended to update the Amplify CLI version which you or your team is using to the latest version. You can keep track of the latest releases of the Amplify CLI on npm - https://www.npmjs.com/package/@aws-amplify/cli"
  },
  {
    "objectID": "Typical workflows-36",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Verify Amplify CLI upgrade",
    "depth": 3,
    "text": "Verify the successful installation of the latest CLI version by entering the following command in the CLI:"
  },
  {
    "objectID": "Typical workflows-37",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Verify Amplify CLI upgrade",
    "depth": 3,
    "text": "Confirm the installed version of the Amplify CLI. You can find the latest version of the CLI here - https://www.npmjs.com/package/@aws-amplify/cli."
  },
  {
    "objectID": "Typical workflows-38",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "(Optional) Update projects using latest Amplify CLI",
    "depth": 3,
    "text": "Navigate to your Amplify project folder using the following command cd <Project-Filepath>. To verify if it is a valid Amplify project folder, enter the following command in the CLI:"
  },
  {
    "objectID": "Typical workflows-39",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "(Optional) Update projects using latest Amplify CLI",
    "depth": 3,
    "text": "If it is a valid Amplify project folder, Amplify will display a list of the resources in the project folder that you have deployed to the AWS cloud."
  },
  {
    "objectID": "Typical workflows-40",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "(Optional) Update projects using latest Amplify CLI",
    "depth": 3,
    "text": "Update your backend resources with updated security configurations or improvements by entering the following command in the CLI:"
  },
  {
    "objectID": "Typical workflows-41",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "(Optional) Update projects using latest Amplify CLI",
    "depth": 3,
    "text": "Hit Enter or type Y when prompted for confirmations. Look for the following result to validate the configuration updates have been applied."
  },
  {
    "objectID": "Typical workflows-42",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "(Optional) Update projects using latest Amplify CLI",
    "depth": 3,
    "text": "If you have multiple AWS Amplify project folders, repeat steps above for each project folder."
  },
  {
    "objectID": "Typical workflows-43",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "(Optional) Update projects using latest Amplify CLI",
    "depth": 3,
    "text": "If you are receiving errors on push regarding unknown GraphQL directives and have not yet migrated your GraphQL resource to use GraphQL Transformer v2, please review the migration documentation page for an in-depth guide to migrating the resource."
  },
  {
    "objectID": "Typical workflows-44",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Uninstall Amplify CLI",
    "depth": 2,
    "text": "Use the following commands to completely remove Amplify CLI from your system. Removing the Amplify CLI will NOT delete any of your Amplify projects.\nTo delete a project, run amplify delete within the project directory."
  },
  {
    "objectID": "Typical workflows-45",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify <category> <subcommand>"
  },
  {
    "objectID": "Typical workflows-46",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify push"
  },
  {
    "objectID": "Typical workflows-47",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify pull"
  },
  {
    "objectID": "Typical workflows-48",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify env <subcommand>"
  },
  {
    "objectID": "Typical workflows-49",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify configure"
  },
  {
    "objectID": "Typical workflows-50",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify console"
  },
  {
    "objectID": "Typical workflows-51",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify delete"
  },
  {
    "objectID": "Typical workflows-52",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify help"
  },
  {
    "objectID": "Typical workflows-53",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify init"
  },
  {
    "objectID": "Typical workflows-54",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify publish"
  },
  {
    "objectID": "Typical workflows-55",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify run"
  },
  {
    "objectID": "Typical workflows-56",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify status"
  },
  {
    "objectID": "Typical workflows-57",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "List of commands",
    "depth": 2,
    "text": "amplify logout"
  },
  {
    "objectID": "Typical workflows-58",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Category commands",
    "depth": 3,
    "text": "amplify <category> add"
  },
  {
    "objectID": "Typical workflows-59",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Category commands",
    "depth": 3,
    "text": "amplify <category> update"
  },
  {
    "objectID": "Typical workflows-60",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Category commands",
    "depth": 3,
    "text": "amplify <category> remove"
  },
  {
    "objectID": "Typical workflows-61",
    "title": "Typical workflows",
    "description": "How to initialize a new Amplify project and other typical Amplify CLI workflows & commands.",
    "slug": "/cli/start/workflows",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Category commands",
    "depth": 3,
    "text": "amplify <category> push"
  },
  {
    "objectID": "Installation-0",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Install the Amplify CLI",
    "depth": 2,
    "text": "The Amplify Command Line Interface (CLI) is a unified toolchain to create AWS cloud services for your app. Let's go ahead and install the Amplify CLI."
  },
  {
    "objectID": "Installation-1",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Pre-requisites for installation",
    "depth": 3,
    "text": "Install Node.js® and NPM if they are not already on your machine."
  },
  {
    "objectID": "Installation-2",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Pre-requisites for installation",
    "depth": 3,
    "text": "Verify that you are running at least Node.js version 12.x and npm version 6.x or greater by running node -v and npm -v in a terminal/console window"
  },
  {
    "objectID": "Installation-3",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Pre-requisites for installation",
    "depth": 3,
    "text": "Create AWS Account. If you don't already have an AWS account, you'll need to create one in order to follow the steps outlined in this tutorial."
  },
  {
    "objectID": "Installation-4",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Configure the Amplify CLI",
    "depth": 2,
    "text": "To set up the Amplify CLI on your local machine, you have to configure it to connect to your AWS account."
  },
  {
    "objectID": "Installation-5",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Option 1: Watch the video guide",
    "depth": 3,
    "text": "Watch the video below to learn how to install and configure the Amplify CLI or skip to the next section to follow the step-by-step instructions."
  },
  {
    "objectID": "Installation-6",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Option 2: Follow the instructions",
    "depth": 3,
    "text": "Configure Amplify by running the following command:"
  },
  {
    "objectID": "Installation-7",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Option 2: Follow the instructions",
    "depth": 3,
    "text": "amplify configure will ask you to sign into the AWS Console."
  },
  {
    "objectID": "Installation-8",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Option 2: Follow the instructions",
    "depth": 3,
    "text": "Once you're signed in, Amplify CLI will ask you to create an IAM user."
  },
  {
    "objectID": "Installation-9",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Option 2: Follow the instructions",
    "depth": 3,
    "text": "Amazon IAM (Identity and Access Management) enables you to manage users and user permissions in AWS. You can learn more about Amazon IAM here."
  },
  {
    "objectID": "Installation-10",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Option 2: Follow the instructions",
    "depth": 3,
    "text": "Create a user with AdministratorAccess-Amplify to your account to provision AWS resources for you like AppSync, Cognito etc."
  },
  {
    "objectID": "Installation-12",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Option 2: Follow the instructions",
    "depth": 3,
    "text": "Once the user is created, Amplify CLI will ask you to provide the accessKeyId and the secretAccessKey to connect Amplify CLI with your newly created IAM user."
  },
  {
    "objectID": "Installation-13",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Option 2: Follow the instructions",
    "depth": 3,
    "text": "It is recommended to create a new IAM user for every device that installs the Amplify CLI, rather than attempt to use an existing IAM user used on another device. Having a distinct user for each machine provides the best level of visibility and control without breaking the deployment of your app, allowing for the quick deactivation of an individual machine if needed."
  },
  {
    "objectID": "Installation-14",
    "title": "Installation",
    "description": "How to install & configure Amplify CLI",
    "slug": "/cli/start/install",
    "category": "Amplify CLI",
    "subcategory": "Get started",
    "type": "article",
    "heading": "Work within your frontend project",
    "depth": 3,
    "text": "After you install the CLI, navigate to a JavaScript, iOS, or Android project root, initialize AWS Amplify in the new directory by running amplify init. After a few configuration questions, you can use amplify help at any time to see the overall command structure. When you’re ready to add a feature, run amplify add <category>."
  },
  {
    "objectID": "Translations - React Native-0",
    "title": "Translations - React Native",
    "description": "Internationalization and Custom Text - React Native",
    "slug": "/ui/customization/translations/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Customizing text and adding language translations can be done via the I18n module:"
  },
  {
    "objectID": "Translations - React Native-1",
    "title": "Translations - React Native",
    "description": "Internationalization and Custom Text - React Native",
    "slug": "/ui/customization/translations/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "A complete list of all translatable strings can be found in Translations.ts."
  },
  {
    "objectID": "Customizing CSS - React Native-0",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "You can control top level components directly using CSS. For instance, to control the layout of the amplify-authenticator, we can specify the properties directly inside of its selector."
  },
  {
    "objectID": "Customizing CSS - React Native-1",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The top level control is available for the following components. Note: The components needs to be rolled out in the client in order to enable this CSS update."
  },
  {
    "objectID": "Customizing CSS - React Native-2",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify-sign-in"
  },
  {
    "objectID": "Customizing CSS - React Native-3",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify-confirm-sign-in"
  },
  {
    "objectID": "Customizing CSS - React Native-4",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify-sign-up"
  },
  {
    "objectID": "Customizing CSS - React Native-5",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify-confirm-sign-up"
  },
  {
    "objectID": "Customizing CSS - React Native-6",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify-forgot-password"
  },
  {
    "objectID": "Customizing CSS - React Native-7",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify-require-new-password"
  },
  {
    "objectID": "Customizing CSS - React Native-8",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify-verify-contact"
  },
  {
    "objectID": "Customizing CSS - React Native-9",
    "title": "Customizing CSS - React Native",
    "description": "Managing the layout and styling of Components - React Native",
    "slug": "/ui/customization/customizing-css/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Customization",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "amplify-totp-setup"
  },
  {
    "objectID": "Authenticator - Flutter-0",
    "title": "Authenticator - Flutter",
    "description": "Authenticator UI component - Flutter",
    "slug": "/ui/auth/authenticator/q/framework/flutter",
    "category": "Amplify UI Components",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "A simple way to add authentication flows into your app is to use the Authenticator component. The Authenticator component encapsulates an authentication workflow in the framework of your choice and is backed by the cloud resources set up in your Auth cloud resources."
  },
  {
    "objectID": "Authenticator - React Native-0",
    "title": "Authenticator - React Native",
    "description": "Authenticator UI component - React Native",
    "slug": "/ui/auth/authenticator/q/framework/react-native",
    "category": "Amplify UI Components",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "A simple way to add authentication flows into your app is to use the Authenticator component. The Authenticator component encapsulates an authentication workflow in the framework of your choice and is backed by the cloud resources set up in your Auth cloud resources."
  },
  {
    "objectID": "Lambda triggers - JavaScript-0",
    "title": "Lambda triggers - JavaScript",
    "description": "Learn more about how to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers. The CLI supports associating Lambda triggers with S3 and DynamoDB events.  - JavaScript",
    "slug": "/lib/storage/triggers/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you are looking to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers, the CLI supports associating Lambda triggers with S3 and DynamoDB events. For example, this can be useful for a use case where you want to invoke a Lambda function after a create or update operation on a DynamoDB table managed by the Amplify CLI."
  },
  {
    "objectID": "Lambda triggers - JavaScript-1",
    "title": "Lambda triggers - JavaScript",
    "description": "Learn more about how to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers. The CLI supports associating Lambda triggers with S3 and DynamoDB events.  - JavaScript",
    "slug": "/lib/storage/triggers/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For more information on this topic, please read on File Storage Lambda Triggers through our Amplify CLI documentation."
  },
  {
    "objectID": "Lambda triggers - Flutter-0",
    "title": "Lambda triggers - Flutter",
    "description": "Learn more about how to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers. The CLI supports associating Lambda triggers with S3 and DynamoDB events.  - Flutter",
    "slug": "/lib/storage/triggers/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you are looking to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers, the CLI supports associating Lambda triggers with S3 and DynamoDB events. For example, this can be useful for a use case where you want to invoke a Lambda function after a create or update operation on a DynamoDB table managed by the Amplify CLI."
  },
  {
    "objectID": "Lambda triggers - Flutter-1",
    "title": "Lambda triggers - Flutter",
    "description": "Learn more about how to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers. The CLI supports associating Lambda triggers with S3 and DynamoDB events.  - Flutter",
    "slug": "/lib/storage/triggers/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For more information on this topic, please read on File Storage Lambda Triggers through our Amplify CLI documentation."
  },
  {
    "objectID": "Lambda triggers - iOS-0",
    "title": "Lambda triggers - iOS",
    "description": "Learn more about how to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers. The CLI supports associating Lambda triggers with S3 and DynamoDB events.  - iOS",
    "slug": "/lib/storage/triggers/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you are looking to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers, the CLI supports associating Lambda triggers with S3 and DynamoDB events. For example, this can be useful for a use case where you want to invoke a Lambda function after a create or update operation on a DynamoDB table managed by the Amplify CLI."
  },
  {
    "objectID": "Lambda triggers - iOS-1",
    "title": "Lambda triggers - iOS",
    "description": "Learn more about how to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers. The CLI supports associating Lambda triggers with S3 and DynamoDB events.  - iOS",
    "slug": "/lib/storage/triggers/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For more information on this topic, please read on File Storage Lambda Triggers through our Amplify CLI documentation."
  },
  {
    "objectID": "Lambda triggers - Android-0",
    "title": "Lambda triggers - Android",
    "description": "Learn more about how to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers. The CLI supports associating Lambda triggers with S3 and DynamoDB events.  - Android",
    "slug": "/lib/storage/triggers/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "If you are looking to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers, the CLI supports associating Lambda triggers with S3 and DynamoDB events. For example, this can be useful for a use case where you want to invoke a Lambda function after a create or update operation on a DynamoDB table managed by the Amplify CLI."
  },
  {
    "objectID": "Lambda triggers - Android-1",
    "title": "Lambda triggers - Android",
    "description": "Learn more about how to enable triggers for the Storage Category with Amazon S3 & Amazon DynamoDB as Providers. The CLI supports associating Lambda triggers with S3 and DynamoDB events.  - Android",
    "slug": "/lib/storage/triggers/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "For more information on this topic, please read on File Storage Lambda Triggers through our Amplify CLI documentation."
  },
  {
    "objectID": "Concepts - JavaScript-0",
    "title": "Concepts - JavaScript",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - JavaScript",
    "slug": "/lib/storage/overview/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Amplify storage module provides a simple mechanism for managing user content for your app in public, protected or private storage buckets. The storage category comes with built-in support for Amazon S3 (Simple Storage Service)."
  },
  {
    "objectID": "Concepts - JavaScript-2",
    "title": "Concepts - JavaScript",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - JavaScript",
    "slug": "/lib/storage/overview/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Core Concepts",
    "depth": 2,
    "text": "Amazon S3 stores data as objects within container buckets. An object consists of a file and optionally any metadata that describes that file. To store an object in Amazon S3, you upload the file you want to store to a bucket. When you upload a file, you can set permissions on the object and any metadata."
  },
  {
    "objectID": "Concepts - JavaScript-3",
    "title": "Concepts - JavaScript",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - JavaScript",
    "slug": "/lib/storage/overview/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Core Concepts",
    "depth": 2,
    "text": "Buckets are the containers for objects. You can have one or more buckets. For each bucket, you can control access to it (who can create, delete, and list objects in the bucket), view access logs for it and its objects, and choose the geographical region where Amazon S3 will store the bucket and its contents."
  },
  {
    "objectID": "Concepts - JavaScript-4",
    "title": "Concepts - JavaScript",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - JavaScript",
    "slug": "/lib/storage/overview/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Accessing AWS services",
    "depth": 2,
    "text": "With storage, it's important to understand user-level access to storage assets. While Amplify helps with abstraction with provisioning your S3 buckets, it is important to understand the right level of control for your customers."
  },
  {
    "objectID": "Concepts - JavaScript-5",
    "title": "Concepts - JavaScript",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - JavaScript",
    "slug": "/lib/storage/overview/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Accessing AWS services",
    "depth": 2,
    "text": "When you run amplify add storage, the CLI will configure appropriate IAM policies on the bucket using a Cognito Identity Pool Role. You will have the option of adding CRUD (Create, Update, Read and Delete) based permissions as well, so that Authenticated and Guest users will be granted limited permissions within these levels."
  },
  {
    "objectID": "Concepts - Flutter-0",
    "title": "Concepts - Flutter",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Flutter",
    "slug": "/lib/storage/overview/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Amplify storage module provides a simple mechanism for managing user content for your app in public, protected or private storage buckets. The storage category comes with built-in support for Amazon S3 (Simple Storage Service)."
  },
  {
    "objectID": "Concepts - Flutter-2",
    "title": "Concepts - Flutter",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Flutter",
    "slug": "/lib/storage/overview/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Core Concepts",
    "depth": 2,
    "text": "Amazon S3 stores data as objects within container buckets. An object consists of a file and optionally any metadata that describes that file. To store an object in Amazon S3, you upload the file you want to store to a bucket. When you upload a file, you can set permissions on the object and any metadata."
  },
  {
    "objectID": "Concepts - Flutter-3",
    "title": "Concepts - Flutter",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Flutter",
    "slug": "/lib/storage/overview/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Core Concepts",
    "depth": 2,
    "text": "Buckets are the containers for objects. You can have one or more buckets. For each bucket, you can control access to it (who can create, delete, and list objects in the bucket), view access logs for it and its objects, and choose the geographical region where Amazon S3 will store the bucket and its contents."
  },
  {
    "objectID": "Concepts - Flutter-4",
    "title": "Concepts - Flutter",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Flutter",
    "slug": "/lib/storage/overview/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Accessing AWS services",
    "depth": 2,
    "text": "With storage, it's important to understand user-level access to storage assets. While Amplify helps with abstraction with provisioning your S3 buckets, it is important to understand the right level of control for your customers."
  },
  {
    "objectID": "Concepts - Flutter-5",
    "title": "Concepts - Flutter",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Flutter",
    "slug": "/lib/storage/overview/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Accessing AWS services",
    "depth": 2,
    "text": "When you run amplify add storage, the CLI will configure appropriate IAM policies on the bucket using a Cognito Identity Pool Role. You will have the option of adding CRUD (Create, Update, Read and Delete) based permissions as well, so that Authenticated and Guest users will be granted limited permissions within these levels."
  },
  {
    "objectID": "Concepts - iOS-0",
    "title": "Concepts - iOS",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - iOS",
    "slug": "/lib/storage/overview/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Amplify storage module provides a simple mechanism for managing user content for your app in public, protected or private storage buckets. The storage category comes with built-in support for Amazon S3 (Simple Storage Service)."
  },
  {
    "objectID": "Concepts - iOS-2",
    "title": "Concepts - iOS",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - iOS",
    "slug": "/lib/storage/overview/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Core Concepts",
    "depth": 2,
    "text": "Amazon S3 stores data as objects within container buckets. An object consists of a file and optionally any metadata that describes that file. To store an object in Amazon S3, you upload the file you want to store to a bucket. When you upload a file, you can set permissions on the object and any metadata."
  },
  {
    "objectID": "Concepts - iOS-3",
    "title": "Concepts - iOS",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - iOS",
    "slug": "/lib/storage/overview/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Core Concepts",
    "depth": 2,
    "text": "Buckets are the containers for objects. You can have one or more buckets. For each bucket, you can control access to it (who can create, delete, and list objects in the bucket), view access logs for it and its objects, and choose the geographical region where Amazon S3 will store the bucket and its contents."
  },
  {
    "objectID": "Concepts - iOS-4",
    "title": "Concepts - iOS",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - iOS",
    "slug": "/lib/storage/overview/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Accessing AWS services",
    "depth": 2,
    "text": "With storage, it's important to understand user-level access to storage assets. While Amplify helps with abstraction with provisioning your S3 buckets, it is important to understand the right level of control for your customers."
  },
  {
    "objectID": "Concepts - iOS-5",
    "title": "Concepts - iOS",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - iOS",
    "slug": "/lib/storage/overview/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Accessing AWS services",
    "depth": 2,
    "text": "When you run amplify add storage, the CLI will configure appropriate IAM policies on the bucket using a Cognito Identity Pool Role. You will have the option of adding CRUD (Create, Update, Read and Delete) based permissions as well, so that Authenticated and Guest users will be granted limited permissions within these levels."
  },
  {
    "objectID": "Concepts - Android-0",
    "title": "Concepts - Android",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Android",
    "slug": "/lib/storage/overview/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Amplify storage module provides a simple mechanism for managing user content for your app in public, protected or private storage buckets. The storage category comes with built-in support for Amazon S3 (Simple Storage Service)."
  },
  {
    "objectID": "Concepts - Android-2",
    "title": "Concepts - Android",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Android",
    "slug": "/lib/storage/overview/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Core Concepts",
    "depth": 2,
    "text": "Amazon S3 stores data as objects within container buckets. An object consists of a file and optionally any metadata that describes that file. To store an object in Amazon S3, you upload the file you want to store to a bucket. When you upload a file, you can set permissions on the object and any metadata."
  },
  {
    "objectID": "Concepts - Android-3",
    "title": "Concepts - Android",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Android",
    "slug": "/lib/storage/overview/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "S3 Core Concepts",
    "depth": 2,
    "text": "Buckets are the containers for objects. You can have one or more buckets. For each bucket, you can control access to it (who can create, delete, and list objects in the bucket), view access logs for it and its objects, and choose the geographical region where Amazon S3 will store the bucket and its contents."
  },
  {
    "objectID": "Concepts - Android-4",
    "title": "Concepts - Android",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Android",
    "slug": "/lib/storage/overview/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Accessing AWS services",
    "depth": 2,
    "text": "With storage, it's important to understand user-level access to storage assets. While Amplify helps with abstraction with provisioning your S3 buckets, it is important to understand the right level of control for your customers."
  },
  {
    "objectID": "Concepts - Android-5",
    "title": "Concepts - Android",
    "description": "Learn more about the foundational storage concepts for cloud-based application and how they work with Amplify Framework. - Android",
    "slug": "/lib/storage/overview/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "Storage",
    "type": "article",
    "heading": "Accessing AWS services",
    "depth": 2,
    "text": "When you run amplify add storage, the CLI will configure appropriate IAM policies on the bucket using a Cognito Identity Pool Role. You will have the option of adding CRUD (Create, Update, Read and Delete) based permissions as well, so that Authenticated and Guest users will be granted limited permissions within these levels."
  },
  {
    "objectID": "DataStore Events - JavaScript-0",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "DataStore periodically publishes state notifications onto Amplify's Hub. You can subscribe to the Hub to gain insight into the internal state of the DataStore. Events are published when:"
  },
  {
    "objectID": "DataStore Events - JavaScript-1",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Your device loses or regains network connectivity;"
  },
  {
    "objectID": "DataStore Events - JavaScript-2",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Data is synchronized with the Cloud;"
  },
  {
    "objectID": "DataStore Events - JavaScript-3",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "There are new, pending changes that have not yet been synchronized."
  },
  {
    "objectID": "DataStore Events - JavaScript-4",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The following DataStore events are defined:"
  },
  {
    "objectID": "DataStore Events - JavaScript-5",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "Dispatched when DataStore starts and every time network status changes"
  },
  {
    "objectID": "DataStore Events - JavaScript-6",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "HubPayload NetworkStatusEvent contains:"
  },
  {
    "objectID": "DataStore Events - JavaScript-7",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "active (Bool): true if the DataStore is on a network that can connect the Cloud; false, otherwise"
  },
  {
    "objectID": "DataStore Events - JavaScript-8",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "subscriptionsEstablished",
    "depth": 2,
    "text": "Dispatched when DataStore has finished establishing its subscriptions to all models"
  },
  {
    "objectID": "DataStore Events - JavaScript-9",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "subscriptionsEstablished",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - JavaScript-10",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "Dispatched when DataStore is about to perform its initial sync queries"
  },
  {
    "objectID": "DataStore Events - JavaScript-11",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "HubPayload syncQueriesStartedEvent contains:"
  },
  {
    "objectID": "DataStore Events - JavaScript-12",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "models ([String]): an array of each model's name"
  },
  {
    "objectID": "DataStore Events - JavaScript-13",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesReady",
    "depth": 2,
    "text": "Dispatched when all models have been synced from the cloud"
  },
  {
    "objectID": "DataStore Events - JavaScript-14",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesReady",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - JavaScript-15",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "ready",
    "depth": 2,
    "text": "Dispatched when DataStore as a whole is ready, at this point all data is available"
  },
  {
    "objectID": "DataStore Events - JavaScript-16",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "ready",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - JavaScript-17",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "Dispatched when:"
  },
  {
    "objectID": "DataStore Events - JavaScript-18",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "the DataStore starts"
  },
  {
    "objectID": "DataStore Events - JavaScript-19",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "each time a local mutation is enqueued into the outbox"
  },
  {
    "objectID": "DataStore Events - JavaScript-20",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "each time a local mutation is finished processing"
  },
  {
    "objectID": "DataStore Events - JavaScript-21",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "HubPayload OutboxStatusEvent contains:"
  },
  {
    "objectID": "DataStore Events - JavaScript-22",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "isEmpty (Bool): a boolean value indicating that there are no local changes still pending upload to the Cloud"
  },
  {
    "objectID": "DataStore Events - JavaScript-23",
    "title": "DataStore Events - JavaScript",
    "description": "Listening to DataStore events - JavaScript",
    "slug": "/lib/datastore/datastore-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "Usage",
    "depth": 2,
    "text": "To see if the network status is active, you could set up the following listener:"
  },
  {
    "objectID": "DataStore Events - iOS-0",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "DataStore periodically publishes state notifications onto Amplify's Hub. You can subscribe to the Hub to gain insight into the internal state of the DataStore. Events are published when:"
  },
  {
    "objectID": "DataStore Events - iOS-1",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Your device loses or regains network connectivity;"
  },
  {
    "objectID": "DataStore Events - iOS-2",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Data is synchronized with the Cloud;"
  },
  {
    "objectID": "DataStore Events - iOS-3",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "There are new, pending changes that have not yet been synchronized."
  },
  {
    "objectID": "DataStore Events - iOS-4",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The following DataStore events are defined:"
  },
  {
    "objectID": "DataStore Events - iOS-5",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "Dispatched when DataStore starts and every time network status changes"
  },
  {
    "objectID": "DataStore Events - iOS-6",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "HubPayload NetworkStatusEvent contains:"
  },
  {
    "objectID": "DataStore Events - iOS-7",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "active (Bool): true if the DataStore is on a network that can connect the Cloud; false, otherwise"
  },
  {
    "objectID": "DataStore Events - iOS-8",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "subscriptionsEstablished",
    "depth": 2,
    "text": "Dispatched when DataStore has finished establishing its subscriptions to all models"
  },
  {
    "objectID": "DataStore Events - iOS-9",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "subscriptionsEstablished",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - iOS-10",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "Dispatched when DataStore is about to perform its initial sync queries"
  },
  {
    "objectID": "DataStore Events - iOS-11",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "HubPayload syncQueriesStartedEvent contains:"
  },
  {
    "objectID": "DataStore Events - iOS-12",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "models ([String]): an array of each model's name"
  },
  {
    "objectID": "DataStore Events - iOS-13",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesReady",
    "depth": 2,
    "text": "Dispatched when all models have been synced from the cloud"
  },
  {
    "objectID": "DataStore Events - iOS-14",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesReady",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - iOS-15",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "ready",
    "depth": 2,
    "text": "Dispatched when DataStore as a whole is ready, at this point all data is available"
  },
  {
    "objectID": "DataStore Events - iOS-16",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "ready",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - iOS-17",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "Dispatched when:"
  },
  {
    "objectID": "DataStore Events - iOS-18",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "the DataStore starts"
  },
  {
    "objectID": "DataStore Events - iOS-19",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "each time a local mutation is enqueued into the outbox"
  },
  {
    "objectID": "DataStore Events - iOS-20",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "each time a local mutation is finished processing"
  },
  {
    "objectID": "DataStore Events - iOS-21",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "HubPayload OutboxStatusEvent contains:"
  },
  {
    "objectID": "DataStore Events - iOS-22",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "isEmpty (Bool): a boolean value indicating that there are no local changes still pending upload to the Cloud"
  },
  {
    "objectID": "DataStore Events - iOS-23",
    "title": "DataStore Events - iOS",
    "description": "Listening to DataStore events - iOS",
    "slug": "/lib/datastore/datastore-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "Usage",
    "depth": 2,
    "text": "To see if the network status is active, you could set up the following listener:"
  },
  {
    "objectID": "DataStore Events - Flutter-0",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "DataStore periodically publishes state notifications onto Amplify's Hub. You can subscribe to the Hub to gain insight into the internal state of the DataStore. Events are published when:"
  },
  {
    "objectID": "DataStore Events - Flutter-1",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Your device loses or regains network connectivity;"
  },
  {
    "objectID": "DataStore Events - Flutter-2",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Data is synchronized with the Cloud;"
  },
  {
    "objectID": "DataStore Events - Flutter-3",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "There are new, pending changes that have not yet been synchronized."
  },
  {
    "objectID": "DataStore Events - Flutter-4",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The following DataStore events are defined:"
  },
  {
    "objectID": "DataStore Events - Flutter-5",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "Dispatched when DataStore starts and every time network status changes"
  },
  {
    "objectID": "DataStore Events - Flutter-6",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "HubPayload NetworkStatusEvent contains:"
  },
  {
    "objectID": "DataStore Events - Flutter-7",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "active (Bool): true if the DataStore is on a network that can connect the Cloud; false, otherwise"
  },
  {
    "objectID": "DataStore Events - Flutter-8",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "subscriptionsEstablished",
    "depth": 2,
    "text": "Dispatched when DataStore has finished establishing its subscriptions to all models"
  },
  {
    "objectID": "DataStore Events - Flutter-9",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "subscriptionsEstablished",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - Flutter-10",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "Dispatched when DataStore is about to perform its initial sync queries"
  },
  {
    "objectID": "DataStore Events - Flutter-11",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "HubPayload syncQueriesStartedEvent contains:"
  },
  {
    "objectID": "DataStore Events - Flutter-12",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "models ([String]): an array of each model's name"
  },
  {
    "objectID": "DataStore Events - Flutter-13",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesReady",
    "depth": 2,
    "text": "Dispatched when all models have been synced from the cloud"
  },
  {
    "objectID": "DataStore Events - Flutter-14",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesReady",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - Flutter-15",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "ready",
    "depth": 2,
    "text": "Dispatched when DataStore as a whole is ready, at this point all data is available"
  },
  {
    "objectID": "DataStore Events - Flutter-16",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "ready",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - Flutter-17",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "Dispatched when:"
  },
  {
    "objectID": "DataStore Events - Flutter-18",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "the DataStore starts"
  },
  {
    "objectID": "DataStore Events - Flutter-19",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "each time a local mutation is enqueued into the outbox"
  },
  {
    "objectID": "DataStore Events - Flutter-20",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "each time a local mutation is finished processing"
  },
  {
    "objectID": "DataStore Events - Flutter-21",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "HubPayload OutboxStatusEvent contains:"
  },
  {
    "objectID": "DataStore Events - Flutter-22",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "isEmpty (Bool): a boolean value indicating that there are no local changes still pending upload to the Cloud"
  },
  {
    "objectID": "DataStore Events - Flutter-23",
    "title": "DataStore Events - Flutter",
    "description": "Listening to DataStore events - Flutter",
    "slug": "/lib/datastore/datastore-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "Usage",
    "depth": 2,
    "text": "To see if the network status is active, you could set up the following listener:"
  },
  {
    "objectID": "DataStore Events - Android-0",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "DataStore periodically publishes state notifications onto Amplify's Hub. You can subscribe to the Hub to gain insight into the internal state of the DataStore. Events are published when:"
  },
  {
    "objectID": "DataStore Events - Android-1",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Your device loses or regains network connectivity;"
  },
  {
    "objectID": "DataStore Events - Android-2",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "Data is synchronized with the Cloud;"
  },
  {
    "objectID": "DataStore Events - Android-3",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "There are new, pending changes that have not yet been synchronized."
  },
  {
    "objectID": "DataStore Events - Android-4",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The following DataStore events are defined:"
  },
  {
    "objectID": "DataStore Events - Android-5",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "Dispatched when DataStore starts and every time network status changes"
  },
  {
    "objectID": "DataStore Events - Android-6",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "HubPayload NetworkStatusEvent contains:"
  },
  {
    "objectID": "DataStore Events - Android-7",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "networkStatus",
    "depth": 2,
    "text": "active (Bool): true if the DataStore is on a network that can connect the Cloud; false, otherwise"
  },
  {
    "objectID": "DataStore Events - Android-8",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "subscriptionsEstablished",
    "depth": 2,
    "text": "Dispatched when DataStore has finished establishing its subscriptions to all models"
  },
  {
    "objectID": "DataStore Events - Android-9",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "subscriptionsEstablished",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - Android-10",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "Dispatched when DataStore is about to perform its initial sync queries"
  },
  {
    "objectID": "DataStore Events - Android-11",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "HubPayload syncQueriesStartedEvent contains:"
  },
  {
    "objectID": "DataStore Events - Android-12",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesStarted",
    "depth": 2,
    "text": "models ([String]): an array of each model's name"
  },
  {
    "objectID": "DataStore Events - Android-13",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesReady",
    "depth": 2,
    "text": "Dispatched when all models have been synced from the cloud"
  },
  {
    "objectID": "DataStore Events - Android-14",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "syncQueriesReady",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - Android-15",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "ready",
    "depth": 2,
    "text": "Dispatched when DataStore as a whole is ready, at this point all data is available"
  },
  {
    "objectID": "DataStore Events - Android-16",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "ready",
    "depth": 2,
    "text": "HubPayload: N/A"
  },
  {
    "objectID": "DataStore Events - Android-17",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "Dispatched when:"
  },
  {
    "objectID": "DataStore Events - Android-18",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "the DataStore starts"
  },
  {
    "objectID": "DataStore Events - Android-19",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "each time a local mutation is enqueued into the outbox"
  },
  {
    "objectID": "DataStore Events - Android-20",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "each time a local mutation is finished processing"
  },
  {
    "objectID": "DataStore Events - Android-21",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "HubPayload OutboxStatusEvent contains:"
  },
  {
    "objectID": "DataStore Events - Android-22",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "outboxStatus",
    "depth": 2,
    "text": "isEmpty (Bool): a boolean value indicating that there are no local changes still pending upload to the Cloud"
  },
  {
    "objectID": "DataStore Events - Android-23",
    "title": "DataStore Events - Android",
    "description": "Listening to DataStore events - Android",
    "slug": "/lib/datastore/datastore-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "DataStore",
    "type": "article",
    "heading": "Usage",
    "depth": 2,
    "text": "To see if the network status is active, you could set up the following listener:"
  },
  {
    "objectID": "Managing credentials - Flutter-0",
    "title": "Managing credentials - Flutter",
    "description": "Learn how to customize credential storage. - Flutter",
    "slug": "/lib/auth/managing_credentials/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "The Amplify Auth category persists authentication-related information to make it available to other Amplify categories and to your application."
  },
  {
    "objectID": "Auth events - JavaScript-0",
    "title": "Auth events - JavaScript",
    "description": "Listen to various auth events - JavaScript",
    "slug": "/lib/auth/auth-events/q/platform/js",
    "category": "Amplify Libraries",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Cognito Auth Plugin sends important events through Amplify Hub."
  },
  {
    "objectID": "Auth events - iOS-0",
    "title": "Auth events - iOS",
    "description": "Listen to various auth events - iOS",
    "slug": "/lib/auth/auth-events/q/platform/ios",
    "category": "Amplify Libraries",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Cognito Auth Plugin sends important events through Amplify Hub."
  },
  {
    "objectID": "Auth events - Flutter-0",
    "title": "Auth events - Flutter",
    "description": "Listen to various auth events - Flutter",
    "slug": "/lib/auth/auth-events/q/platform/flutter",
    "category": "Amplify Libraries",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Cognito Auth Plugin sends important events through Amplify Hub."
  },
  {
    "objectID": "Auth events - Android-0",
    "title": "Auth events - Android",
    "description": "Listen to various auth events - Android",
    "slug": "/lib/auth/auth-events/q/platform/android",
    "category": "Amplify Libraries",
    "subcategory": "Authentication",
    "type": "article",
    "heading": null,
    "depth": null,
    "text": "AWS Cognito Auth Plugin sends important events through Amplify Hub."
  }
]